
Процедура ЕРЦ_ОбновитьОрганизацииЛицевыхСчетовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Если Источник.ОбменДанными.Загрузка = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КВП_УправлениеУслугами")
		И Источник.ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
		Запрос.УстановитьПараметр("Организация", Источник.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	СпрЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	&Регистратор КАК ДокументОснование
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК СпрЛицевыеСчета
		|ГДЕ
		|	(СпрЛицевыеСчета.Ссылка В
		|				(ВЫБРАТЬ
		|					Т.Объект
		|				ИЗ
		|					Документ.КВП_УправлениеУслугами.Объекты КАК Т
		|				ГДЕ
		|					Т.Ссылка = &Регистратор)
		|			ИЛИ СпрЛицевыеСчета.Адрес В
		|				(ВЫБРАТЬ
		|					Т.Объект
		|				ИЗ
		|					Документ.КВП_УправлениеУслугами.Объекты КАК Т
		|				ГДЕ
		|					Т.Ссылка = &Регистратор))";
		
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.КВП_ОткрытиеЛицевогоСчета") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
		Запрос.УстановитьПараметр("ЛицевойСчет", Источник.ЛицевойСчет);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	СпрЛицевыеСчета.Адрес КАК Помещение
		|ПОМЕСТИТЬ ВТ_ЛС
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК СпрЛицевыеСчета
		|ГДЕ
		|	СпрЛицевыеСчета.Ссылка = &ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УправлениеУслугами.Ссылка.Организация КАК Организация,
		|	&ЛицевойСчет КАК ЛицевойСчет,
		|	&Регистратор КАК ДокументОснование
		|ИЗ
		|	Документ.КВП_УправлениеУслугами.Объекты КАК УправлениеУслугами
		|ГДЕ
		|	УправлениеУслугами.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета)
		|	И (УправлениеУслугами.Объект = &ЛицевойСчет
		|			ИЛИ УправлениеУслугами.Объект В
		|				(ВЫБРАТЬ
		|					Т.Помещение
		|				ИЗ
		|					ВТ_ЛС КАК Т))";
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ЕРЦ_ЛицевыеСчетаОрганизаций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Записать();
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЕРЦ_УдалитьОрганизацииЛицевыхСчетовОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Если Источник.ОбменДанными.Загрузка = Истина Тогда
	//	Возврат;
	//КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Источник.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛицевыеСчетаОрганизаций.Организация КАК Организация,
	|	ЛицевыеСчетаОрганизаций.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.ЕРЦ_ЛицевыеСчетаОрганизаций КАК ЛицевыеСчетаОрганизаций
	|ГДЕ
	|	ЛицевыеСчетаОрганизаций.ДокументОснование = &Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ЕРЦ_ЛицевыеСчетаОрганизаций.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЕРЦЖурналРегистрацииЗаписьВРегистр() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	ДатаНачала  = ПолучитьДатуОкончанияЗаписейЖурналаРегистрации();	
	Результат   = ЕРЦЖурналРегистрацииЗаписьВРегистрЗаПроизвольныйПериод(ДатаНачала, ТекущаяДата);
	
КонецПроцедуры

Функция ПолучитьДатуОкончанияЗаписейЖурналаРегистрации()
	
	ДатаОкончанияЗаписей = Дата(1,1,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕРЦ_ЖурналРегистрации.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ЕРЦ_ЖурналРегистрации КАК ЕРЦ_ЖурналРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ДатаОкончанияЗаписей = ВыборкаДетальныеЗаписи.Дата;
	КонецЕсли;
	
	Возврат ДатаОкончанияЗаписей;
	
КонецФункции  

Функция ПолучитьДатуНачалаЗаписейЖурналаРегистрации()
	
	ДатаНачалаЗаписей = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕРЦ_ЖурналРегистрации.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ЕРЦ_ЖурналРегистрации КАК ЕРЦ_ЖурналРегистрации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ДатаНачалаЗаписей = ВыборкаДетальныеЗаписи.Дата;
	КонецЕсли;
	
	Возврат ДатаНачалаЗаписей;
	
КонецФункции   

Функция ЕРЦЖурналРегистрацииЗаписьВРегистрЗаПроизвольныйПериод(ДатаНачала, ДатаОкончания) Экспорт	
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	Приемник = Новый ТаблицаЗначений;
	Колонки  = "
	|Данные,
	|Дата,
	|ИмяПользователя,
	|Метаданные,
	|Пользователь,
	|ПредставлениеДанных,
	|ПредставлениеМетаданных,
	|ПредставлениеСобытия";
	
	Событие  = Новый Массив;
	Событие.Добавить("_$Data$_.New");
	Событие.Добавить("_$Data$_.Post");
	Событие.Добавить("_$Data$_.Unpost");
	Событие.Добавить("_$Data$_.Update");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСохраненияРегистрации.Метаданные КАК Метаданные
	|ИЗ
	|	РегистрСведений.ЕРЦ_МетаданныеДляЖурналаРегистрации КАК НастройкиСохраненияРегистрации
	|ГДЕ
	|	НастройкиСохраненияРегистрации.Отключить";
	
	МетаданныеИсключение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Метаданные");	
	МетаданныеОтбор      = Новый Массив;
	
	ЕРЦЖурналРегистрацииСформироватьМассивМетаданных(МетаданныеИсключение, МетаданныеОтбор);
	
	Отбор = Новый Структура("ДатаНачала, ДатаОкончания, Событие, Метаданные",ДатаНачала, ДатаОкончания, Событие, МетаданныеОтбор);
	
	Если МетаданныеОтбор.Количество() > 0 Тогда
		ВыгрузитьЖурналРегистрации(Приемник,Отбор,Колонки);   	
	КонецЕсли;

	ЕРЦЖурналРегистрацииОчиститьЗаписи(ДатаНачала, ДатаОкончания);  
	
	Для каждого СтрокаТЗ Из Приемник Цикл
		Если СтрокаТЗ.Метаданные = "РегистрСведений.ЕРЦ_ЖурналРегистрации" Тогда
			Продолжить;	
		КонецЕсли; 
		
		МЗ = РегистрыСведений.ЕРЦ_ЖурналРегистрации.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МЗ,СтрокаТЗ);
		
		МЗ.УникальныйИдентификатор = Новый УникальныйИдентификатор; 		
		МЗ.Записать();
	КонецЦикла;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЕРЦЖурналРегистрацииЗаписьВРегистр", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	
	Возврат Истина;
КонецФункции

Процедура ЕРЦЖурналРегистрацииСформироватьМассивМетаданных(МетаданныеИсключение, МетаданныеОтбор) Экспорт
	
	Для каждого ОбъектМетданных Из Метаданные.Справочники Цикл
		ДобавитьМетаданные(ОбъектМетданных,МетаданныеИсключение,МетаданныеОтбор); 	
	КонецЦикла;
	
	Для каждого ОбъектМетданных Из Метаданные.Документы Цикл
		ДобавитьМетаданные(ОбъектМетданных,МетаданныеИсключение,МетаданныеОтбор); 	
	КонецЦикла;
	
	Для каждого ОбъектМетданных Из Метаданные.Константы Цикл
		ДобавитьМетаданные(ОбъектМетданных,МетаданныеИсключение,МетаданныеОтбор); 	
	КонецЦикла;
	
	Для каждого ОбъектМетданных Из Метаданные.ПланыВидовХарактеристик Цикл
		ДобавитьМетаданные(ОбъектМетданных,МетаданныеИсключение,МетаданныеОтбор); 	
	КонецЦикла;
	
	Для каждого ОбъектМетданных Из Метаданные.РегистрыСведений Цикл		
		Если ОбъектМетданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектМетданных = Метаданные.РегистрыСведений.ЕРЦ_ЖурналРегистрации Тогда
			Продолжить;	
		КонецЕсли;
		
		ДобавитьМетаданные(ОбъектМетданных,МетаданныеИсключение,МетаданныеОтбор);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьМетаданные(ОбъектМетданных,МетаданныеИсключение,МетаданныеОтбор)
	
	ПолноеИмя = ОбъектМетданных.ПолноеИмя();
	
	Если СтрНайти(НРег(ПолноеИмя),".удалить") > 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если МетаданныеИсключение.Найти(ПолноеИмя) = Неопределено Тогда		
		МетаданныеОтбор.Добавить(ПолноеИмя);
	КонецЕсли; 

КонецПроцедуры

Процедура ЕРЦЖурналРегистрацииОчиститьЗаписи(ДатаНачала, ДатаОкончания)
	
	ДатаОкончанияЗаписей = ПолучитьДатуОкончанияЗаписейЖурналаРегистрации(); 	
	ДатаНачалаЗаписей    = ПолучитьДатуНачалаЗаписейЖурналаРегистрации();
	
	Если ДатаНачала <= ДатаОкончанияЗаписей И ДатаОкончания >= ДатаНачалаЗаписей Тогда 
		ДатаОчистки          = Макс(ДатаНачалаЗаписей, ДатаНачала);
		ДоДаты               = Мин(ДатаОкончанияЗаписей, ДатаОкончания);
		ПредставлениеСобытия = Новый Массив;
		ПредставлениеСобытия.Добавить("Данные. Добавление");
		ПредставлениеСобытия.Добавить("Данные. Изменение");
		ПредставлениеСобытия.Добавить("Данные. Проведение");
		ПредставлениеСобытия.Добавить("Данные. Отмена проведения");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕРЦ_ЖурналРегистрации.Дата КАК Дата,
		|	ЕРЦ_ЖурналРегистрации.ПредставлениеСобытия КАК ПредставлениеСобытия
		|ИЗ
		|	РегистрСведений.ЕРЦ_ЖурналРегистрации КАК ЕРЦ_ЖурналРегистрации
		|ГДЕ
		|	ЕРЦ_ЖурналРегистрации.Дата МЕЖДУ &ДатаОчистки И &ДоДаты
		|	И ЕРЦ_ЖурналРегистрации.ПредставлениеСобытия В(&ПредставлениеСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Запрос.УстановитьПараметр("ДатаОчистки"         , ДатаОчистки);
		Запрос.УстановитьПараметр("ДоДаты"              , ДоДаты);
		Запрос.УстановитьПараметр("ПредставлениеСобытия", ПредставлениеСобытия);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;	
		КонецЕсли; 
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НЗ = РегистрыСведений.ЕРЦ_ЖурналРегистрации.СоздатьНаборЗаписей();
			НЗ.Отбор.Дата.Установить(ВыборкаДетальныеЗаписи.Дата);
			НЗ.Отбор.ПредставлениеСобытия.Установить(ВыборкаДетальныеЗаписи.ПредставлениеСобытия);
			НЗ.Записать(); 		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает данные в регистр сведений ЕРЦ_ЖурналРегистрации  
//
// Параметры:
//  ИмяСобытия          - Строка           - Представление события.
//  ОбъектМетаданных    - ОбъектМетаданных - Объект метаданных (необязательный).
//  Данные              - ЛюбаяСсылка      - Ссылка на объект базы данных (необязательный).
//
Процедура ЕРЦЗаписьЖурналаРегистрации(ИмяСобытия, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ОбъектМетаданныхИмя     = "";
	ОбъектМетаданныхСиноним = "";
	ПредставлениеДанных     = "";
	ТекущийПользователь     = Пользователи.ТекущийПользователь();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Данные)) Тогда
		ОбъектМетаданныхИмя     = Данные.Метаданные().Имя;
		ОбъектМетаданныхСиноним = Данные.Метаданные().Синоним;
		ПредставлениеДанных     = Строка(Данные);
	КонецЕсли;
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданныхИмя     = ОбъектМетаданных.Имя;
		ОбъектМетаданныхСиноним = ОбъектМетаданных.Синоним;
	КонецЕсли;
	
	МЗ = РегистрыСведений.ЕРЦ_ЖурналРегистрации.СоздатьМенеджерЗаписи();
	МЗ.Дата                    = ТекущаяДата();
	МЗ.ПредставлениеСобытия    = ИмяСобытия; 	
	МЗ.УникальныйИдентификатор = Новый УникальныйИдентификатор;
    МЗ.Данные                  = Данные;
	МЗ.Пользователь            = ТекущийПользователь.УникальныйИдентификатор;
	МЗ.ИмяПользователя         = ТекущийПользователь.ПолноеИмя;
	МЗ.Метаданные              = ОбъектМетаданныхИмя; 
	МЗ.ПредставлениеДанных     = ПредставлениеДанных;
	МЗ.ПредставлениеМетаданных = ОбъектМетаданныхСиноним;
	
КонецПроцедуры

Процедура ЕРЦ_ПередачаФайловСправокНаСайт() Экспорт
	
	Сервер = "erc-gkh.ru";
	Адрес  = "local/api/exchange/upload.php?filename=";
	
	ИмяОбъекта           = "ВПФ_СправкиПоЖителю";
	ИдентификаторКоманды = "СправкиПоЖителю";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительнаяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта",ИмяОбъекта);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОтправки.СправкаЖителю КАК СправкаЖителю
	|ИЗ
	|	РегистрСведений.ЕРЦ_СтатусОтправкиНаСайтФормыСправки КАК СтатусыОтправки
	|ГДЕ
	|	НЕ СтатусыОтправки.ОтправленаНаСайт";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			ОбъектыНазначения = Новый Массив;
			ОбъектыНазначения.Добавить(Выборка.СправкаЖителю);
			
			ПараметрыИсточника = Новый Структура;
			ПараметрыИсточника.Вставить("ИдентификаторКоманды", ИдентификаторКоманды);
			ПараметрыИсточника.Вставить("ОбъектыНазначения"   , ОбъектыНазначения);
			
			КоллекцияПечатныхФорм = Неопределено;
			УправлениеПечатью.ПечатьПоВнешнемуИсточнику(ДополнительнаяОбработкаСсылка,
														ПараметрыИсточника,
														КоллекцияПечатныхФорм,
														Неопределено,
														Неопределено);
			
			Если КоллекцияПечатныхФорм = Неопределено ИЛИ КоллекцияПечатныхФорм.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяФайлаДляЗагрузки = ПолучитьИмяВременногоФайла(".pdf");
			
			ТабДок = КоллекцияПечатныхФорм[0].ТабличныйДокумент;
			ТабДок.Записать(ИмяФайлаДляЗагрузки, ТипФайлаТабличногоДокумента.PDF);
			
			СодержимоеФайла = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДляЗагрузки)); 
			
			//РазмерФайлаОтправки = XMLСтрока(СтрДлина(СодержимоеФайла)); 
			//
			//Заголовки = Новый Соответствие();  
			//Заголовки.Вставить("Content-Type"  , "application/octet-stream"); 
			//Заголовки.Вставить("Content-Length", РазмерФайлаОтправки);
			
			УникальныйИдентификаторСтрокой = Строка(Выборка.СправкаЖителю.УникальныйИдентификатор());
			HTTPЗапрос     = Новый HTTPЗапрос(Адрес + XMLСтрока(УникальныйИдентификаторСтрокой));
			HTTPЗапрос.УстановитьТелоИзСтроки(СодержимоеФайла);
			
			HTTPСоединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());     
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
			
			КодСостояния = HTTPОтвет.КодСостояния; 			
			
			Если КодСостояния = 200 Тогда
				
				Ответ = HTTPОтвет.ПолучитьТелоКакСтроку();
				
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Ответ);			
				
				СтруктураJSON = ПрочитатьJSON(ЧтениеJSON);			
				
				ЧтениеJSON.Закрыть();
				
				Если ТипЗнч(СтруктураJSON) = Тип("Структура") И СтруктураJSON.result = 200 Тогда
					
					РегистрыСведений.ЕРЦ_СтатусОтправкиНаСайтФормыСправки.ЗаписатьСтатус(Выборка.СправкаЖителю, Истина);
					
				Иначе
					
					Комментарий = "Нет положительного результата ответа сайта в структуре JSON """ + Ответ + """";
					РегистрыСведений.ЕРЦ_СтатусОтправкиНаСайтФормыСправки.ЗаписатьСтатус(Выборка.СправкаЖителю, Ложь, Истина, Комментарий);
					
				КонецЕсли;
				
			Иначе
				
				Комментарий = "Ошибка на сайте, код состояния ответа """ + Строка(КодСостояния) + """";
				РегистрыСведений.ЕРЦ_СтатусОтправкиНаСайтФормыСправки.ЗаписатьСтатус(Выборка.СправкаЖителю, Ложь, Истина, Комментарий);
				
			КонецЕсли; // Если КодСостояния = 200 Тогда
				
		Исключение
			
			Комментарий = "Ошибка выполнения кода в 1С """ + ОписаниеОшибки() + """";
			РегистрыСведений.ЕРЦ_СтатусОтправкиНаСайтФормыСправки.ЗаписатьСтатус(Выборка.СправкаЖителю, Ложь, Истина, Комментарий);
			
		КонецПопытки;
		
	КонецЦикла; // Пока Выборка.Следующий() Цикл
	
КонецПроцедуры

// + Штинников Е.Н. 20.07.2020 +
// Задача #3661. Изменить выгрузку на сайт по изменениям.
Процедура ЕРЦ_РегистрацияЛицевогоСчетаПриИзмененииВРегистрах(Источник, Отказ, Замещение) Экспорт
	
	//+ЕРЦ УсольцевПВ #12742 16.03.2023 
	//Регистрация ЛС для выгрузки на сайт есть в подписке ерц_РегистрацияЛицевыхСчетовВыгрузкаНаСайт
	//-ЕРЦ УсольцевПВ 16.03.2023 
	
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Параметры = Новый Массив();
	//Параметры.Добавить(Источник.Отбор.Регистратор.Значение);
	//Параметры.Добавить(Источник.Выгрузить());
	//Параметры.Добавить(ТипЗнч(Источник));
	//Параметры.Добавить(Источник.ДополнительныеСвойства);
	//
	//ФоновыеЗадания.Выполнить("ЕРЦ_ОбщийМодуль.ЕРЦ_РегистрацияЛицевогоСчетаПриИзмененииВРегистрахВФоне",
	//						Параметры,
	//						Новый УникальныйИдентификатор,
	//						"ЕРЦ_РегистрацияЛицевогоСчетаПриИзмененииВРегистрах");
	
КонецПроцедуры

//Процедура ЕРЦ_РегистрацияЛицевогоСчетаПриИзмененииВРегистрахВФоне(Знач Регистратор, Знач Источник, Знач ТипЗнчИсточник, Знач ДополнительныеСвойства) Экспорт
//	
//	ВыполнитьРегистрацию  = Истина;
//	ЕРЦ_НаборЗаписейДо    = Неопределено;
//	МассивОбъектовДо      = Новый Массив;
//	МассивНастроекДоступа = Новый Массив;

//	МесяцОбмена = НачалоМесяца(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Дата")); 
//	
//	// Тузин Р.А. 25.02.2022 #12567 (добавим значение - Регистратор для записи в регистр)
//	РегистраторРегистр = Неопределено;
//	
//	Если ТипЗнчИсточник = Тип("РегистрНакопленияНаборЗаписей.КВП_ВзаиморасчетыПоЛицевымСчетам") 
//		Или ТипЗнчИсточник = Тип("РегистрСведенийНаборЗаписей.КВП_ЛицевыеСчета") Тогда
//		
//		//+ЕРЦ УсольцевПВ 29.03.2022 "%Оптимизация%"
//		//Если ДополнительныеСвойства.Свойство("ЕРЦ_НаборЗаписейДо",ЕРЦ_НаборЗаписейДо) Тогда
//		//	МассивОбъектовДо = ЕРЦ_НаборЗаписейДо.ВыгрузитьКолонку("ЛицевойСчет");	
//		//КонецЕсли;
//		//
//		//МассивОбъектов = Источник.ВыгрузитьКолонку("ЛицевойСчет");		
//		//ТекстЗапроса   = "ВЫБРАТЬ
//		//                 |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка
//		//                 |ПОМЕСТИТЬ ВТЛицевыеСчета
//		//                 |ИЗ
//		//                 |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
//		//                 |ГДЕ
//		//                 |	(КВП_ЛицевыеСчета.Ссылка В (&МассивОбъектов)
//		//                 |			ИЛИ КВП_ЛицевыеСчета.Ссылка В (&МассивОбъектовДо))" + ";";
//						
//		Если ДополнительныеСвойства.Свойство("ЕРЦ_НаборЗаписейДо",ЕРЦ_НаборЗаписейДо) Тогда
//			
//			Для каждого Стр Из ЕРЦ_НаборЗаписейДо Цикл
//			
//				НовСтрока = Источник.Добавить();	
//				НовСтрока.ЛицевойСчет = Стр.ЛицевойСчет;
//			
//			КонецЦикла;
//		КонецЕсли;
//		
//		ТекстЗапроса   = "ВЫБРАТЬ
//		                 |	КВП_ЛицевыеСчета.ЛицевойСчет КАК Ссылка
//		                 |ПОМЕСТИТЬ ВТЛицевыеСчета
//		                 |ИЗ
//		                 |	&ЛЧ КАК КВП_ЛицевыеСчета
//						 |
//						 |;";
//				
//		//-ЕРЦ УсольцевПВ 29.03.2022 
//		
//	ИначеЕсли ТипЗнчИсточник = Тип("РегистрСведенийНаборЗаписей.КВП_ЗакрепленныеСчетчики") Тогда
//		
//		//+ЕРЦ УсольцевПВ 29.03.2022 
//		
//		//Если ДополнительныеСвойства.Свойство("ЕРЦ_НаборЗаписейДо",ЕРЦ_НаборЗаписейДо) Тогда
//		//	МассивОбъектовДо = ЕРЦ_НаборЗаписейДо.ВыгрузитьКолонку("Объект");	
//		//КонецЕсли;
//		Если ДополнительныеСвойства.Свойство("ЕРЦ_НаборЗаписейДо",ЕРЦ_НаборЗаписейДо) Тогда
//			Для каждого Стр Из ЕРЦ_НаборЗаписейДо Цикл
//				
//				НовСтрока = Источник.Добавить();	
//				НовСтрока.Объект = Стр.Объект;
//				
//			КонецЦикла;
//		КонецЕсли;
//		//-ЕРЦ УсольцевПВ 29.03.2022 
//		
//		МассивОбъектов = Источник.ВыгрузитьКолонку("Объект");
//		ТекстЗапроса   = "ВЫБРАТЬ
//		                 |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка
//		                 |ПОМЕСТИТЬ ВТЛицевыеСчета
//		                 |ИЗ
//		                 |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
//		                 |ГДЕ
//		                 |	КВП_ЛицевыеСчета.Ссылка В(&МассивОбъектов)
//		                 |
//		                 |ОБЪЕДИНИТЬ ВСЕ
//		                 |
//		                 |ВЫБРАТЬ
//		                 |	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
//		                 |ИЗ
//		                 |	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних КАК КВП_ЛицевыеСчетаСрезПоследних
//		                 |ГДЕ
//		                 |	(КВП_ЛицевыеСчетаСрезПоследних.Объект В (&МассивОбъектов)
//						 //+ЕРЦ УсольцевПВ 29.03.2022 
//						 //|			ИЛИ КВП_ЛицевыеСчетаСрезПоследних.Объект В (&МассивОбъектовДо))" + ";";
//						 |);";
//						 //-ЕРЦ УсольцевПВ 29.03.2022 
//		
//	ИначеЕсли ТипЗнчИсточник = Тип("РегистрСведенийНаборЗаписей.КВП_ПоказанияСчетчиков") Тогда
//		
//		//+ЕРЦ УсольцевПВ 29.03.2022 
//		//Если ДополнительныеСвойства.Свойство("ЕРЦ_НаборЗаписейДо",ЕРЦ_НаборЗаписейДо) Тогда
//		//	МассивОбъектовДо = ЕРЦ_НаборЗаписейДо.ВыгрузитьКолонку("Счетчик");	
//		//КонецЕсли;     
//		Если ДополнительныеСвойства.Свойство("ЕРЦ_НаборЗаписейДо",ЕРЦ_НаборЗаписейДо) Тогда
//			Для каждого Стр Из ЕРЦ_НаборЗаписейДо Цикл
//				
//				НовСтрока = Источник.Добавить();	
//				НовСтрока.Счетчик = Стр.Счетчик;
//				
//			КонецЦикла;
//		КонецЕсли;
//		
//		//-ЕРЦ УсольцевПВ 29.03.2022 
//		
//		МассивОбъектов = Источник.ВыгрузитьКолонку("Счетчик");
//		ТекстЗапроса   = "ВЫБРАТЬ
//		                 |	ВЫБОР
//		                 |		КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
//		                 |			ТОГДА КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
//		                 |		ИНАЧЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
//		                 |	КОНЕЦ КАК Ссылка
//		                 |ПОМЕСТИТЬ ВТЛицевыеСчета
//		                 |ИЗ
//						 |	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
//		                 |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних КАК КВП_ЛицевыеСчетаСрезПоследних
//		                 |		ПО КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект = КВП_ЛицевыеСчетаСрезПоследних.Объект
//		                 |ГДЕ
//						 //+ЕРЦ УсольцевПВ 29.03.2022 
//						 //|	(КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик В (&МассивОбъектов)
//						 //|			ИЛИ КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик В (&МассивОбъектовДо))
//						 |	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик В (&МассивОбъектов)
//						 //-ЕРЦ УсольцевПВ 29.03.2022 
//		                 |	И (КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
//		                 |			ИЛИ КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета)" + ";" ;
//		
//	Иначе
//		ВыполнитьРегистрацию = Ложь;		
//	КонецЕсли;	
// 
//	
//	Если ВыполнитьРегистрацию Тогда 
//		УстановитьПривилегированныйРежим(Истина);

//		Запрос = Новый Запрос;
//		Запрос.Текст = ТекстЗапроса + 
//		"ВЫБРАТЬ
//		|	&ТекущаяДата КАК Период,
//		|	УПЖКХ_НастройкиДоступаКСайту.Ссылка КАК НастройкаДоступаКСайту,
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Регистратор КАК Регистратор,
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация КАК Организация
//		|ИЗ
//		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
//		|			&ТекущаяДата,
//		|			ЛицевойСчет В
//		|				(ВЫБРАТЬ
//		|					ВТЛицевыеСчета.Ссылка
//		|				ИЗ
//		|					ВТЛицевыеСчета КАК ВТЛицевыеСчета)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_НастройкиДоступаКСайту КАК УПЖКХ_НастройкиДоступаКСайту
//		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом КАК УПЖКХ_ВариантыОбменаДаннымиССайтом
//		|			ПО (УПЖКХ_ВариантыОбменаДаннымиССайтом.НастройкаДоступа = УПЖКХ_НастройкиДоступаКСайту.Ссылка)
//		|				И (УПЖКХ_ВариантыОбменаДаннымиССайтом.ИспользоватьРегламентноеЗадание)
//		|				И (УПЖКХ_ВариантыОбменаДаннымиССайтом.ВыгрузкаДанныхПоЛС)
//		|				И (УПЖКХ_НастройкиДоступаКСайту.ЕРЦ_ВыгрузкаДанныхПоЛСПоИзменениям)
//		|		ПО УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация = УПЖКХ_НастройкиДоступаКСайту.Организация
//		|ГДЕ
//		|	(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия = ДАТАВРЕМЯ(1, 1, 1)
//		|			ИЛИ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.СрокДействия >= НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
//		|	И НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор.ПометкаУдаления
//		|	И УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент.ерцВыгружатьНаСайт
//		|	И НЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Регистратор ССЫЛКА Документ.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
//		|	УПЖКХ_НастройкиДоступаКСайту.Ссылка,
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Регистратор,
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация,
//		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец";	
//		
//		Запрос.УстановитьПараметр("ТекущаяДата"     , ТекущаяДата());
//		//Запрос.УстановитьПараметр("МассивОбъектов"  , МассивОбъектов);
//		//Запрос.УстановитьПараметр("МассивОбъектовДо", МассивОбъектовДо);
//		Запрос.УстановитьПараметр("ЛЧ", Источник);  //ЕРЦ УсольцевПВ 29.03.2022
//		
//		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать(); 
//								
//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
//			// Новиков А.Н 23.04.21 #9053 ++
//			//МЗ = РегистрыСведений.ЕРЦ_ВыгрузитьЛицевыеСчетаНаСайт.СоздатьМенеджерЗаписи();
//			//ЗаполнитьЗначенияСвойств(МЗ,ВыборкаДетальныеЗаписи);
//			//МЗ.Записать(); 
//			//МЗ = РегистрыСведений.ЕРЦ_ВыгрузитьЛицевыеСчетаНаСайт.СоздатьНаборЗаписей();
//			//МЗ.Отбор.НастройкаДоступаКСайту.Установить(ВыборкаДетальныеЗаписи.НастройкаДоступаКСайту);
//			//МЗ.Отбор.ЛицевойСчет.Установить(ВыборкаДетальныеЗаписи.ЛицевойСчет);
//			//МЗ.Записать();
//			//
//			//НовЗапись = МЗ.Добавить();
//			//ЗаполнитьЗначенияСвойств(Новзапись,ВыборкаДетальныеЗаписи);
//			//МЗ.Записать();
//	     	// Новиков А.Н 23.04.21 --- 
//			
//			//+ЕРЦ УсольцевПВ #999 27.04.2022 
//			//перенес условие в запрос
//			//// Тузин Р.А. 25.02.2022 #12567 ++
//			//Если ТипЗнч(ВыборкаДетальныеЗаписи.Регистратор) = Тип("ДокументСсылка.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам") Тогда
//			//	Продолжить;
//			//КонецЕсли;
//			//-ЕРЦ УсольцевПВ 27.04.2022 
//			
//			//+ЕРЦ УсольцевПВ 31.03.2022 
//			
//			//НаборРег = РегистрыСведений.ЕРЦ_ВыгрузитьЛицевыеСчетаНаСайт.СоздатьНаборЗаписей();
//			//НаборРег.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
//			//НаборРег.Прочитать();
//			//
//			//НовЗапись = НаборРег.Добавить();
//			//НовЗапись.Период      = ВыборкаДетальныеЗаписи.Регистратор.Дата;
//			//НовЗапись.Организация = ВыборкаДетальныеЗаписи.Организация;
//			//НовЗапись.ЛицевойСчет = ВыборкаДетальныеЗаписи.ЛицевойСчет;
//			//НовЗапись.Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
//			//НовЗапись.Выгружен    = Ложь;
//			//НаборРег.Записать();
//			// Тузин Р.А. 25.02.2022 #12567 --		
//						
//			НаборЗаписей = РегистрыСведений.ЕРЦ_РегистрацияЛСдляОбменаССайтом.СоздатьНаборЗаписей();
//			НаборЗаписей.Отбор.МесяцОбмена.Установить(МесяцОбмена);
//			НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
//			НаборЗаписей.Отбор.Здание.Установить(ВыборкаДетальныеЗаписи.Здание);
//			НаборЗаписей.Отбор.ЛицевойСчет.Установить(ВыборкаДетальныеЗаписи.ЛицевойСчет);
//			
//			НовЗапись = НаборЗаписей.Добавить();
//			НовЗапись.МесяцОбмена		= МесяцОбмена;
//			НовЗапись.Организация 		= ВыборкаДетальныеЗаписи.Организация;
//			НовЗапись.Здание 			= ВыборкаДетальныеЗаписи.Здание;
//			НовЗапись.ЛицевойСчет 		= ВыборкаДетальныеЗаписи.ЛицевойСчет;
//			НаборЗаписей.Записать();
//			
//			//-ЕРЦ УсольцевПВ 31.03.2022 
//		КонецЦикла;			
//	КонецЕсли;

//КонецПроцедуры

Процедура ЕРЦ_РегистрацияЛицевогоСчетаПриУдаленииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ Или Источник.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;

	Источник.Прочитать();
	
	Если Источник.Количество() > 0 Тогда
		Источник.ДополнительныеСвойства.Вставить("ЕРЦ_НаборЗаписейДо", Источник.Выгрузить());	
	КонецЕсли; 
	
	Источник.Очистить();
	
КонецПроцедуры // - Штинников Е.Н. 20.07.2020 -

Процедура ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		Источник,
		Отказ,
		РежимЗаписи,
		РежимПроведения) Экспорт
		
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Сутки = 24*60*60;
	
	ИзменениеЗапрещено = (Источник.Дата < ТекущаяДатаСеанса() - Сутки);
	
	Если ИзменениеЗапрещено Тогда
		
		//Источник.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
		
		ИзменениеЗапрещено = Ложь;
		
		Текст = Строка(Источник);
		
		НоваяВерсия = Источник.ЭтоНовый();
		Если НоваяВерсия Тогда
			Шаблон = НСтр("ru = '%1 невозможно поместить в запрещенный период.'");
		Иначе
			Шаблон = НСтр("ru = '%1 в запрещенном периоде невозможно изменить.'");
		КонецЕсли;
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Текст) + Символы.ПС + Символы.ПС;
		ОписаниеОшибки = ОписаниеОшибки + "Внесение или изменение информации допустимо только текущей датой";
		
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

// + Штинников Е.Н. 21.08.2020 +
// Задача #4412. Обмен оплаты Госпошлин между ЖКХ и ERP.
Процедура ЕРЦ_РегистрацияГоспошлиныПриПроведенииОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	// TODO:
	Возврат;
	
	Если Отказ Тогда
		Возврат;	
	КонецЕсли; 
	
	// запишем документ в очередь к отправке в ERP
	ЗаписьВРегистре = РегистрыСведений.ЕРЦ_СтатусОтправкиВ_ERP_Госпошлины.Получить(Новый Структура("Госпошлина",Источник.Ссылка));
	
	Если НЕ ЗаписьВРегистре.СозданаВ_ERP Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РегистрыСведений.ЕРЦ_СтатусОтправкиВ_ERP_Госпошлины.ЗаписатьСтатус(Источник.Ссылка,Ложь);
		
	КонецЕсли;

КонецПроцедуры // - Штинников Е.Н. 21.08.2020 -

// + Штинников Е.Н. 04.09.2020 +
// Задача #4954. Автоматическое создание структуры домов
Процедура ЕРЦ_ЗаписьОрганизацииВТабличнуюЧастьЗдания() Экспорт
	
	// TODO:
	Возврат;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация КАК Организация,
		|	УПЖКХ_Помещения.Владелец КАК Здание,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Период, МЕСЯЦ)) КАК Период
		|ПОМЕСТИТЬ ВТВзаиморасчетыОрганизацииЗдания
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|		ПО УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес = УПЖКХ_Помещения.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Организация,
		|	УПЖКХ_Помещения.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВзаиморасчетыОрганизацииЗдания.Здание КАК Здание,
		|	ВТВзаиморасчетыОрганизацииЗдания.Организация КАК Организация,
		|	ВТВзаиморасчетыОрганизацииЗдания.Период КАК Период,
		|	ИСТИНА КАК НаходитсяНаОбслуживании
		|ИЗ
		|	ВТВзаиморасчетыОрганизацииЗдания КАК ВТВзаиморасчетыОрганизацииЗдания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях
		|		ПО ВТВзаиморасчетыОрганизацииЗдания.Период = УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Период
		|			И ВТВзаиморасчетыОрганизацииЗдания.Здание = УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Здание
		|			И ВТВзаиморасчетыОрганизацииЗдания.Организация = УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация
		|ГДЕ
		|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МЗ = РегистрыСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МЗ,Выборка);
		
		Попытка
			
			МЗ.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЕРЦ_ЗаписьОрганизацииВТабличнуюЧастьЗдания",УровеньЖурналаРегистрации.Ошибка,РегистрыСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях, Выборка.Здание,ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Здание КАК Здание,
		|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Здания.ЕРЦ_УправляющиеКомпании КАК КВП_ЗданияЕРЦ_УправляющиеКомпании
		|		ПО УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Здание = КВП_ЗданияЕРЦ_УправляющиеКомпании.Ссылка
		|			И УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация = КВП_ЗданияЕРЦ_УправляющиеКомпании.Организация
		|ГДЕ
		|	КВП_ЗданияЕРЦ_УправляющиеКомпании.Организация ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Здание,
		|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация
		|ИТОГИ ПО
		|	Здание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЗданияЕРЦ_УправляющиеКомпании.Ссылка КАК Здание,
		|	КВП_ЗданияЕРЦ_УправляющиеКомпании.Организация КАК Организация
		|ИЗ
		|	Справочник.КВП_Здания.ЕРЦ_УправляющиеКомпании КАК КВП_ЗданияЕРЦ_УправляющиеКомпании
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях
		|		ПО (УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Здание = КВП_ЗданияЕРЦ_УправляющиеКомпании.Ссылка)
		|			И (УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация = КВП_ЗданияЕРЦ_УправляющиеКомпании.Организация)
		|ГДЕ
		|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЗданияЕРЦ_УправляющиеКомпании.Ссылка,
		|	КВП_ЗданияЕРЦ_УправляющиеКомпании.Организация
		|ИТОГИ ПО
		|	Здание";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗдание = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗдание.Следующий() Цикл
		
		ЗданиеОбъект = ВыборкаЗдание.Здание.ПолучитьОбъект();
	
		ВыборкаДетальныеЗаписи = ВыборкаЗдание.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТЧ = ЗданиеОбъект.ЕРЦ_УправляющиеКомпании.Добавить();
			СтрокаТЧ.Организация = ВыборкаДетальныеЗаписи.Организация;
			
		КонецЦикла;
		
		Попытка
			
			ЗданиеОбъект.ОбменДанными.Загрузка = Истина;
			ЗданиеОбъект.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЕРЦ_ЗаписьОрганизацииВТабличнуюЧастьЗдания",УровеньЖурналаРегистрации.Ошибка,Справочники.КВП_Здания, ВыборкаЗдание.Здание,ОписаниеОшибки());
			
		КонецПопытки;

	КонецЦикла;
	
	ВыборкаЗдание = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗдание.Следующий() Цикл
		
		ЗданиеОбъект = ВыборкаЗдание.Здание.ПолучитьОбъект();
	
		ВыборкаДетальныеЗаписи = ВыборкаЗдание.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СтрокаТЧ = ЗданиеОбъект.ЕРЦ_УправляющиеКомпании.Найти(ВыборкаДетальныеЗаписи.Организация, "Организация");
			
			ЗданиеОбъект.ЕРЦ_УправляющиеКомпании.Удалить(СтрокаТЧ);
			
		КонецЦикла;
		
		Попытка
			
			ЗданиеОбъект.ОбменДанными.Загрузка = Истина;
			ЗданиеОбъект.Записать();
			
		Исключение
			
			ЗаписьЖурналаРегистрации("ЕРЦ_ЗаписьОрганизацииВТабличнуюЧастьЗдания",УровеньЖурналаРегистрации.Ошибка,Справочники.КВП_Здания, ВыборкаЗдание.Здание,ОписаниеОшибки());
			
		КонецПопытки;

	КонецЦикла;
	
КонецПроцедуры // - Штинников Е.Н. 04.09.2020 -

// Рассчитывает дату окончания периода
//
// Параметры:
// ДатаНачала          - дата начала, от которой будет рассчитана дата окончания периода
// Периодичность      - значение перечисления "Периодичность"
// КоличествоПериодов - количество повторов периода.
//
// Возвращаемое значение:
// Дата
// Дата окончания периода
//
Функция РассчитатьДатуОкончанияПериода(ДатаНачала, Периодичность, КоличествоПериодов) Экспорт

	ОдинДень = 86400;

	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда 
		
		ДатаОкончания = ДатаНачала + ОдинДень * КоличествоПериодов;

	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ДатаОкончания = ДатаНачала + ОдинДень * 7 * КоличествоПериодов;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) Тогда
		
		ДеньМесяца = День(ДатаНачала);
		НачМесяца = НачалоМесяца(ДатаНачала);
		Если ДеньМесяца <= 10 Тогда
			НомерДекады = 1;
		ИначеЕсли ДеньМесяца <= 20 Тогда
			НомерДекады = 2;
		Иначе
			НомерДекады = 3;
		КонецЕсли;
			
		НомерДекады = НомерДекады + КоличествоПериодов;
		
		Если НомерДекады > 0 Тогда
			Месяцев = Цел((НомерДекады-1)/3);
		Иначе
			Месяцев = -1 - Цел((-НомерДекады)/3);
		КонецЕсли;
			
		НомерДекады = НомерДекады - 3*Месяцев;
		Дт = ДобавитьМесяц(НачМесяца, Месяцев) + (НомерДекады-1) * 10 * ОдинДень;

		Если КоличествоПериодов > 0 Тогда
			ДатаОкончания = Дт;
		
		Иначе 
			ДеньМесяца = День(Дт);

			Если ДеньМесяца <= 10 Тогда
				ДатаОкончания = КонецДня(НачалоМесяца(Дт) + ОдинДень * 9);
			ИначеЕсли ДеньМесяца <= 20 Тогда
				ДатаОкончания = КонецДня(НачалоМесяца(Дт) + ОдинДень * 19);
			Иначе
				ДатаОкончания = КонецМесяца(Дт);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Периодичность= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 3 * КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 6 * КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 12 * КоличествоПериодов);

	КонецЕсли;
			
	Возврат КонецДня(ДатаОкончания-ОдинДень);

КонецФункции // РассчитатьДатуОкончанияПериода()

Функция ПолучитьАдресСхемыПреобразованияДанных(Знач ТипПлана, Знач УникальныйИдентификатор, ЗаполнятьНазначениеВТЧ = Ложь) Экспорт 

	АдресСхемыПреобразованияДанных = "";
	СхемаКомпоновкиДанныхПреобразование = ПолучитьСхемуПреобразованияДанных(ТипПлана,,ЗаполнятьНазначениеВТЧ);
	
	АдресСхемыПреобразованияДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхПреобразование, УникальныйИдентификатор);
	
	Возврат АдресСхемыПреобразованияДанных;
	
КонецФункции

Функция ПолучитьСхемуПреобразованияДанных(Знач ТипПлана, Знач ЗаполнятьПоФормуле = Ложь, ЗаполнятьНазначениеВТЧ = Ложь) Экспорт 
	
	СКД_Преобразование = Неопределено;
	
	ИсключатьХарактеристики = Ложь;
	ИсключатьСклады = Ложь;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланЗакупок Тогда
		СКД_Преобразование = Документы.ПланЗакупок.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли; 
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланОстатков Тогда
		СКД_Преобразование = Документы.ПланОстатков.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
		СКД_Преобразование = Документы.ПланПродаж.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
		СКД_Преобразование = Документы.ПланПродажПоКатегориям.ПолучитьМакет("СКД_Преобразование");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.ПланСборкиРазборки Тогда
		СКД_Преобразование = Документы.ПланСборкиРазборки.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
		ИсключатьСклады = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	КонецЕсли; 
	
	//++ НЕ УТ
	Если ТипПлана = Перечисления.ТипыПланов.ПланПроизводства Тогда
		СКД_Преобразование = Документы.ПланПроизводства.ПолучитьМакет("СКД_Преобразование");
		ИсключатьХарактеристики = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	КонецЕсли;
	//-- НЕ УТ
	
	ИсключатьНазначение = Не ЗаполнятьНазначениеВТЧ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	
	Если ЗаполнятьПоФормуле Тогда
		ИсключатьСклады = Истина;
	КонецЕсли; 
	
	Если ИсключатьХарактеристики ИЛИ ИсключатьСклады ИЛИ ИсключатьНазначение Тогда
		
		ПолеХарактеристика = Новый ПолеКомпоновкиДанных("Характеристика");
		ПолеСклад = Новый ПолеКомпоновкиДанных("Склад");
		ПолеНазначение = Новый ПолеКомпоновкиДанных("Назначение");
		
		Отборы = СКД_Преобразование.ВариантыНастроек[0].Настройки.Отбор.Элементы;
		Индекс = Отборы.Количество() - 1;
		Пока  Индекс >= 0 Цикл
			Отбор = Отборы[Индекс];
			Индекс = Индекс - 1;
			
			Если ИсключатьХарактеристики И Отбор.ЛевоеЗначение = ПолеХарактеристика Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Характеристика");
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли; 
			
			Если ИсключатьСклады И Отбор.ЛевоеЗначение = ПолеСклад Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Склад");
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли;
			
			Если ИсключатьНазначение И Отбор.ЛевоеЗначение = ПолеНазначение Тогда
				
				Отборы.Удалить(Отбор);
				Поле = СКД_Преобразование.НаборыДанных.Объединение.Поля.Найти("Назначение");
				Поле.ОграничениеИспользования.Условие = Истина;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
		Пока  Индекс >= 0 Цикл
			Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
			Индекс = Индекс - 1;
			
			Если ИсключатьХарактеристики 
				И (Связь.ВыражениеИсточник = "Характеристика" 
				ИЛИ Связь.ВыражениеПриемник = "Характеристика") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли; 
			
			Если ИсключатьСклады 
				И (Связь.ВыражениеИсточник = "Склад" 
				ИЛИ Связь.ВыражениеПриемник = "Склад") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли; 
			
			Если ИсключатьНазначение 
				И (Связь.ВыражениеИсточник = "Назначение" 
				ИЛИ Связь.ВыражениеПриемник = "Назначение") Тогда
			
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 
	
	ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Индекс = ПоляГруппировки.Количество() - 1;
	
	Если ЗаполнятьПоФормуле Тогда
	
		ПолеПериод = Новый ПолеКомпоновкиДанных("Период");
		
		Пока  Индекс >= 0 Цикл
			ПолеГруппировки = ПоляГруппировки[Индекс];
		
			Если ПолеГруппировки.Поле = ПолеПериод Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
	Иначе
		
		ПолеНомерСтроки = Новый ПолеКомпоновкиДанных("НомерСтроки");
		ПолеПериодСостава = Новый ПолеКомпоновкиДанных("ПериодСостава");
		
		Пока  Индекс >= 0 Цикл
			ПолеГруппировки = ПоляГруппировки[Индекс];
		
			Если ПолеГруппировки.Поле = ПолеНомерСтроки Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Если ПолеГруппировки.Поле = ПолеПериодСостава Тогда
				ПоляГруппировки.Удалить(ПолеГруппировки);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
		
		ТаблицаСостава = СКД_Преобразование.НаборыДанных.Найти("ТаблицаСостава");
		Если ТаблицаСостава <> Неопределено Тогда
			
			Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
			
			Пока  Индекс >= 0 Цикл
				
				Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
				Если Связь.НаборДанныхИсточник = "ТаблицаСостава" Тогда
					СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
				КонецЕсли; 
				
				Индекс = Индекс - 1;
				
			КонецЦикла; 
			СКД_Преобразование.НаборыДанных.Удалить(ТаблицаСостава);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СКД_Преобразование;
	
КонецФункции

// Функция получает массив полей схемы преобразования данных в документ плана
//
// Параметры:
//  АдресСхемыПреобразованияДанных  - Строка - Адрес временного хранилища, в котором сохранена схема 
//                 преобразования данных в документ
//  ВидПлана  - СправочникСсылка.ВидыПланов - Ссылка на вид плана по которому заполняется документ.
//
// Возвращаемое значение:
//   Массив   - Список полей, которые можно использовать для заполнения документа.
//
Функция ПолучитьПоляСхемыПреобразованияДанных(Знач АдресСхемыПреобразованияДанных, Знач ВидПлана = Неопределено) Экспорт 

	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыПреобразованияДанных);
	
	ОтключитьНеиспользуемыеПоляСхемыПреобразования(СхемаКомпоновки, ВидПлана);
	
	ПоляСхемы = Новый Массив;
	Если СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура.Количество() > 0 Тогда
		ПоляГруппировки = СхемаКомпоновки.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Иначе
		ПоляГруппировки = СхемаКомпоновки.ВариантыНастроек[0].Настройки.ДоступныеПоляГруппировок.Элементы;
	КонецЕсли; 
	
	Для каждого Группировка Из ПоляГруппировки Цикл
		
		Если Группировка.Использование И ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
			ПоляСхемы.Добавить(Строка(Группировка.Поле));
		КонецЕсли; 
	
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из СхемаКомпоновки.ВариантыНастроек[0].Настройки.Выбор.Элементы Цикл
		
		Если ВыбранноеПоле.Использование И ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
			ПоляСхемы.Добавить(Строка(ВыбранноеПоле.Поле));
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ПоляСхемы;
	
КонецФункции 

// Процедура отключает неиспользуемые поля по виду плана
//
// Параметры:
//  СКДПреобразования  - СхемаКомпоновкиДанных - Схема в которой необходимо отключить поля
//  ВидПлана  - СправочникСсылка.ВидыПланов - Вид плана по которому заполняется документ.
//
Процедура ОтключитьНеиспользуемыеПоляСхемыПреобразования(СКД_Преобразование, Знач ВидПлана) 

	Если НЕ ЗначениеЗаполнено(ВидПлана) Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеПоля = Новый Массив;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Характеристика"));
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, "Владелец, ТипПлана, ЗаполнятьПартнераВТЧ, ЗаполнятьСоглашение, ЗаполнятьСоглашениеВТЧ, ЗаполнятьСкладВТЧ, ЗаполнятьНазначениеВТЧ");
	//++ НЕ УТ
	Если ЗначенияРеквизитов.ТипПлана = Перечисления.ТипыПланов.ПланПроизводства
		И ЗначениеЗаполнено(ЗначенияРеквизитов.Владелец) Тогда
		ИспользоватьДляПланированияМатериалов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.Владелец, "ИспользоватьДляПланированияМатериалов");
		Если НЕ ИспользоватьДляПланированияМатериалов = Истина Тогда
			УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Спецификация"));
		КонецЕсли; 
	КонецЕсли; 
	//-- НЕ УТ
	Если ЗначенияРеквизитов.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям
		И ЗначениеЗаполнено(ЗначенияРеквизитов.Владелец) Тогда
		ИспользоватьРасчетПоСкоростиПродаж = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.Владелец, "ИспользоватьРасчетПоСкоростиПродаж");
		Если НЕ ИспользоватьРасчетПоСкоростиПродаж = Истина Тогда
			УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("РейтингПродаж"));
		КонецЕсли; 
	КонецЕсли;
	Если НЕ ЗначенияРеквизитов.ЗаполнятьПартнераВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Партнер"));
	КонецЕсли; 
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСоглашениеВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Соглашение"));
	КонецЕсли;
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСоглашениеВТЧ И НЕ ЗначенияРеквизитов.ЗаполнятьСоглашение Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("ВидЦеныПоставщика"));
	КонецЕсли;
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьНазначениеВТЧ 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Назначение"));
	КонецЕсли;
	
	Если НЕ ЗначенияРеквизитов.ЗаполнятьСкладВТЧ Тогда
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Склад"));
		УдаляемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Склад.Календарь"));
	КонецЕсли;
	
	Если УдаляемыеПоля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура.Количество() > 0 Тогда
		ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.Структура[0].ПоляГруппировки.Элементы;
	Иначе
		ПоляГруппировки = СКД_Преобразование.ВариантыНастроек[0].Настройки.ДоступныеПоляГруппировок.Элементы;
	КонецЕсли; 
	
	Для каждого Группировка Из ПоляГруппировки Цикл
		
		Если УдаляемыеПоля.Найти(Группировка.Поле) <> Неопределено Тогда
			Группировка.Использование = Ложь;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого ВыбранноеПоле Из СКД_Преобразование.ВариантыНастроек[0].Настройки.Выбор.Элементы Цикл
		
		Если УдаляемыеПоля.Найти(ВыбранноеПоле.Поле) <> Неопределено Тогда
			ВыбранноеПоле.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборТаблицаСостава = СКД_Преобразование.НаборыДанных.Найти("ТаблицаСостава");
	Если НаборТаблицаСостава <> Неопределено Тогда
	
		Для каждого Поле Из УдаляемыеПоля Цикл
		
			НайденноеПоле = НаборТаблицаСостава.Поля.Найти(Строка(Поле));
			Если НайденноеПоле <> Неопределено Тогда
			
				НаборТаблицаСостава.Поля.Удалить(НайденноеПоле);
			
			КонецЕсли; 
		
		КонецЦикла; 
	
	КонецЕсли; 
	
	Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
	Пока  Индекс >= 0 Цикл
		Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
		Индекс = Индекс - 1;
		
		Если УдаляемыеПоля.Найти(Новый ПолеКомпоновкиДанных(Связь.ВыражениеИсточник))  <> Неопределено
			ИЛИ УдаляемыеПоля.Найти(Новый ПолеКомпоновкиДанных(Связь.ВыражениеПриемник))  <> Неопределено Тогда
			
			СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет корректность настроек в правиле заполнения
//
// Параметры:
//  ПравилоЗаполнения               - ТаблицаЗначений - Таблица с источниками и настройками правила
//  АдресСхемыПреобразованияДанных  - Строка - Адрес временного хранилища данных со схемой преобразования данных
//  ВидПлана                        - СправочникСсылка.ВидыПланов - Ссылка на вид плана, для определения полей схемы
//  ИмяРеквизитаПравила             - Строка - Имя реквизита для которого устанавливать сообщение ошибки.
//
Функция ПроверитьПравилоЗаполнения(Знач ПравилоЗаполнения, Знач АдресСхемыПреобразованияДанных, Знач ВидПлана = Неопределено, Знач ИмяРеквизитаПравила = "", ОтборПоРесурсам) Экспорт 
	
	ПравилоКорректно = Истина;
	
	ПоляСхемы = ПолучитьПоляСхемыПреобразованияДанных(АдресСхемыПреобразованияДанных, ВидПлана);
	
	СоответствиеПолямДокумента = Истина;
	
	// Проверка источников строк (объединения)
	СоответствиеПолямИсточников = Истина;
	ПоляЭталонногоИсточника = Новый Структура;
	ЕстьПоляЭталонногоИсточника = Ложь;
		
	НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, ТипЭлемента", Ложь, 0));
	
	ЕстьПравилаЗаполнения = Ложь;
	Для каждого ЭлементПравила Из НайденныеСтроки Цикл
		
		Если НЕ ЭлементПравила.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементПравила.Источник, 
			"ИмяШаблонаСКД, СхемаКомпоновкиДанных");
		
		Если Реквизиты.СхемаКомпоновкиДанных = Неопределено Тогда
			ПравилоКорректно = Ложь;
			ТекстОшибки = НСтр("ru = 'Источник заполнения не заполнен.';
								|en = 'Filling source is empty.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
			СхемаКомпоновкиДанных = Справочники.ЕРЦ_ИсточникиДанных.СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
			КонецЕсли; 
		Иначе
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли;
		ПользовательскиеНастройки = ЭлементПравила.ПользовательскиеНастройки.Получить();
		
		// Загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
		КонецЕсли;
		
		КомпоновщикПоляГруппировки = ЕРЦ_ОбщийМодуль.ПолучитьПоляГруппировок(КомпоновщикНастроек);
		
		КомпоновщикПоляВыбора = ЕРЦ_ОбщийМодуль.ПолучитьПоляВыбора(КомпоновщикНастроек);
		
		Если КомпоновщикПоляГруппировки.Количество() = 0 И КомпоновщикПоляВыбора.Количество() = 0 Тогда
			СоответствиеПолямДокумента = Ложь;
		КонецЕсли;
		
		ПоляИсточника = Новый Массив;
		Для каждого Группировка Из КомпоновщикПоляГруппировки Цикл
			Если НЕ Группировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(Группировка.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(Группировка.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(Группировка.Поле));
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого ВыбранноеПоле Из КомпоновщикПоляВыбора Цикл
			Если НЕ ВыбранноеПоле.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(ВыбранноеПоле.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПоляЭталонногоИсточника И ПоляИсточника.Количество() <> ПоляЭталонногоИсточника.Количество() Тогда
			СоответствиеПолямИсточников = Ложь;
		КонецЕсли; 
		
		ЕстьПоляЭталонногоИсточника = Истина;
		
		ЕстьПравилаЗаполнения = Истина;
		
		Если НЕ СоответствиеПолямДокумента И НЕ СоответствиеПолямИсточников Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Не ЕстьПравилаЗаполнения Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Не заполнены источники заполнения количества.';
							|en = 'Quantity filling sources are empty.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Если НЕ СоответствиеПолямДокумента ИЛИ НЕ СоответствиеПолямИсточников Тогда
		ПравилоКорректно = Ложь;
	КонецЕсли;
		
	ТекстОшибки = НСтр("ru = 'Список полей источников заполнения количества различается. Отредактируйте группировки и выбранные поля.';
						|en = 'The list of quantity filling source fields is different. Edit groupings and the selected fields.'");
	Если НЕ СоответствиеПолямИсточников Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли; 
	
	// Проверка источников колонок (присоединения)
	СоответствиеПолямИсточников = Истина;
	ПоляЭталонногоИсточника = Новый Структура;
	ЕстьПоляЭталонногоИсточника = Ложь;
	
	НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, ТипЭлемента", Истина, 0));
	Для каждого ЭлементПравила Из НайденныеСтроки Цикл
		
		Если НЕ ЭлементПравила.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементПравила.Источник, 
			"ИмяШаблонаСКД, СхемаКомпоновкиДанных");
		
		Если Реквизиты.СхемаКомпоновкиДанных = Неопределено Тогда
			ПравилоКорректно = Ложь;
			ТекстОшибки = НСтр("ru = 'Источник заполнения не заполнен.';
								|en = 'Filling source is empty.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.ИмяШаблонаСКД) Тогда
			СхемаКомпоновкиДанных = Справочники.ЕРЦ_ИсточникиДанных.СхемаКомпоновкиПоИмениШаблона(Реквизиты.ИмяШаблонаСКД);
			Если СхемаКомпоновкиДанных = Неопределено Тогда
				СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
			КонецЕсли; 
		Иначе
			СхемаКомпоновкиДанных = Реквизиты.СхемаКомпоновкиДанных.Получить();
		КонецЕсли;
		ПользовательскиеНастройки = ЭлементПравила.ПользовательскиеНастройки.Получить();
		
		// Загрузка настроек
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
			
		КонецЕсли;
		
		КомпоновщикПоляГруппировки = ЕРЦ_ОбщийМодуль.ПолучитьПоляГруппировок(КомпоновщикНастроек);
		
		КомпоновщикПоляВыбора = ЕРЦ_ОбщийМодуль.ПолучитьПоляВыбора(КомпоновщикНастроек);
		
		Если КомпоновщикПоляГруппировки.Количество() = 0 И КомпоновщикПоляВыбора.Количество() = 0 Тогда
			СоответствиеПолямДокумента = Ложь;
		КонецЕсли;
		
		ПоляИсточника = Новый Массив;
		Для каждого Группировка Из КомпоновщикПоляГруппировки Цикл
			Если НЕ Группировка.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(Группировка.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(Группировка.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(Группировка.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(Группировка.Поле));
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого ВыбранноеПоле Из КомпоновщикПоляВыбора Цикл
			Если НЕ ВыбранноеПоле.Использование Тогда
				Продолжить;
			КонецЕсли;
			Если ПоляИсточника.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				ПоляИсточника.Добавить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
			Если ПоляСхемы.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
				СоответствиеПолямДокумента = Ложь;
			КонецЕсли;
			Если ЕстьПоляЭталонногоИсточника Тогда
				Если НЕ ПоляЭталонногоИсточника.Свойство(Строка(ВыбранноеПоле.Поле)) Тогда
					СоответствиеПолямИсточников = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				ПоляЭталонногоИсточника.Вставить(Строка(ВыбранноеПоле.Поле));
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПоляЭталонногоИсточника И ПоляИсточника.Количество() <> ПоляЭталонногоИсточника.Количество() Тогда
			СоответствиеПолямИсточников = Ложь;
		КонецЕсли; 
		
		ЕстьПоляЭталонногоИсточника = Истина;
		
		Если НЕ СоответствиеПолямДокумента И НЕ СоответствиеПолямИсточников Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ СоответствиеПолямДокумента ИЛИ НЕ СоответствиеПолямИсточников Тогда
		ПравилоКорректно = Ложь;
	КонецЕсли;
		
	ТекстОшибки = НСтр("ru = 'Состав полей, возвращаемых источниками заполнения цены, различается. Отредактируйте ""Группировки"" и ""Выбранные поля"", чтобы каждый источник возвращал одинаковый состав полей.';
						|en = 'Content of fields returned by the price population sources is different. Edit ""Groupings"" and ""Selected fields"" for every source to return the same field content.'");
	Если НЕ СоответствиеПолямИсточников Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Состав полей, возвращаемых источниками, не совпадает с данными документа. Отредактируйте ""Группировки"" и ""Выбранные поля"", исключив ненужные поля.';
						|en = 'Content of fields returned by the sources is different from the document data. Edit ""Groupings"" and ""Selected fields"" removing unnecessary fields.'");
	Если НЕ СоответствиеПолямДокумента Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли; 
	
	КоличествоИсточниковЗаполненияКоличестваПервогоУровня = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, НомерСтрокиРодитель", Ложь, 0)).Количество();
	КоличествоИсточниковЗаполненияЦеныПервогоУровня = ПравилоЗаполнения.НайтиСтроки(Новый Структура("Присоединять, НомерСтрокиРодитель", Истина, 0)).Количество();
	
	Если КоличествоИсточниковЗаполненияКоличестваПервогоУровня > 1 
		И ОтборПоРесурсам.Количество Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Установлен отбор на поле ресурса ""Количество"", для корректного применения отбора источники должны быть сгруппированы на первом уровне.';
							|en = 'Filter is set in the field of the Amount resource. Sources should be grouped on the first level for the filter to be applied correctly.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Если КоличествоИсточниковЗаполненияЦеныПервогоУровня > 1 
		И ОтборПоРесурсам.Цена Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Установлен отбор на поле ресурса ""Цена"", для корректного применения отбора источники должны быть сгруппированы на первом уровне.';
							|en = 'Filter is selected for the Price field. For the filter to be applied correctly, sources must be grouped at the first level.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Если (КоличествоИсточниковЗаполненияЦеныПервогоУровня > 1
		Или КоличествоИсточниковЗаполненияКоличестваПервогоУровня > 1)
		И ОтборПоРесурсам.Сумма Тогда
		ПравилоКорректно = Ложь;
		ТекстОшибки = НСтр("ru = 'Установлен отбор на поле ресурса ""Сумма"", для корректного применения отбора источники должны быть сгруппированы на первом уровне.';
							|en = 'Filter is set for the Amount resource field. For the filter to be applied correctly, sources must be grouped on the first level.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,ИмяРеквизитаПравила);
	КонецЕсли;
	
	Возврат ПравилоКорректно;

КонецФункции 

// Функция - Получить текст выбираемых полей компоновки с учетом пользовательских настроек.
//
// Параметры:
//  КомпоновщикНастроек			 - КомпоновщикНастроекКомпоновкиДанных 	 - компоновщик настроек, по которому получаются поля
//  УдалятьНеиспользуемыеПоля	 - Булево	 - Если Истина, то из пользовательских полей удаляются все не используемые поля
//  ИспользуемыеПоля			 - Массив	 - используемые для выборки поля.
//
// Возвращаемое значение:
//  Строка - строковое перечисление выбираемых полей.
//
Функция ПолучитьТекстВыбираемыхПолейКомпоновки(КомпоновщикНастроек, УдалятьНеиспользуемыеПоля = Ложь, ИспользуемыеПоля = Неопределено) Экспорт 
	
	ПоляЗаполнения = "";
	
	Если ИспользуемыеПоля = Неопределено Тогда
		ИспользуемыеПоля = Новый Массив;
	КонецЕсли; 
	
	ПоляГруппировки = ПолучитьПоляГруппировок(КомпоновщикНастроек);
	ПоляВыбора = ПолучитьПоляВыбора(КомпоновщикНастроек);
		
	Если ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки) Тогда
		НастройкаПользователя = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки);
		Если НастройкаПользователя <> Неопределено
			И НастройкаПользователя.Структура.Количество() > 0
			И НастройкаПользователя.Структура[0].Использование Тогда
			
			Если УдалятьНеиспользуемыеПоля Тогда
				Для каждого Поле Из ПоляГруппировки Цикл
					
					Если НЕ Поле.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИспользуемыеПоля.Найти(Строка(Поле.Поле)) = Неопределено Тогда
					
						Поле.Использование = Ложь;
					
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки) Тогда
		НастройкаПользователя = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки);
		Если НастройкаПользователя <> Неопределено Тогда
			Если УдалятьНеиспользуемыеПоля Тогда
				Для каждого Поле Из ПоляВыбора Цикл
					
					Если НЕ Поле.Использование Тогда
						Продолжить;
					КонецЕсли;
					
					Если ИспользуемыеПоля.Найти(Строка(Поле.Поле)) = Неопределено Тогда
					
						Поле.Использование = Ложь;
					
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Для каждого Поле Из ПоляГруппировки Цикл
		Если НЕ Поле.Использование Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ПоляЗаполнения) Тогда
			ПоляЗаполнения = ПоляЗаполнения + ", ";
		КонецЕсли; 
		ПоляЗаполнения = ПоляЗаполнения + Строка(Поле.Поле);
		
	КонецЦикла; 
	Для каждого Поле Из ПоляВыбора Цикл
		Если НЕ Поле.Использование Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ПустаяСтрока(ПоляЗаполнения) Тогда
			ПоляЗаполнения = ПоляЗаполнения + ", ";
		КонецЕсли; 
		ПоляЗаполнения = ПоляЗаполнения + Строка(Поле.Поле);
	КонецЦикла;
	
	Возврат ПоляЗаполнения;

КонецФункции 

// Возвращает поля группировки компоновщика настроек
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик в котором необходимо получить поля группировки.
//
// Возвращаемое значение:
//   Коллекция  - Коллекция элементов полей группировки.
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек) Экспорт 
	
	ПоляГруппировки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки) Тогда
		Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 
			И КомпоновщикНастроек.Настройки.Структура[0].Использование Тогда
			ПоляГруппировки = КомпоновщикНастроек.Настройки.Структура[0].ПоляГруппировки.Элементы;
		КонецЕсли;
	Иначе
		ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Структура.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройки <> Неопределено
			И ЭлементНастройки.Структура.Количество() > 0
			И ЭлементНастройки.Структура[0].Использование Тогда
			ПоляГруппировки = ЭлементНастройки.Структура[0].ПоляГруппировки.Элементы;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоляГруппировки;

КонецФункции 

// Возвращает поля выбора компоновщика настроек
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик в котором необходимо получить поля выбора.
//
// Возвращаемое значение:
//   Коллекция  - Коллекция элементов полей выбора.
//
Функция ПолучитьПоляВыбора(КомпоновщикНастроек) Экспорт 
	
	ПоляВыбора = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки) Тогда
		ПоляВыбора = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	Иначе
		ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			КомпоновщикНастроек.Настройки.Выбор.ИдентификаторПользовательскойНастройки);
		Если ЭлементНастройки <> Неопределено Тогда
			ПоляВыбора = ЭлементНастройки.Элементы;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоляВыбора;

КонецФункции 

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

КонецФункции // ПолучитьОписаниеТиповДаты()

// Выполняет сериализацию объекта в XML
//
// Параметры:
//  Значение  - Произвольный - объект, который необходимо сериализовать в XML.
//
// Возвращаемое значение:
//   Строка   - объект, сериализованный в XML.
//
Функция ПолучитьXML(Значение) Экспорт
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

//Выполнять отключение кода при переносе данных
//
Функция ЕРЦ_ОтключитьВыполнениеКодаПриЗагрузкеДанных(СсылкаНаОбъект) Экспорт
	
	ОтключитьВыполениеКода = Ложь;
	
	//Если Константы.ЕРЦ_ОтключитьВыполнениеКодаПриЗагрузкеДанных.Получить() Тогда
	ВыборкаКонстант = РегистрыСведений.ЕРЦ_Константы.Выбрать();
	ВыборкаКонстант.Следующий(); 
	Если ВыборкаКонстант.ЕРЦ_ОтключитьВыполнениеКодаПриЗагрузкеДанных = Истина Тогда
	
		//проверка комментария
		Если СсылкаНаОбъект.Метаданные().Реквизиты.Найти("Комментарий") <> Неопределено Тогда
			
			Если Найти(СсылкаНаОбъект.Комментарий, "Перенос истории ГУЖФ") <> 0 Тогда
				
				ОтключитьВыполениеКода = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОтключитьВыполениеКода;
	
КонецФункции

Функция ЕРЦ_ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(СтруктураПараметров = Неопределено) Экспорт
	
	ОтказатьсяОтДоговоров = Ложь;
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НаборДвиженийВзаиморасчеты") = Истина
			И СтруктураПараметров.НаборДвиженийВзаиморасчеты.Отбор.Найти("Регистратор") <> Неопределено
			И ТипЗнч(СтруктураПараметров.НаборДвиженийНачисленияНаЛС.Отбор.Регистратор.Значение) = Тип("ДокументСсылка.КВП_РегистрацияОплаты")) Тогда
		
		ВыборкаКонстант = РегистрыСведений.ЕРЦ_Константы.Выбрать();
		ВыборкаКонстант.Следующий(); 
		Если ВыборкаКонстант.ЕРЦ_ОтключитьВыполнениеКодаПриЗагрузкеДанных = Истина Тогда
			ОтказатьсяОтДоговоров = Истина;
		КонецЕсли;			
	КонецЕсли;		
	
	Возврат ОтказатьсяОтДоговоров;	
	
КонецФункции

Функция ЕРЦ_КВП_СформироватьТаблицуОбъектовНачисления(НачПериода, Объект, КонПериода = Неопределено) Экспорт
	
	ОбъектыНачисления = Новый ТаблицаЗначений;
	ОбъектыНачисления.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка"));
	ОбъектыНачисления.Колонки.Добавить("СписокОбъектов", Новый ОписаниеТипов("СписокЗначений"));

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат ОбъектыНачисления;
	КонецЕсли;

	ИмяОбъектаМетаданных = "";
	Если Не (Объект = Неопределено) Тогда
		Попытка
			Если ТипЗнч(Объект) = Тип("СписокЗначений") И Объект.Количество() > 0 Тогда

				ИмяОбъектаМетаданных = Объект[0].Значение.Метаданные().ПолноеИмя();
			Иначе
				ИмяОбъектаМетаданных = Объект.Метаданные().ПолноеИмя();
			КонецЕсли;
		Исключение
			Возврат ОбъектыНачисления;
		КонецПопытки;
	КонецЕсли;

	СписокЗданий = Новый СписокЗначений;
	СписокПодъездов = Новый СписокЗначений;
	СписокПомещений = Новый СписокЗначений;
	СписокЛицевыхСчетов = Новый СписокЗначений;

	ПодстрокаТипаСсылкиСправочник = "Справочник.";

	Если Не (Найти(ИмяОбъектаМетаданных, ПодстрокаТипаСсылкиСправочник) = 1) И Не (Объект = Неопределено) Тогда
		Возврат ОбъектыНачисления;
	КонецЕсли;


	ОбъектСписок = ПолучитьЭлементыСправочникаПоГруппе(Объект);


	Если ИмяОбъектаМетаданных = "Справочник.КВП_Здания" Тогда
		СписокЗданий = ОбъектСписок.Скопировать();
		СписокПодъездов = КВП_ПолучитьСписокПодъездовПоЗданиям(СписокЗданий);
		СписокПомещений = КВП_ПолучитьСписокПомещенийПоЗданиям(СписокЗданий);
		СписокЛицевыхСчетов = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЗданий, НачПериода, КонПериода);

	ИначеЕсли ИмяОбъектаМетаданных = "Справочник.КВП_Подъезды" Тогда
		СписокПодъездов = ОбъектСписок.Скопировать();
		СписокЗданий = КВП_ПолучитьСписокЗданийПоПодъездам(СписокПодъездов);
		СписокПомещений = КВП_ПолучитьСписокПомещенийПоПодъездам(СписокПодъездов);
		СписокЛицевыхСчетов = КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(СписокПодъездов, НачПериода, КонПериода);

	ИначеЕсли ИмяОбъектаМетаданных = "Справочник.КВП_ЛицевыеСчета" Тогда
		СписокЛицевыхСчетов = ОбъектСписок.Скопировать();
		СписокЗданий = КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокЛицевыхСчетов);
		СписокПодъездов = КВП_ПолучитьСписокПодъездовПоЗданиям(СписокЗданий);
		СписокПомещений = КВП_ПолучитьСписокПомещенийПоЗданиям(СписокЗданий);

	ИначеЕсли ИмяОбъектаМетаданных = "Справочник.УПЖКХ_Помещения" Тогда
		СписокПомещений = ОбъектСписок.Скопировать();
		СписокЛицевыхСчетов = КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(СписокПомещений, НачПериода, КонПериода);
		СписокПодъездов = КВП_ПолучитьСписокПодъездовПоЛицевымСчетам(СписокЛицевыхСчетов);
		СписокЗданий = КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокЛицевыхСчетов);

	ИначеЕсли Объект = Неопределено Тогда
		СписокЛицевыхСчетов = Новый СписокЗначений;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Период, ) КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Действует";


		Запрос.УстановитьПараметр("Период", КонецДня(НачПериода));

		СписокЛицевыхСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	Иначе

		Возврат ОбъектыНачисления;

	КонецЕсли;

	Если Не (СписокЗданий.Количество() = 0) Тогда
		НоваяСтрока = ОбъектыНачисления.Добавить();
		НоваяСтрока.ТипОбъекта = "Здания";
		НоваяСтрока.СписокОбъектов = СписокЗданий;
	КонецЕсли;
	Если Не (СписокПодъездов.Количество() = 0) Тогда
		НоваяСтрока = ОбъектыНачисления.Добавить();
		НоваяСтрока.ТипОбъекта = "Подъезды";
		НоваяСтрока.СписокОбъектов = СписокПодъездов;
	КонецЕсли;
	Если Не (СписокПомещений.Количество() = 0) Тогда
		НоваяСтрока = ОбъектыНачисления.Добавить();
		НоваяСтрока.ТипОбъекта = "Помещения";
		НоваяСтрока.СписокОбъектов = СписокПомещений;
	КонецЕсли;
	Если Не (СписокЛицевыхСчетов.Количество() = 0) Тогда
		НоваяСтрока = ОбъектыНачисления.Добавить();
		НоваяСтрока.ТипОбъекта = "ЛицевыеСчета";
		НоваяСтрока.СписокОбъектов = СписокЛицевыхСчетов;
	КонецЕсли;

	Возврат ОбъектыНачисления;

КонецФункции

// Формирует список комнат по указанным помещениям.
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка - лицевой счет,
//  Период - Дата - период.
//  СписокТиповКомнат - Список - список типов помещений.
//
// Возвращаемое значение:
//  СписокЗначений - список комнат.
//
//функция находилась в глобальном модуле
//КВП_ОбщегоНазначения под названием "КВП_ПолучитьСписокКомнатПоЛицевомуСчету"
//Модуль нельзя снимать с поддержки и в расширение его нельзя
//вынести даже в самой свежей платформе 8.3.20.1710
//поэтому я скопировал модуль и добавил в запрос поиск по Владельцу
//Чтобы запрос использовал индекс и не тормозил
//в функцию добавил свой комментарий "...УсольцевПВ..."
Функция ЕРЦ_КВП_ПолучитьСписокКомнатПоЛицевомуСчету(ЛицевойСчет, Период, СписокТиповКомнат = Неопределено) Экспорт

	СписокКомнат = Новый СписокЗначений();

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокКомнат;
	КонецЕсли;

	// Попытка получить комнаты из регистра для коммуналок.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И &ДопУсловия) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната";

	СтрокаДопУсловий = "ИСТИНА";
	Если Не СписокТиповКомнат = Неопределено Тогда
		СтрокаДопУсловий = СтрокаДопУсловий + " И Комната.ВидПомещения.ТипПомещения В (&СписокТиповКомнат)"
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", СтрокаДопУсловий);

	Запрос.УстановитьПараметр("Период",            Период);
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	//+ЕРЦ УсольцевПВ 28.03.2022 
	//Запрос.УстановитьПараметр("Квартира",          ЛицевойСчет.Адрес);
	Квартира = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЛицевойСчет, "Адрес");
	Запрос.УстановитьПараметр("Квартира",          Квартира);
	//-ЕРЦ УсольцевПВ 28.03.2022 
	
	Запрос.УстановитьПараметр("СписокТиповКомнат", СписокТиповКомнат);

	СписокКомнат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Комната"));

	Если СписокКомнат.Количество() = 0 Тогда
		// Попытка получить комнаты из справочника помещений.
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Помещения.Ссылка КАК Комната
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|ГДЕ
		|	УПЖКХ_Помещения.Родитель = &Квартира
		|	И &ДопУсловия";
		
		СтрокаДопУсловий = "ИСТИНА";
		Если Не СписокТиповКомнат = Неопределено Тогда
			СтрокаДопУсловий = СтрокаДопУсловий + " И УПЖКХ_Помещения.ВидПомещения.ТипПомещения В (&СписокТиповКомнат)"
		КонецЕсли;

		//+ЕРЦ УсольцевПВ 28.03.2022 "%Оптимизация%"
		//Справочник "УПЖКХ_Помещения" большой. Индексы устроены так
		//что без указания владельца ни один индекс не будет использоваться
		//Владелец должен быть как у квартиры, к которой относится комната
		
		СтрокаДопУсловий = СтрокаДопУсловий + " И УПЖКХ_Помещения.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Квартира, "Владелец"));
		//-ЕРЦ УсольцевПВ 28.03.2022 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", СтрокаДопУсловий);

		СписокКомнат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Комната"));

	КонецЕсли;

	Возврат СписокКомнат;

КонецФункции

// Формирует список лицевых счетов по указанным зданиям.
//
// Параметры:
//  СписокЗданий - СписокЗначений - список зданий.
//  НачПериода - Дата - дата начала для получения среза.
//  КонПериода - Дата - дата окончания.
//  ТолькоДействующие - Булево - Истина, если необходимо получать только действующие лицевые счета.
//  ВыгружатьТаблицуВКачествеРезультата - Булево - Истина, если выгружать таблицу в качестве результата.
//
// Возвращаемое значение:
//  СписокЗначений - список лицевых счетов.
//
//функция находилась в глобальном модуле
//КВП_ОбщегоНазначения под названием "КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям"
//Модуль нельзя снимать с поддержки и в расширение его нельзя
//вынести даже в самой свежей платформе 8.3.20.1710
//Сделал оптимизацию в модуле
//в функцию добавил свой комментарий "...УсольцевПВ..."
Функция ЕРЦ_КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЗданий, НачПериода, КонПериода = Неопределено, ТолькоДействующие = Истина, ВыгружатьТаблицуВКачествеРезультата = Ложь) Экспорт
	
	СписокЛицевыхСчетов = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		
		Если ВыгружатьТаблицуВКачествеРезультата = Истина Тогда
			СписокЛицевыхСчетов = Новый ТаблицаЗначений;
			СписокЛицевыхСчетов.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
			СписокЛицевыхСчетов.Колонки.Добавить("Здание", Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
		КонецЕсли;
		
		Возврат СписокЛицевыхСчетов;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка КАК Здание
	|ПОМЕСТИТЬ втЗдания
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Ссылка В ИЕРАРХИИ(&СписокЗданий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Помещение
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Владелец В
	|			(ВЫБРАТЬ
	|				втЗдания.Здание
	|			ИЗ
	|				втЗдания КАК втЗдания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//+ЕРЦ УсольцевПВ 01.04.2022 "%Оптимизация%"
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	//|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание
	//|ИЗ
	//|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	//|			&НачПериода,
	//|			Объект В
	//|				(ВЫБРАТЬ
	//|					втПомещения.Помещение
	//|				ИЗ
	//|					втПомещения КАК втПомещения)) КАК КВП_ЛицевыеСчета
	//|ГДЕ
	//|	&УсловиеДействия";
	//
	//Если НЕ КонПериода = Неопределено Тогда
	//	Запрос.Текст = Запрос.Текст + "
	//	|
	//	|ОБЪЕДИНИТЬ
	//	|
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	//	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание
	//	|ИЗ
	//	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	//	|ГДЕ
	//	|	КВП_ЛицевыеСчета.Период МЕЖДУ &НачПериода И &КонПериода
	//	|	И КВП_ЛицевыеСчета.Объект В
	//	|			(ВЫБРАТЬ
	//	|				втПомещения.Помещение
	//	|			ИЗ
	//	|				втПомещения КАК втПомещения)
	//	|	И &УсловиеДействия";
	//	Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	//КонецЕсли;
	|";
	
	Если ТолькоДействующие Тогда
		
		Если КонПериода = Неопределено Тогда
			
			//Переписал срез последних без изменения логики запроса
			Запрос.Текст = Запрос.Текст + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
			|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МАКСИМУМ(КВП_ЛицевыеСчета.Период) КАК Период,
			|			КВП_ЛицевыеСчета.Объект КАК Объект,
			|			КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
			|		ИЗ
			|			РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
			|		ГДЕ
			|			КВП_ЛицевыеСчета.Период <= &НачПериода
			|			И КВП_ЛицевыеСчета.Объект В
			|					(ВЫБРАТЬ
			|						втПомещения.Помещение КАК Помещение
			|					ИЗ
			|						втПомещения КАК втПомещения)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			КВП_ЛицевыеСчета.ЛицевойСчет,
			|			КВП_ЛицевыеСчета.Объект) КАК ВложенныйЗапрос
			|		ПО КВП_ЛицевыеСчета.Период = ВложенныйЗапрос.Период
			|			И КВП_ЛицевыеСчета.Объект = ВложенныйЗапрос.Объект
			|			И КВП_ЛицевыеСчета.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
			|	ГДЕ
			|		КВП_ЛицевыеСчета.Действует";
			
			
		Иначе
			
			//Поместил объединение в подзапрос
			Запрос.Текст = Запрос.Текст + "
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.ЛицевойСчет КАК ЛицевойСчет,
			|	ВТ.ЛицевойСчет.Адрес.Владелец КАК Здание
			|ИЗ
			|	(ВЫБРАТЬ
			|		КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
			|	ИЗ
			|		РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				МАКСИМУМ(КВП_ЛицевыеСчета.Период) КАК Период,
			|				КВП_ЛицевыеСчета.Объект КАК Объект,
			|				КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
			|			ИЗ
			|				РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
			|			ГДЕ
			|				КВП_ЛицевыеСчета.Период <= &НачПериода
			|				И КВП_ЛицевыеСчета.Объект В
			|						(ВЫБРАТЬ
			|							втПомещения.Помещение КАК Помещение
			|						ИЗ
			|							втПомещения КАК втПомещения)
			|			
			|			СГРУППИРОВАТЬ ПО
			|				КВП_ЛицевыеСчета.ЛицевойСчет,
			|				КВП_ЛицевыеСчета.Объект) КАК ВложенныйЗапрос
			|			ПО КВП_ЛицевыеСчета.Период = ВложенныйЗапрос.Период
			|				И КВП_ЛицевыеСчета.Объект = ВложенныйЗапрос.Объект
			|				И КВП_ЛицевыеСчета.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
			|	ГДЕ
			|		КВП_ЛицевыеСчета.Действует
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		КВП_ЛицевыеСчета.ЛицевойСчет
			|	ИЗ
			|		РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
			|	ГДЕ
			|		КВП_ЛицевыеСчета.Период МЕЖДУ &НачПериода И &КонПериода
			|		И КВП_ЛицевыеСчета.Объект В
			|				(ВЫБРАТЬ
			|					втПомещения.Помещение
			|				ИЗ
			|					втПомещения КАК втПомещения)
			|		И КВП_ЛицевыеСчета.Действует) КАК ВТ";
			
			Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
			
		КонецЕсли; 	
		
		
	Иначе
		
		//Если без отбора по условию действия, тогда можно упростить запрос
		Запрос.Текст = Запрос.Текст + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание
		|	ИЗ
		|		РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|	ГДЕ
		|		КВП_ЛицевыеСчета.Период <= &Период
		|		И КВП_ЛицевыеСчета.Объект В
		|				(ВЫБРАТЬ
		|					втПомещения.Помещение
		|				ИЗ
		|					втПомещения КАК втПомещения)
		|";
		
		Если КонПериода = Неопределено Тогда
			Запрос.УстановитьПараметр("Период", НачалоДня(НачПериода));			
		Иначе			
			Запрос.УстановитьПараметр("Период", КонецДня(КонПериода));
		КонецЕсли; 	
		
	КонецЕсли; 
	//-ЕРЦ УсольцевПВ 01.04.2022 
	
	Запрос.УстановитьПараметр("НачПериода",   НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("СписокЗданий", СписокЗданий);
	
	Если ТолькоДействующие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "КВП_ЛицевыеСчета.Действует");
	Иначе
		// Для получения всех лицевых счетов по списку зданий.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "ИСТИНА");
	КонецЕсли;
	
	// Выгружаем таблицу, если требуется. Иначе выгружаем список.
	Если ВыгружатьТаблицуВКачествеРезультата Тогда
		СписокЛицевыхСчетов = Запрос.Выполнить().Выгрузить();
		
		СписокЛицевыхСчетов.Индексы.Добавить("Здание");
	Иначе
		СписокЛицевыхСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	КонецЕсли;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям()

// Процедура - обработчик регламентного задания "Обработать очередь зданий для обмена с сайтом (ЕРЦ)".
//
// Параметры:
//  КоличествоМесяцевДляУдаленияОтбор - Число - количество месяцев для удаления из очереди зданий для выгрузки на сайт.
//
Процедура ОбработатьОчередьЗданийДляОбменаССайтом(КоличествоМесяцевДляУдаленияОтбор) Экспорт 

	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)

	КоличествоМесяцевДляУдаления = 3;
	
	Если ЗначениеЗаполнено(КоличествоМесяцевДляУдаленияОтбор) Тогда
		
		КоличествоМесяцевДляУдаления = Число(КоличествоМесяцевДляУдаленияОтбор);	
		
	КонецЕсли; 
	
	//Очистим неактуальную очередь
	МесяцыОчистки = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -КоличествоМесяцевДляУдаления);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕРЦ_ОчередьЗданийДляОбменаССайтом.МесяцОбмена КАК МесяцОбмена
		|ИЗ
		|	РегистрСведений.ЕРЦ_ОчередьЗданийДляОбменаССайтом КАК ЕРЦ_ОчередьЗданийДляОбменаССайтом
		|ГДЕ
		|	ЕРЦ_ОчередьЗданийДляОбменаССайтом.МесяцОбмена <= &МесяцыОчистки";
	
	Запрос.УстановитьПараметр("МесяцыОчистки", МесяцыОчистки);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока  Выборка.Следующий() Цикл 

		НаборЗаписей = РегистрыСведений.ЕРЦ_ОчередьЗданийДляОбменаССайтом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МесяцОбмена.Установить(Выборка.МесяцОбмена);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	//Добавим новые здания, которых ранее не было в очередь
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.МесяцОбмена КАК МесяцОбмена,
	|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.Организация КАК Организация,
	|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.Здание КАК Здание
	|ИЗ
	|	РегистрСведений.ЕРЦ_РегистрацияЛСдляОбменаССайтом КАК ЕРЦ_РегистрацияЛСдляОбменаССайтом
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕРЦ_ОчередьЗданийДляОбменаССайтом КАК ЕРЦ_ОчередьЗданийДляОбменаССайтом
	|		ПО ЕРЦ_РегистрацияЛСдляОбменаССайтом.МесяцОбмена = ЕРЦ_ОчередьЗданийДляОбменаССайтом.МесяцОбмена
	|			И ЕРЦ_РегистрацияЛСдляОбменаССайтом.Организация = ЕРЦ_ОчередьЗданийДляОбменаССайтом.Организация
	|			И ЕРЦ_РегистрацияЛСдляОбменаССайтом.Здание = ЕРЦ_ОчередьЗданийДляОбменаССайтом.Здание
	|ГДЕ
	|	ЕРЦ_ОчередьЗданийДляОбменаССайтом.МесяцОбмена ЕСТЬ NULL
	|	И НЕ ЕРЦ_РегистрацияЛСдляОбменаССайтом.ПопыткаВыгрузки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		ДатаСортировки = ТекущаяДата();
		
		НаборЗаписей = РегистрыСведений.ЕРЦ_ОчередьЗданийДляОбменаССайтом.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			
			НовЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовЗапись, Выборка);
			
			НовЗапись.ДатаСортировки = ДатаСортировки;
			
		КонецЦикла;
		
		НаборЗаписей.Записать(Ложь);
		
	КонецЕсли; 

	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЕРЦ_ОбработатьОчередьЗданийДляОбменаССайтом", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	
КонецПроцедуры

// Функция возвращает для списка объектов таблицу услуг, действовавших на начало периода
//  и назначенных в месяце начисления.
//
// Параметры:
//  Период - Дата - дата, на которую происходит поиск действующих услуг.
//  СписокОбъектов - СписокЗначений - список объектов.
//  СписокУслуг - СписокЗначений - список услуг.
//  Параметры - Структура - структура с параметрами запроса.
//  ДополнительныеУсловия - Строка - дополнительные условия запроса.
//  ТекстФильтраНаОбъект - Строка - текст фильтра на объект.
//  УчитыватьЗакрытыеЛС - Булево - указывает, должны ли быть включены в выборку услуги л/с, закрытых в периоде.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица лицевых счетов с действующими услугами.
//
Функция ЕРЦ_КВП_ПолучитьТаблицуДействующихУслугВПериоде(Период, СписокОбъектов, СписокУслуг = Неопределено,
													Параметры = Неопределено, ДополнительныеУсловия = "", Знач ТекстФильтраНаОбъект = "", УчитыватьЗакрытыеЛС = Ложь) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("Объект",            Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ПустаяТаблица.Колонки.Добавить("ОбъектАдрес",       Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения"));
		ПустаяТаблица.Колонки.Добавить("ОбъектНаименование",УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
		ПустаяТаблица.Колонки.Добавить("Услуга",            Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ПустаяТаблица.Колонки.Добавить("СпособРасчета",     Новый ОписаниеТипов("ПеречислениеСсылка.КВП_СпособыРасчета"));
		Возврат ПустаяТаблица;
		
	КонецЕсли;
	
	// Получим действующие начисления на начало месяца и установленные назначение в месяце начисления.
	// Т.е. запрос возвращает список объектов и услуг, которые действовали хотя бы один день в периоде расчета.
	//
	// АЛГОРИТМ ВЫПОЛНЕНИЯ ЗАПРОСА:
	// 1. Получаем настройки услуг.
	// 2. Получаем данные об изменениях действия услуг в течение месяца,
	//    сворачиваем их по максимуму Периода, тем самым получая наиболее актуальные данные по датам изменения.
	// 3. Из данных изменения действия п.2 отбираем объекты и услуги, которые были назначены в течение периода.
	// 4. Получаем данные об отключениях услуг первого числа месяца, чтобы далее исключить действующие на начало месяца услуги.
	// 5. Получаем действие услуг на начало месяца, и при этом отбираем только те объекты и услуги, по которым
	//    не было отключения услуги первого числа месяца, например, на 31.01 услуга действовала, а с 01.02 была отменена.
	//    Для этого соединяем таблицу среза с таблицей п.4 и отбираем только те, для которых нет данных об отключении
	//    услуги первого числа месяца.
	// 6. Объединяем результаты п.3 и п.6, получив в итоге список услуг и объектов, по которым услуга
	//    действовала хотя бы один день.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга,
	|	МАКСИМУМ(ЕСТЬNULL(КВП_УслугиСоставныеУслуги.Услуга.СпособРасчета, КВП_Услуги.СпособРасчета)) КАК СпособРасчета,
	|	МАКСИМУМ(ЕСТЬNULL(КВП_УслугиСоставныеУслуги.Услуга.ВидПлощади, КВП_Услуги.ВидПлощади)) КАК ВидПлощади
	|ПОМЕСТИТЬ ВрТблУслуг
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги.СоставныеУслуги КАК КВП_УслугиСоставныеУслуги
	|		ПО (КВП_УслугиСоставныеУслуги.Ссылка = КВП_Услуги.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_Услуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТблУслуг.Услуга КАК Услуга,
	|	ВрТблУслуг.СпособРасчета КАК СпособРасчета,
	|	ВрТблУслуг.ВидПлощади КАК ВидПлощади
	|ПОМЕСТИТЬ ВрТаблУслуг
	|ИЗ
	|	ВрТблУслуг КАК ВрТблУслуг
	|ГДЕ
	|	&ТекстУсловия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисления.Период КАК Период,
	|	КВП_НазначенныеНачисления.Объект КАК Объект,
	|	ВрТаблУслуг.Услуга КАК Услуга,
	|	КВП_НазначенныеНачисления.Действует КАК Действует,
	|	КВП_НазначенныеНачисления.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ втНазначенияВПериоде
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВрТаблУслуг КАК ВрТаблУслуг
	|		ПО КВП_НазначенныеНачисления.Услуга = ВрТаблУслуг.Услуга
	|ГДЕ
	|	КВП_НазначенныеНачисления.Период <= &Дата
	|	И КВП_НазначенныеНачисления.Объект В(&Объекты)
	|	И КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И &ТекстФильтраНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втНазначенияВПериоде.Период) КАК Период,
	|	втНазначенияВПериоде.Объект КАК Объект,
	|	втНазначенияВПериоде.Услуга КАК Услуга,
	|	втНазначенияВПериоде.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	втНазначенияВПериоде КАК втНазначенияВПериоде
	|
	|СГРУППИРОВАТЬ ПО
	|	втНазначенияВПериоде.Объект,
	|	втНазначенияВПериоде.Услуга,
	|	втНазначенияВПериоде.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенияВПериоде.Объект КАК Объект,
	|	втНазначенияВПериоде.Услуга КАК Услуга,
	|	втНазначенияВПериоде.ДатаИзменения КАК ДатаИзменения,
	|	втНазначенияВПериоде.Действует КАК Действует
	|ПОМЕСТИТЬ втИзмененныеНачисленияВПериоде
	|ИЗ
	|	втПериоды КАК втПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенияВПериоде КАК втНазначенияВПериоде
	|		ПО втПериоды.Период = втНазначенияВПериоде.Период
	|			И втПериоды.Объект = втНазначенияВПериоде.Объект
	|			И втПериоды.Услуга = втНазначенияВПериоде.Услуга
	|			И втПериоды.ДатаИзменения = втНазначенияВПериоде.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзмененныеНачисленияВПериоде.Объект КАК Объект,
	|	втИзмененныеНачисленияВПериоде.Услуга КАК Услуга
	|ПОМЕСТИТЬ втНазначенныеНачисленияВПериоде
	|ИЗ
	|	втИзмененныеНачисленияВПериоде КАК втИзмененныеНачисленияВПериоде
	|ГДЕ
	|	втИзмененныеНачисленияВПериоде.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИзмененныеНачисленияВПериоде.Объект КАК ОбъектНазначения,
	|	втИзмененныеНачисленияВПериоде.Услуга КАК Услуга
	|ПОМЕСТИТЬ втНачисленияОтмененныеВПервыйДеньПериода
	|ИЗ
	|	втИзмененныеНачисленияВПериоде КАК втИзмененныеНачисленияВПериоде
	|ГДЕ
	|	втИзмененныеНачисленияВПериоде.ДатаИзменения = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	|	И НЕ втИзмененныеНачисленияВПериоде.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенияВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
//+ЕРЦ УсольцевПВ #12742 26.04.2022
	//Сделал срез последних вручную для скорости            
	//
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК Объект,
	//|	ВрТаблУслуг.Услуга КАК Услуга
	//|ПОМЕСТИТЬ втНазначенныеНачисления
	//|ИЗ
	//|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	//|			НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ),
	//|			Организация = &Организация
	//|				И Объект В (&Объекты)
	//|				И ДатаИзменения <= НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)) КАК КВП_НазначенныеНачисленияСрезПоследних
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВрТаблУслуг КАК ВрТаблУслуг
	//|		ПО КВП_НазначенныеНачисленияСрезПоследних.Услуга = ВрТаблУслуг.Услуга
	//|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияОтмененныеВПервыйДеньПериода КАК втНачисленияОтмененныеВПервыйДеньПериода
	//|		ПО КВП_НазначенныеНачисленияСрезПоследних.Объект = втНачисленияОтмененныеВПервыйДеньПериода.ОбъектНазначения
	//|			И КВП_НазначенныеНачисленияСрезПоследних.Услуга = втНачисленияОтмененныеВПервыйДеньПериода.Услуга
	//|ГДЕ
	//|	(&УчитыватьЗакрытыеЛС
	//|			ИЛИ КВП_НазначенныеНачисленияСрезПоследних.Действует)
	//|	И ЕСТЬNULL(втНачисленияОтмененныеВПервыйДеньПериода.ОбъектНазначения, ИСТИНА) = ИСТИНА
	//|	И &ТекстФильтраНаОбъект
	|/////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга
	|ПОМЕСТИТЬ втНазначенныеНачисления
	|ИЗ
	|		РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисленияСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(КВП_НазначенныеНачисления.Период) КАК Период,
	|				КВП_НазначенныеНачисления.Объект КАК Объект,
	|				КВП_НазначенныеНачисления.Организация КАК Организация,
	|				КВП_НазначенныеНачисления.Услуга КАК Услуга
	|			ИЗ
	|				РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|			ГДЕ
	|				КВП_НазначенныеНачисления.Период <= НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	|				И КВП_НазначенныеНачисления.Организация = &Организация
	|				И КВП_НазначенныеНачисления.ДатаИзменения <= НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	|				И КВП_НазначенныеНачисления.Объект В (&Объекты)
	|				И КВП_НазначенныеНачисления.Услуга В (Выбрать ВТ.Услуга ИЗ ВрТаблУслуг КАК ВТ)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				КВП_НазначенныеНачисления.Объект,
	|				КВП_НазначенныеНачисления.Организация,
	|				КВП_НазначенныеНачисления.Услуга) КАК ВложенныйЗапрос
	|			ПО КВП_НазначенныеНачисленияСрезПоследних.Период = ВложенныйЗапрос.Период
	|				И КВП_НазначенныеНачисленияСрезПоследних.Объект = ВложенныйЗапрос.Объект
	|				И КВП_НазначенныеНачисленияСрезПоследних.Организация = ВложенныйЗапрос.Организация
	|				И КВП_НазначенныеНачисленияСрезПоследних.Услуга = ВложенныйЗапрос.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияОтмененныеВПервыйДеньПериода КАК втНачисленияОтмененныеВПервыйДеньПериода
	|		ПО КВП_НазначенныеНачисленияСрезПоследних.Объект = втНачисленияОтмененныеВПервыйДеньПериода.ОбъектНазначения
	|			И КВП_НазначенныеНачисленияСрезПоследних.Услуга = втНачисленияОтмененныеВПервыйДеньПериода.Услуга
	|ГДЕ
	|	(&УчитыватьЗакрытыеЛС
	|			ИЛИ КВП_НазначенныеНачисленияСрезПоследних.Действует)
	|	И втНачисленияОтмененныеВПервыйДеньПериода.ОбъектНазначения ЕСТЬ NULL
	|	И &ТекстФильтраНаОбъект
//-ЕРЦ УсольцевПВ 26.04.2022 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеНачисления.Объект КАК Объект,
	|	втНазначенныеНачисления.Услуга КАК Услуга
	|ПОМЕСТИТЬ втДействующиеНачисления
	|ИЗ
	|	втНазначенныеНачисления КАК втНазначенныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеНачисленияВПериоде.Объект,
	|	втНазначенныеНачисленияВПериоде.Услуга
	|ИЗ
	|	втНазначенныеНачисленияВПериоде КАК втНазначенныеНачисленияВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенныеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенныеНачисленияВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДействующиеНачисления.Объект КАК Объект,
	|	втДействующиеНачисления.Объект.Адрес КАК ОбъектАдрес,
	|	втДействующиеНачисления.Объект.Наименование КАК ОбъектНаименование,
	|	втДействующиеНачисления.Услуга КАК Услуга,
	|	втДействующиеНачисления.Услуга.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	втДействующиеНачисления КАК втДействующиеНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектНаименование";
	
	Если НЕ Параметры = Неопределено Тогда
		Для Каждого Параметр ИЗ Параметры Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",    Период);
	//+ЕРЦ УсольцевПВ #12742 26.04.2022 
	Если ТекстФильтраНаОбъект = "Объект НЕ В (&ЗакрытыеЛС)" Тогда
		
		НовыйСписокОбъектов = Новый Массив;
		Для каждого Эл Из СписокОбъектов Цикл
			Если Параметры.ЗакрытыеЛС.Найти(Эл.Значение) = Неопределено Тогда
				НовыйСписокОбъектов.Добавить(Эл.Значение);	
			КонецЕсли; 	
		КонецЦикла;
		
		ТекстФильтраНаОбъект = "";
		Запрос.УстановитьПараметр("Объекты", НовыйСписокОбъектов);
	Иначе 
		Запрос.УстановитьПараметр("Объекты", СписокОбъектов);
	КонецЕсли;//-ЕРЦ УсольцевПВ 26.04.2022 
	 
	Запрос.УстановитьПараметр("УчитыватьЗакрытыеЛС", УчитыватьЗакрытыеЛС);
	
	// сформируем тексты условий запроса
	ТекстУсловия = "ИСТИНА";
	Если НЕ СписокУслуг = Неопределено Тогда
		ТекстУсловия = "Услуга В ИЕРАРХИИ (&Услуги)";
		Запрос.УстановитьПараметр("Услуги", СписокУслуг);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныеУсловия) Тогда
		ТекстУсловия = ТекстУсловия + " И " + ДополнительныеУсловия;
	КонецЕсли;
	
	
	ТекстФильтраНаОбъект = ?(ПустаяСтрока(ТекстФильтраНаОбъект), "ИСТИНА", ТекстФильтраНаОбъект);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия",         ТекстУсловия);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстФильтраНаОбъект", ТекстФильтраНаОбъект);
	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // КВП_ПолучитьТаблицуДействующихУслугВПериоде()

// Подписка на событие любого документа
Процедура ерц_ПроведениеДокументовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КВП_УправлениеУслугами") Или 
		 ТипЗнч(Источник) = Тип("ДокументСсылка.КВП_УправлениеУслугами") Тогда
		 
		МассивИд = Новый Массив;  
		МассивНезаполненных = Новый Массив;
		ЗаполнитьМассивИД(МассивИд, Источник.Объекты, МассивНезаполненных);
		
		Если МассивНезаполненных.Количество() > 0 Тогда
			Для Каждого Стр Из МассивНезаполненных Цикл
				Сообщить("Не заполнен идентификатор - " + Стр);
			КонецЦикла;	
			Отказ = Истина;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Отказ = ПроверитьНаДубли(МассивИД);
		КонецЕсли;			 
	КонецЕсли;	 
КонецПроцедуры 

Функция ПроверитьНаДубли(МассивИД)
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	КВП_ЛицевыеСчета.Ссылка КАК ЛицСчет,
	              |	КВП_ЛицевыеСчета.Идентификатор КАК Ид,
	              |	1 КАК Кол
	              |ИЗ
	              |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	              |ГДЕ
	              |	КВП_ЛицевыеСчета.Идентификатор В(&МассивИД)";
	Запрос.УстановитьПараметр("МассивИД", МассивИД);
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Свернуть("Ид", "Кол");
	Для Каждого Стр Из ТЗ ЦИкл
		Если Стр.Кол > 1 Тогда
			Сообщить("Номер лицевого счета " + Стр.Ид + " имеет дубли (" + Стр.Кол + ")");
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;	
	Возврат Результат;
КонецФункции	

Процедура ЗаполнитьМассивИД(МассивИд, ТаблЧасть, МассивНезаполненных)
	Для Каждого Стр Из ТаблЧасть Цикл
		Если ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда 
			ИД = Стр.Объект.Идентификатор; 
			Если Не ИД = "" Тогда
			    МассивИд.Добавить(Стр.Объект.Идентификатор);
			Иначе
				МассивНезаполненных.Добавить(Стр.Объект);
			КонецЕсли;	
		ИначеЕсли ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда 
			ЛицСчет = НайтиЛицСчет(Стр.Объект);
			Если ЛицСчет.Пустая() Тогда
				Продолжить;
			КонецЕсли;	
			ИД = ЛицСчет.Идентификатор;
			Если Не ИД = "" Тогда
			    МассивИд.Добавить(ИД);
			Иначе
				МассивНезаполненных.Добавить(ЛицСчет);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция НайтиЛицСчет(Помещение)
	Результат = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	КВП_ЛицевыеСчета.Ссылка КАК Ссылка
	              |ИЗ
	              |	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	              |ГДЕ
	              |	КВП_ЛицевыеСчета.Адрес = &Помещение";
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Ссылка;
	КонецЦикла;	
	Возврат Результат;
КонецФункции	

///////////////////////////////////////
/////////////////////////////////////////

Процедура ПоместитьПомещенияЗданияЛСДопСтруктураПараметров(ТЗ_ЛС, Услуга, ДопСтруктураПараметров) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				  
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ_ЛС.Объект КАК ЛицевойСчет,
	|	ТЗ_ЛС.Услуга КАК Услуга
	|ПОМЕСТИТЬ ТЗ_ЛС
	|ИЗ
	|	&ТЗ_ЛС КАК ТЗ_ЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание,
	|	ТЗ_ЛС.Услуга КАК Услуга
	|ПОМЕСТИТЬ ВТ_ЛС_ВСЕ
	|ИЗ
	|	ТЗ_ЛС КАК ТЗ_ЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО ТЗ_ЛС.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЛС_ВСЕ.Помещение КАК Помещение,
	|	ВТ_ЛС_ВСЕ.ЛицевойСчет КАК ЛицевойСчет,
	|	ВТ_ЛС_ВСЕ.Здание КАК Здание,
	|	ВТ_ЛС_ВСЕ.Услуга КАК Услуга
	|ПОМЕСТИТЬ ВТ_ЛС
	|ИЗ
	|	ВТ_ЛС_ВСЕ КАК ВТ_ЛС_ВСЕ
	|ГДЕ
	|	ВТ_ЛС_ВСЕ.Услуга = &Услуга
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТЗ_ЛС";
			  	
	Запрос.УстановитьПараметр("ТЗ_ЛС", ТЗ_ЛС);
	Запрос.УстановитьПараметр("Услуга", Услуга);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДопСтруктураПараметров.Вставить("МенеджерВТ_ВТ_ЛС", Запрос.МенеджерВременныхТаблиц);

КонецПроцедуры
 
Процедура ПоместитьПомещенияЗданияЛСМенеджерВТ(Запрос, ДопСтруктураПараметров) Экспорт 
	
	Если ТипЗнч(Запрос) <> Тип("Запрос") Тогда
	
		ВызватьИсключение "В Процедуру передан параметр не являющийся запросом";
	
	КонецЕсли;    
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
	
		Запрос.МенеджерВременныхТаблиц = ДопСтруктураПараметров.МенеджерВТ_ВТ_ЛС;
	Иначе 
		ВызватьИсключение "Заполненный менеджер ВТ. Нужно пересмотреть алгоритм";
	КонецЕсли;         
		
КонецПроцедуры// ПоместитьПомещенияЗданияЛСМенеджерВТ()

//Находилась ранее в общем модуле "УПЖКХ_ОбщегоНазначенияСервер"
// Получает сведения для взаиморасчетов для указанного лицевого счета.
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета - лицевой счет;
//  Организация   - СправочникСсылка.Организации - организация, настройки которой нужно получить;
//  Дата          - Дата - дата поиска контрагента или договора контрагента;
//  ИскомыйРесурс - Строка - задается, если необходимо получить конкретный параметр: контрагента или договор контрагента.
//
// Возвращаемое значение:
//  Структура - если не указан параметр "ИскомыйРесурс" или Ссылка на справочник "Контрагенты" или "Договоры контрагентов".
//
Функция ЕРЦ_ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ЛицевойСчет, Организация, Дата = Неопределено,
																	ИскомыйРесурс = Неопределено, ДопСтруктураПараметров = Неопределено) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("Договор",    Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
//+ЕРЦ УсольцевПВ #12742 29.04.2022 

	//Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
	//	Возврат Структура;
	//КонецЕсли;
//-ЕРЦ УсольцевПВ 29.04.2022 
	
	//+ЕРЦ УсольцевПВ #12742 28.04.2022 
	Если ДопСтруктураПараметров.Свойство("ЕРЦ_СведенияДляВзаиморасчетов") Тогда
		
		НСтроки = ДопСтруктураПараметров.ЕРЦ_СведенияДляВзаиморасчетов.НайтиСтроки(Новый Структура("ЛицевойСчет, ПериодОтбора", ЛицевойСчет, Дата)); 
		
		Если НСтроки.Количество() > 0 Тогда
			Структура.Вставить("Контрагент", НСтроки[0].Контрагент);
			Структура.Вставить("Договор",    НСтроки[0].Договор);
		КонецЕсли; 
		
		Если ИскомыйРесурс = "Контрагент" ИЛИ ИскомыйРесурс = "Договор" Тогда
			Возврат Структура[ИскомыйРесурс];
		КонецЕсли;
		
		Возврат Структура;
		
	КонецЕсли; 
	//-ЕРЦ УсольцевПВ 28.04.2022 
	
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ТипЗначОбъекта = ТипЗнч(ЛицевойСчет);
	Если Не ТипЗначОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
		И НЕ ТипЗначОбъекта = Тип("СправочникОбъект.КВП_ЛицевыеСчета") Тогда
		Возврат Структура;
	Конецесли;
	
	ЗапросОсновнойДоговор = Новый Запрос(); 
	//+ЕРЦ УсольцевПВ #12742 28.04.2022 
	//ЗапросОсновнойДоговор.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор,
	//|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент
	//|ИЗ
	//|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	//|			&Дата,
	//|			ЛицевойСчет = &ЛицевойСчет
	//|				И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних";
	ЕРЦ_ОбщийМодуль.ПоместитьПомещенияЗданияЛСМенеджерВТ(ЗапросОсновнойДоговор, ДопСтруктураПараметров);
	ЗапросОсновнойДоговор.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор КАК Договор,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.ЛицевойСчет КАК ЛицевойСчет,
	|	&Дата КАК ПериодОтбора
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Таб.Период) КАК Период,
	|			Таб.Организация КАК Организация,
	|			Таб.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК Таб
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС_ВСЕ КАК ВТ_ЛС_ВСЕ
	|				ПО Таб.ЛицевойСчет = ВТ_ЛС_ВСЕ.ЛицевойСчет
	|		ГДЕ
	|			Таб.Период <= &Дата
	|			И Таб.Организация = &Организация
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таб.ЛицевойСчет,
	|			Таб.Организация) КАК ВложенныйЗапрос
	|		ПО КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Период = ВложенныйЗапрос.Период
	|			И КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Организация = ВложенныйЗапрос.Организация
	|			И КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет";
	//-ЕРЦ УсольцевПВ 28.04.2022 
		
	ЗапросОсновнойДоговор.УстановитьПараметр("Дата",        Дата);
	ЗапросОсновнойДоговор.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	ЗапросОсновнойДоговор.УстановитьПараметр("Организация", Организация);
	
	//+ЕРЦ УсольцевПВ #12742 28.04.2022 
	//Выборка = ЗапросОсновнойДоговор.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Структура.Вставить("Контрагент", Выборка.Контрагент);
	//	Структура.Вставить("Договор",    Выборка.Договор);
	//КонецЕсли;
		
	ДопСтруктураПараметров.Вставить("ЕРЦ_СведенияДляВзаиморасчетов", ЗапросОсновнойДоговор.Выполнить().Выгрузить());
	
	НСтроки = ДопСтруктураПараметров.ЕРЦ_СведенияДляВзаиморасчетов.НайтиСтроки(Новый Структура("ЛицевойСчет, ПериодОтбора", ЛицевойСчет, Дата)); 
	
	Если НСтроки.Количество() > 0 Тогда
		Структура.Вставить("Контрагент", НСтроки[0].Контрагент);
		Структура.Вставить("Договор",    НСтроки[0].Договор);
	КонецЕсли; 
	//-ЕРЦ УсольцевПВ 28.04.2022 
	
	Если ИскомыйРесурс = "Контрагент" ИЛИ ИскомыйРесурс = "Договор" Тогда
		Возврат Структура[ИскомыйРесурс];
	КонецЕсли;
	
	Возврат Структура;

КонецФункции // ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету()

//Была ранее в общем модуле "КВП_ОбщегоНазначения"
// Получает норму потребления услуги по лицевому счету или зданию.
//
// Параметры:
//  Объект - СправочникСсылка.КВП_ЛицевыеСчета - лицевой счет для анализа.
//         - СправочникСсылка.КВП_Здания - здание для анализа.
//  Услуга - СправочникСсылка.КВП_Услуги - услуга, норму по которой необходимо получить.
//  Период - Дата - дата, на которую получаются данные.
//
// Возвращаемое значение:
//  СправочникСсылка.КВП_НормыПотребленияУслуг.
//
Функция ЕРЦ_ПолучитьНормуПотребления(Объект, Услуга, Период, ДопСтруктураПараметров) Экспорт

//+ЕРЦ УсольцевПВ #12742 04.05.2022 
	//Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
	//	Возврат Справочники.КВП_НормыПотребленияУслуг.ПустаяСсылка();
	//КонецЕсли;   
	Если ДопСтруктураПараметров.Свойство("ЕРЦ_НормыПотребления") Тогда
		
		НСтроки = ДопСтруктураПараметров.ЕРЦ_НормыПотребления.НайтиСтроки(Новый Структура("ЛицевойСчет", Объект)); 
		
		Если НСтроки.Количество() > 0 Тогда
			Возврат НСтроки[0].НормаПотребления;
		КонецЕсли;    
		
		Возврат Справочники.КВП_НормыПотребленияУслуг.ПустаяСсылка();
		
	КонецЕсли; 
	
//-ЕРЦ УсольцевПВ 04.05.2022 

	Запрос = Новый Запрос();
	Запрос.Текст =
//+ЕРЦ УсольцевПВ #12742 04.05.2022 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	//|ИЗ
	//|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	//|			&ДатаКон,
	//|			ЛицевойСчет = &Объект
	//|				И Услуга = &Услуга) КАК КВП_НормыПотребленияУслугЛССрезПоследних";
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
	|	ВТ_ЛС.Помещение КАК Помещение,
	|	ВТ_ЛС.Здание КАК Здание
	|ПОМЕСТИТЬ ВТ_ЛС_Нормы
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Таб.Период) КАК Период,
	|			Таб.Услуга КАК Услуга,
	|			Таб.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.КВП_НормыПотребленияУслугЛС КАК Таб
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
	|				ПО Таб.ЛицевойСчет = ВТ_ЛС.ЛицевойСчет
	|		ГДЕ
	|			Таб.Период <= &ДатаКон
	|			И Таб.Услуга = &Услуга
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таб.ЛицевойСчет,
	|			Таб.Услуга) КАК ВложенныйЗапрос
	|		ПО КВП_НормыПотребленияУслугЛССрезПоследних.Период = ВложенныйЗапрос.Период
	|			И КВП_НормыПотребленияУслугЛССрезПоследних.Услуга = ВложенныйЗапрос.Услуга
	|			И КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
	|		ПО КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет = ВТ_ЛС.ЛицевойСчет";
//-ЕРЦ УсольцевПВ 04.05.2022 
	
	Запрос.УстановитьПараметр("Объект",  Объект);
	Запрос.УстановитьПараметр("Услуга",  Услуга);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	
//+ЕРЦ УсольцевПВ #12742 04.05.2022 
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Возврат Выборка.НормаПотребления;
	//КонецЕсли;
	
	ЕРЦ_ОбщийМодуль.ПоместитьПомещенияЗданияЛСМенеджерВТ(Запрос, ДопСтруктураПараметров);
	
	Запрос.Выполнить();
	Выборка = Запрос.МенеджерВременныхТаблиц.Таблицы[Запрос.МенеджерВременныхТаблиц.Таблицы.Количество()-1].ПолучитьДанные().Выбрать();
	ЕРЦ_НормыПотребления = Новый ТаблицаЗначений;
	ЕРЦ_НормыПотребления.Колонки.Добавить("ЛицевойСчет");
	ЕРЦ_НормыПотребления.Колонки.Добавить("НормаПотребления");
	Пока Выборка.Следующий() Цикл
		НовСтрока = ЕРЦ_НормыПотребления.Добавить();
		НовСтрока.ЛицевойСчет = Выборка.ЛицевойСчет;
		НовСтрока.НормаПотребления = Выборка.НормаПотребления;
	КонецЦикла;                       
	
	ДопСтруктураПараметров.Вставить("ЕРЦ_НормыПотребления", ЕРЦ_НормыПотребления);
	НСтроки = ДопСтруктураПараметров.ЕРЦ_НормыПотребления.НайтиСтроки(Новый Структура("ЛицевойСчет", Объект)); 
	
	Если НСтроки.Количество() > 0 Тогда
		Возврат НСтроки[0].НормаПотребления;
	КонецЕсли; 

//-ЕРЦ УсольцевПВ 04.05.2022 
	
	Возврат Справочники.КВП_НормыПотребленияУслуг.ПустаяСсылка();
	
КонецФункции // ПолучитьНормуПотребления()

//Была ранее в общем модуле "КВП_ОбщегоНазначения"
// Получает количество проживающих человек по указанному лицевому счету.
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета - лицевой счет или список лицевых счетов для анализа.
//  Дата - Дата - дата изменений, на которую получаются данные.
//  Период - Дата - дата документа начисления, на которую получаются данные.
//
// Возвращаемое значение:
//  Число – количество проживающих.
//
Функция ЕРЦ_ПолучитьКоличествоПроживающих(ЛицевойСчет, Дата, Период = Неопределено, ДопСтруктураПараметров, Парам1 = 0) Экспорт
	
//+ЕРЦ УсольцевПВ #12742 04.05.2022 
	//Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
	//	Возврат 0;
	//КонецЕсли;   
	НаКонецМесяца = (КонецМесяца(Дата) = Дата);	
	Если ДопСтруктураПараметров.Свойство("ЕРЦ_КоличествоПроживающих") И НаКонецМесяца Тогда
		
		НСтроки = ДопСтруктураПараметров.ЕРЦ_КоличествоПроживающих.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)); 
		
		Если НСтроки.Количество() > 0 Тогда 
			Если ДопСтруктураПараметров.ЕРЦ_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами Тогда
				Количество = НСтроки[0].ПрожИЗарегЧислами; 
			Иначе
				Количество = НСтроки[0].Количество; 
			КонецЕсли; 
		Иначе 
			Количество = 0;
		КонецЕсли; 
		
		Возврат Количество;
	КонецЕсли; 
//-ЕРЦ УсольцевПВ 04.05.2022 
	
	Если Период = Неопределено Тогда
		Период = Дата;
	КонецЕсли;
	
	// Если в учетной политике ЖКХ стоит указывать кол-во проживающих и зарегистрированных 
	// готовыми числами, то данные о кол-ве проживающих жильцов берутся из РС "КВП_УчетКоличестваЖильцовПоЛицевымСчетам",
	// если не готовыми числами, то из РС "УПЖКХ_СведенияОПроживающих".
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет); 
	
	Если Не НаКонецМесяца Тогда //ЕРЦ УсольцевПВ #12742 28.04.2022
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоПроживающих) КАК Количество
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) КАК КВП_УчетКоличестваЖильцовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Количество
		|ПОМЕСТИТЬ КоличествоИзСведений
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|			&Период,
		|			ЛицевойСчет В (&ЛицевойСчет)
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
		|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
		|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
		|	КОНЕЦ КАК Количество
		|ИЗ
		|	КоличествоИзСведений КАК КоличествоИзСведений,
		|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов"; 
		
		Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", ДопСтруктураПараметров.ЕРЦ_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами);
		//Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Количество = Выборка.Количество;
		Иначе
			Количество = 0;
		КонецЕсли;
		
	Иначе 
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВТ.ПрожИЗарегЧислами) КАК ПрожИЗарегЧислами,
		|	СУММА(ВТ.Количество) КАК Количество,
		|	ВТ.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТабСрезПоследних.КоличествоПроживающих КАК ПрожИЗарегЧислами,
		|		0 КАК Количество,
		|		ТабСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|	ИЗ
		|		РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам КАК ТабСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Таб.Период КАК Период,
		|				МАКСИМУМ(Таб.Регистратор) КАК Регистратор,
		|				Таб.ЛицевойСчет КАК ЛицевойСчет
		|			ИЗ
		|				РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам КАК Таб
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						МАКСИМУМ(Таб.Период) КАК Период,
		|						Таб.ЛицевойСчет КАК ЛицевойСчет
		|					ИЗ
		|						РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам КАК Таб
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
		|							ПО Таб.ЛицевойСчет = ВТ_ЛС.ЛицевойСчет
		|					ГДЕ
		|						Таб.Период <= &Дата
		|						И &ДопУсловие
		|					
		|					СГРУППИРОВАТЬ ПО
		|						Таб.ЛицевойСчет) КАК ВложенныйЗапрос
		|					ПО Таб.Период = ВложенныйЗапрос.Период
		|						И Таб.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Таб.ЛицевойСчет,
		|				Таб.Период) КАК ВложенныйЗапрос2
		|			ПО ТабСрезПоследних.Период = ВложенныйЗапрос2.Период
		|				И ТабСрезПоследних.Регистратор = ВложенныйЗапрос2.Регистратор
		|				И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос2.ЛицевойСчет
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		1,
		|		ТабСрезПоследних.ЛицевойСчет
		|	ИЗ
		|		РегистрСведений.УПЖКХ_СведенияОПроживающих КАК ТабСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(Таб.Период) КАК Период,
		|				Таб.Жилец КАК Жилец,
		|				Таб.ЛицевойСчет КАК ЛицевойСчет
		|			ИЗ
		|				РегистрСведений.УПЖКХ_СведенияОПроживающих КАК Таб
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
		|					ПО Таб.ЛицевойСчет = ВТ_ЛС.ЛицевойСчет
		|			ГДЕ
		|				Таб.Период <= &Период
		|				И Таб.ДатаИзменения <= &Дата
		|				И &ДопУсловие
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Таб.ЛицевойСчет,
		|				Таб.Жилец) КАК ВложенныйЗапрос
		|			ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
		|				И ТабСрезПоследних.Жилец = ВложенныйЗапрос.Жилец
		|				И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
		|	ГДЕ
		|		ТабСрезПоследних.Проживает) КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.ЛицевойСчет"; 
		
		Если Парам1 = 0 Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие", "");	
			
		ИначеЕсли Парам1 = 1 Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_ЛС", "ВТ_ЛС_Нормы");	
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие",
			"И ВТ_ЛС_Нормы.НормаПотребления.НормаНаЛицевойСчет = ИСТИНА
			|И ВТ_ЛС_Нормы.НормаПотребления.НормаДляВЕЖ = ЛОЖЬ
			|И ВТ_ЛС_Нормы.НормаПотребления.Основание = Значение(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
			|И ВТ_ЛС_Нормы.НормаПотребления.ВидЖильцов = Значение(Перечисление.УПЖКХ_ВидыЖильцов.Проживающие)");	
			
		КонецЕсли;
		
		ЕРЦ_ОбщийМодуль.ПоместитьПомещенияЗданияЛСМенеджерВТ(Запрос, ДопСтруктураПараметров);
		
		ДопСтруктураПараметров.Вставить("ЕРЦ_КоличествоПроживающих", Запрос.Выполнить().Выгрузить());
		НСтроки = ДопСтруктураПараметров.ЕРЦ_КоличествоПроживающих.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)); 
		
		Если НСтроки.Количество() > 0 Тогда 
			Если ДопСтруктураПараметров.ЕРЦ_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами Тогда
				Количество = НСтроки[0].ПрожИЗарегЧислами; 
			Иначе
				Количество = НСтроки[0].Количество; 
			КонецЕсли; 
		Иначе 
			Количество = 0;
		КонецЕсли; 
		
	КонецЕсли;
//-ЕРЦ УсольцевПВ 04.05.2022 
		
	Возврат Количество;
	
КонецФункции // ПолучитьКоличествоПроживающих()

//Была ранее в общем модуле "КВП_ОбщегоНазначения"
// Получает количество человек, зарегистрированных на указанном лицевом счете.
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета - лицевой счет или список лицевых счетов для анализа.
//  Дата - Дата - дата изменений, на которую получаются данные.
//  Период - Дата - дата документа начисления, на которую получаются данные.
//
// Возвращаемое значение:
//  Число – количество зарегистрированных.
//
Функция ЕРЦ_ПолучитьКоличествоЗарегистрированных(ЛицевойСчет, Дата, Период = Неопределено, ДопСтруктураПараметров, Парам1 = 0) Экспорт

//+ЕРЦ УсольцевПВ #12742 04.05.2022 
	//Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
	//	Возврат 0;
	//КонецЕсли;
	Если ДопСтруктураПараметров.Свойство("ЕРЦ_КоличествоЗарегистрированных") Тогда
		
		НСтроки = ДопСтруктураПараметров.ЕРЦ_КоличествоЗарегистрированных.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)); 
		
		Если НСтроки.Количество() > 0 Тогда 
			Если ДопСтруктураПараметров.ЕРЦ_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами Тогда
				Количество = НСтроки[0].ПрожИЗарегЧислами; 
			Иначе
				Количество = НСтроки[0].Количество; 
			КонецЕсли; 
		Иначе 
			Количество = 0;
		КонецЕсли; 
		
		Возврат Количество;
	КонецЕсли; 
//-ЕРЦ УсольцевПВ 04.05.2022 
	
	Если Период = Неопределено Тогда
		Период = Дата;
	КонецЕсли;
	
	// Если в учетной политике ЖКХ стоит указывать кол-во проживающих и зарегистрированных 
	// готовыми числами, то данные о кол-ве зарегистрированных жильцов берутся из РС "КВП_УчетКоличестваЖильцовПоЛицевымСчетам",
	// если не готовыми числами, то из РС "УПЖКХ_СведенияОЗарегистрированных".
	
	Запрос = Новый Запрос();
	Запрос.Текст =
//+ЕРЦ УсольцевПВ #12742 04.05.2022 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	СУММА(КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоЗарегистрированных) КАК Количество
	//|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	//|ИЗ
	//|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) КАК КВП_УчетКоличестваЖильцовСрезПоследних
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	КОЛИЧЕСТВО(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество
	//|ПОМЕСТИТЬ КоличествоИзСведений
	//|ИЗ
	//|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	//|			&Период,
	//|			ЛицевойСчет В (&ЛицевойСчет)
	//|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	//|ГДЕ
	//|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВЫБОР
	//|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	//|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
	//|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
	//|	КОНЕЦ КАК Количество
	//|ИЗ
	//|	КоличествоИзСведений КАК КоличествоИзСведений,
	//|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов";
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВТ.ПрожИЗарегЧислами) КАК ПрожИЗарегЧислами,
	|	СУММА(ВТ.Количество) КАК Количество,
	|	ВТ.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабСрезПоследних.КоличествоЗарегистрированных КАК ПрожИЗарегЧислами,
	|		0 КАК Количество,
	|		ТабСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|	ИЗ
	|		РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам КАК ТабСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(Таб.Период) КАК Период,
	|				Таб.ЛицевойСчет КАК ЛицевойСчет
	|			ИЗ
	|				РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам КАК Таб
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
	|					ПО Таб.ЛицевойСчет = ВТ_ЛС.ЛицевойСчет
	|			ГДЕ
	|				Таб.Период <= &Дата
	|				И &ДопУсловие
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Таб.ЛицевойСчет) КАК ВложенныйЗапрос
	|			ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
	|				И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		1,
	|		ТабСрезПоследних.ЛицевойСчет
	|	ИЗ
	|		РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК ТабСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(Таб.Период) КАК Период,
	|				Таб.Жилец КАК Жилец,
	|				Таб.ЛицевойСчет КАК ЛицевойСчет
	|			ИЗ
	|				РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК Таб
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
	|					ПО Таб.ЛицевойСчет = ВТ_ЛС.ЛицевойСчет
	|			ГДЕ
	|				Таб.Период <= &Период
	|				И Таб.ДатаИзменения <= &Дата
	|				И &ДопУсловие
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Таб.ЛицевойСчет,
	|				Таб.Жилец) КАК ВложенныйЗапрос
	|			ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
	|				И ТабСрезПоследних.Жилец = ВложенныйЗапрос.Жилец
	|				И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|	ГДЕ
	|		ТабСрезПоследних.Зарегистрирован) КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ЛицевойСчет";

//-ЕРЦ УсольцевПВ 04.05.2022 
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
//+ЕРЦ УсольцевПВ #12742 04.05.2022     

	//Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	Количество = Выборка.Количество;
	//Иначе
	//	Количество = 0;
	//КонецЕсли; 
		
	Если Парам1 = 0 Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие", "");	
		
	ИначеЕсли Парам1 = 1 Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_ЛС", "ВТ_ЛС_Нормы");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие",
		"И ВТ_ЛС_Нормы.НормаПотребления.НормаНаЛицевойСчет = ИСТИНА
		|И ВТ_ЛС_Нормы.НормаПотребления.НормаДляВЕЖ = ЛОЖЬ
		|И ВТ_ЛС_Нормы.НормаПотребления.Основание = Значение(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
		|И ВТ_ЛС_Нормы.НормаПотребления.ВидЖильцов = Значение(Перечисление.УПЖКХ_ВидыЖильцов.Зарегистрированные)");	
		
	КонецЕсли;

	ЕРЦ_ОбщийМодуль.ПоместитьПомещенияЗданияЛСМенеджерВТ(Запрос, ДопСтруктураПараметров);

	ДопСтруктураПараметров.Вставить("ЕРЦ_КоличествоЗарегистрированных", Запрос.Выполнить().Выгрузить());
	НСтроки = ДопСтруктураПараметров.ЕРЦ_КоличествоЗарегистрированных.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)); 
	
	Если НСтроки.Количество() > 0 Тогда 
		Если ДопСтруктураПараметров.ЕРЦ_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами Тогда
			Количество = НСтроки[0].ПрожИЗарегЧислами; 
		Иначе
			Количество = НСтроки[0].Количество; 
		КонецЕсли; 
	Иначе 
		Количество = 0;
	КонецЕсли; 
//-ЕРЦ УсольцевПВ 04.05.2022 
	
	Возврат Количество;

КонецФункции // ПолучитьКоличествоЗарегистрированных()

//Была ранее в общем модуле "УПЖКХ_ОбщегоНазначенияСервер"
Функция ЕРЦ_ПолучитьПлощадьКвартиры(Квартира,
								ВидПлощади, 
								ЛицевойСчет = Неопределено,
								Период = Неопределено,
								УчитыватьДолю = Истина,
								ОкруглятьПлощадь = Истина, ДопСтруктураПараметров = Неопределено, Парам1 = 0) Экспорт
								
	//+ЕРЦ УсольцевПВ #12742 28.04.2022   
	НаКонецМесяца = (КонецМесяца(Период) = Период);
	Если ДопСтруктураПараметров.Свойство("ЕРЦ_ПлощадиКвартиры") и НаКонецМесяца Тогда
	
		НСтроки = ДопСтруктураПараметров.ЕРЦ_ПлощадиКвартиры.НайтиСтроки(Новый Структура("ЛицевойСчет, ВидПлощади", ЛицевойСчет, ВидПлощади)); 
		
		Если НСтроки.Количество() > 0 Тогда
			Возврат ?(ОкруглятьПлощадь, Окр(НСтроки[0].Площадь, 2), НСтроки[0].Площадь);
		КонецЕсли; 
	
	КонецЕсли;   
	//-ЕРЦ УсольцевПВ 28.04.2022 
	
								
//+ЕРЦ УсольцевПВ #12742 29.04.2022 
	//Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
	//	Возврат 0;
	//КонецЕсли;
//-ЕРЦ УсольцевПВ 29.04.2022 
	
	Если Период = Неопределено Тогда
		Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос();    
	 
	ЕРЦ_ОбщийМодуль.ПоместитьПомещенияЗданияЛСМенеджерВТ(Запрос, ДопСтруктураПараметров); //ЕРЦ УсольцевПВ #12742 28.04.2022
	
	Запрос.УстановитьПараметр("Дата",        Период);
	Запрос.УстановитьПараметр("Объект",      Квартира);
	Запрос.УстановитьПараметр("ВидПлощади",  ВидПлощади);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Если Не НаКонецМесяца Тогда //ЕРЦ УсольцевПВ #12742 28.04.2022
		
		Если УчитыватьДолю 
			И НЕ ЛицевойСчет = Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(ВЫБОР
			|			КОГДА КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель = 0
			|				ТОГДА 0
			|			ИНАЧЕ КВП_ПлощадьПомещенияСрезПоследних.Площадь * КВП_РазмерыДолейСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель
			|		КОНЕЦ, 0) КАК Площадь
			|ИЗ
			|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
			|			&Дата,
			|			Объект = &Объект
			|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
			|				&Дата,
			|				Объект = &Объект
			|					И ЛицевойСчет = &ЛицевойСчет) КАК КВП_РазмерыДолейСрезПоследних
			|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = КВП_РазмерыДолейСрезПоследних.Объект";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь
			|ИЗ
			|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
			|			&Дата,
			|			Объект = &Объект
			|				И ВидПлощади = &ВидПлощади) КАК КВП_ПлощадьПомещенияСрезПоследних";
		КонецЕсли;    
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РазмерПлощади = ?(ОкруглятьПлощадь, Окр(Выборка.Площадь, 2), Выборка.Площадь);
		Иначе
			РазмерПлощади = 0;
		КонецЕсли;
		
		//+ЕРЦ УсольцевПВ #12742 28.04.2022 
	Иначе
		
		Если УчитыватьДолю 
			И НЕ ЛицевойСчет = Неопределено Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель = 0
			|			ТОГДА 0
			|		ИНАЧЕ КВП_ПлощадьПомещенияСрезПоследних.Площадь * КВП_РазмерыДолейСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейСрезПоследних.ДоляЗнаменатель
			|	КОНЕЦ КАК Площадь,
			|	КВП_РазмерыДолейСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	ВложенныйЗапрос.ВидПлощади КАК ВидПлощади
			|ИЗ
			|	РегистрСведений.КВП_ПлощадьПомещения КАК КВП_ПлощадьПомещенияСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МАКСИМУМ(Таб.Период) КАК Период,
			|			Таб.Объект КАК Объект,
			|			Таб.ВидПлощади КАК ВидПлощади
			|		ИЗ
			|			РегистрСведений.КВП_ПлощадьПомещения КАК Таб
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
			|				ПО Таб.Объект = ВТ_ЛС.Помещение
			|		ГДЕ
			|			Таб.Период <= &Дата
			|			И Таб.ВидПлощади = &ВидПлощади
			|			И &ДопУсловие
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Таб.ВидПлощади,
			|			Таб.Объект) КАК ВложенныйЗапрос
			|		ПО КВП_ПлощадьПомещенияСрезПоследних.Период = ВложенныйЗапрос.Период
			|			И КВП_ПлощадьПомещенияСрезПоследних.Объект = ВложенныйЗапрос.Объект
			|			И КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ВложенныйЗапрос.ВидПлощади
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов КАК КВП_РазмерыДолейСрезПоследних
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				МАКСИМУМ(Таб.Период) КАК Период,
			|				Таб.Объект КАК Объект,
			|				Таб.ЛицевойСчет КАК ЛицевойСчет
			|			ИЗ
			|				РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов КАК Таб
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
			|					ПО Таб.Объект = ВТ_ЛС.Помещение
			|						И Таб.ЛицевойСчет = ВТ_ЛС.ЛицевойСчет
			|			ГДЕ
			|				Таб.Период <= &Дата
			|				И &ДопУсловие
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Таб.ЛицевойСчет,
			|				Таб.Объект) КАК ВложенныйЗапрос2
			|			ПО КВП_РазмерыДолейСрезПоследних.Период = ВложенныйЗапрос2.Период
			|				И КВП_РазмерыДолейСрезПоследних.Объект = ВложенныйЗапрос2.Объект
			|				И КВП_РазмерыДолейСрезПоследних.ЛицевойСчет = ВложенныйЗапрос2.ЛицевойСчет
			|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = КВП_РазмерыДолейСрезПоследних.Объект";
			
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь,
			|	ВложенныйЗапрос.ЛицевойСчет КАК ЛицевойСчет,
			|	ВложенныйЗапрос.ВидПлощади КАК ВидПлощади
			|ИЗ
			|	РегистрСведений.КВП_ПлощадьПомещения КАК КВП_ПлощадьПомещенияСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			МАКСИМУМ(Таб.Период) КАК Период,
			|			Таб.Объект КАК Объект,
			|			Таб.ВидПлощади КАК ВидПлощади,
			|			ВТ_ЛС.ЛицевойСчет КАК ЛицевойСчет
			|		ИЗ
			|			РегистрСведений.КВП_ПлощадьПомещения КАК Таб
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
			|				ПО Таб.Объект = ВТ_ЛС.Помещение
			|		ГДЕ
			|			Таб.Период <= &Дата
			|			И Таб.ВидПлощади = &ВидПлощади
			|			И &ДопУсловие
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Таб.ВидПлощади,
			|			Таб.Объект,
			|			ВТ_ЛС.ЛицевойСчет) КАК ВложенныйЗапрос
			|		ПО КВП_ПлощадьПомещенияСрезПоследних.Период = ВложенныйЗапрос.Период
			|			И КВП_ПлощадьПомещенияСрезПоследних.Объект = ВложенныйЗапрос.Объект
			|			И КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ВложенныйЗапрос.ВидПлощади";
		КонецЕсли; 
		
		Если Парам1 = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие", "");	
		ИначеЕсли Парам1 = 1 Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_ЛС", "ВТ_ЛС_Нормы");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие",
			"И ВТ_ЛС_Нормы.НормаПотребления.НормаНаЛицевойСчет = ИСТИНА
			|И ВТ_ЛС_Нормы.НормаПотребления.НормаДляВЕЖ = ЛОЖЬ
			|И ВТ_ЛС_Нормы.НормаПотребления.ВидПлощади = &ВидПлощади
			|И ВТ_ЛС_Нормы.НормаПотребления.Основание = Значение(Перечисление.КВП_ОснованияНормПотребления.Площадь)");   
			
		КонецЕсли;
		
		ЕРЦ_ПлощадиКвартиры = Запрос.Выполнить().Выгрузить();
		
		Если ДопСтруктураПараметров.Свойство("ЕРЦ_ПлощадиКвартиры") Тогда
			Для каждого Стр Из ЕРЦ_ПлощадиКвартиры Цикл
				ЗаполнитьЗначенияСвойств(ДопСтруктураПараметров.ЕРЦ_ПлощадиКвартиры.Добавить(), Стр);
			КонецЦикла;
		Иначе 
			ДопСтруктураПараметров.Вставить("ЕРЦ_ПлощадиКвартиры", ЕРЦ_ПлощадиКвартиры);
		КонецЕсли;
		
		НСтроки = ДопСтруктураПараметров.ЕРЦ_ПлощадиКвартиры.НайтиСтроки(Новый Структура("ЛицевойСчет, ВидПлощади", ЛицевойСчет, ВидПлощади)); 
		
		Если НСтроки.Количество() > 0 Тогда
			РазмерПлощади = ?(ОкруглятьПлощадь, Окр(НСтроки[0].Площадь, 2), НСтроки[0].Площадь);
		Иначе 
			РазмерПлощади = 0;
		КонецЕсли; 
		
	КонецЕсли; 

//-ЕРЦ УсольцевПВ 28.04.2022 

	Возврат РазмерПлощади;
	
КонецФункции // ПолучитьПлощадьКвартиры()

//Была ранее в общем модуле "УПЖКХ_ОбщегоНазначенияСервер"
// Функция возвращает количество собственников по указанному помещению.
//
// Параметры:
//  Помещение - СправочникСсылка.УПЖКХ_Помещения - указанное помещение.
//  Период - Дата - дата среза.
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета - текущий лицевой счет.
//
// Возвращаемое значение:
//  Число – количество собственников.
//
Функция ЕРЦ_ПолучитьКоличествоСобственников(Помещение, Период, ЛицевойСчет, ДопСтруктураПараметров, Парам1 = 0) Экспорт
	
	//+ЕРЦ УсольцевПВ #12742 05.05.2022 
	Если ДопСтруктураПараметров.Свойство("ЕРЦ_КоличествоСобственников") Тогда
		
		НСтроки = ДопСтруктураПараметров.ЕРЦ_КоличествоСобственников.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)); 
		
		Если НСтроки.Количество() > 0 Тогда
			Количество = НСтроки[0].Количество;
		Иначе 
			Количество = 0;
		КонецЕсли; 
		
		Возврат Количество;
		
	КонецЕсли;   

	//-ЕРЦ УсольцевПВ 05.05.2022 
	
	// Независимо от того какой вариант учета собственников (упрощенный или нет) установлен 
	// в настройках параметров учета ЖКХ, данные о кол-ве собственников берутся 
	// из РС "УПЖКХ_СобственникиПомещений".
	
	// В зависимости от того, сколько л/с привязано к текущему помещению зависит алгоритм
	// подсчета кол-ва собственников. Если л/с один, то считаем кол-во собственников помещения.
	// Если л/с более одного, то считаем кол-во собственников для текущего л/с среди физ. лиц и контрагентов.
	// Подсчет кол-ва собственников среди физ. лиц происходит следующим образом:
	// - Отбираем всех физ. лиц, которые являются жильцами-собственниками текущего л/с.
	// Подсчет кол-ва собственников среди контрагентов реализован следующим образом:
	// - Отбирается контрагент, который является собственником-нанимателем лицевого счета.
	//   Если данный контрагент является собственником текущего л/с, то считаем его за собственника.
	//   Т.е. на данный момент, если контрагент не является собственником-нанимателем л/с, то его не считаем.
	
	// Получение кол-ва л/с, закрепленных за текущим помещением.
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",    Период);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
//+ЕРЦ УсольцевПВ #12742 05.05.2022 

//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
//	|ИЗ
//	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Период, Объект = &Помещение) КАК КВП_ЛицевыеСчетаСрезПоследних
//	|ГДЕ
//	|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
//	
//	КолЛСнаПомещении = Запрос.Выполнить().Выбрать().Количество();
//	
//	// Получение кол-ва собственников.
//	Если КолЛСнаПомещении = 1 Тогда
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	РАЗЛИЧНЫЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственники
//		|ИЗ
//		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
//		|ГДЕ
//		|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует";
//		
//	ИначеЕсли КолЛСнаПомещении > 1 Тогда
//		
//		// Подсчет кол-ва собственников (кол. собственников физ. лиц + кол. собственников контрагентов).
//		
//		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
//		
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо
//		|ПОМЕСТИТЬ врФизЛицаПоТекущемуЛС
//		|ИЗ
//		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
//		|ГДЕ
//		|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ОтветственныйСобственникНанимательЛС.ОтветственныйВладелец КАК Контрагент
//		|ПОМЕСТИТЬ врКонтрагенты
//		|ИЗ
//		|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК ОтветственныйСобственникНанимательЛС
//		|ГДЕ
//		|	ОтветственныйСобственникНанимательЛС.ЛицевойСчет = &ЛицевойСчет
//		|	И ОтветственныйСобственникНанимательЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	врФизЛицаПоТекущемуЛС.ФизЛицо КАК Собственник
//		|ИЗ
//		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК СобственникиПомещений
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врФизЛицаПоТекущемуЛС КАК врФизЛицаПоТекущемуЛС
//		|		ПО СобственникиПомещений.Собственник = врФизЛицаПоТекущемуЛС.ФизЛицо
//		|ГДЕ
//		|	СобственникиПомещений.Действует
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ
//		|	СобственникиПомещений.Собственник
//		|ИЗ
//		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК СобственникиПомещений
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врКонтрагенты КАК врКонтрагенты
//		|		ПО СобственникиПомещений.Собственник = врКонтрагенты.Контрагент
//		|ГДЕ
//		|	СобственникиПомещений.Действует";
//		
//	КонецЕсли;
//	
//	Возврат Запрос.Выполнить().Выбрать().Количество();

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(1) КАК Количество,
	|	ВТ_ЛС.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений КАК ТабСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Таб.Период) КАК Период,
	|			Таб.Собственник КАК Собственник,
	|			Таб.Помещение КАК Помещение
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СобственникиПомещений КАК Таб
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
	|				ПО Таб.Помещение = ВТ_ЛС.Помещение
	|		ГДЕ
	|			Таб.Период <= &Период
	|			И &ДопУсловие
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таб.Помещение,
	|			Таб.Собственник) КАК ВложенныйЗапрос
	|		ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
	|			И ТабСрезПоследних.Собственник = ВложенныйЗапрос.Собственник
	|			И ТабСрезПоследних.Помещение = ВложенныйЗапрос.Помещение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЛС КАК ВТ_ЛС
	|		ПО ТабСрезПоследних.Помещение = ВТ_ЛС.Помещение
	|ГДЕ
	|	ТабСрезПоследних.Действует
	|	И &ДопУсловие
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЛС.ЛицевойСчет";
	
	Если Парам1 = 0 Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие", "");	
		
	ИначеЕсли Парам1 = 1 Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_ЛС", "ВТ_ЛС_Нормы");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДопУсловие",
		"И ВТ_ЛС_Нормы.НормаПотребления.НормаНаЛицевойСчет = ИСТИНА
		|И ВТ_ЛС_Нормы.НормаПотребления.НормаДляВЕЖ = ЛОЖЬ
		|И ВТ_ЛС_Нормы.НормаПотребления.Основание = Значение(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
		|И ВТ_ЛС_Нормы.НормаПотребления.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = Значение(Перечисление.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.ПоКоличествуСобственников)");	
		
	КонецЕсли;
	
	ЕРЦ_ОбщийМодуль.ПоместитьПомещенияЗданияЛСМенеджерВТ(Запрос, ДопСтруктураПараметров); //ЕРЦ УсольцевПВ #12742 28.04.2022

	ДопСтруктураПараметров.Вставить("ЕРЦ_КоличествоСобственников", Запрос.Выполнить().Выгрузить());

	НСтроки = ДопСтруктураПараметров.ЕРЦ_КоличествоСобственников.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)); 

	Если НСтроки.Количество() > 0 Тогда
		Количество = НСтроки[0].Количество;
	Иначе 
		Количество = 0;
	КонецЕсли; 

	Возврат Количество;
		
//-ЕРЦ УсольцевПВ 05.05.2022 
	
КонецФункции // ПолучитьКоличествоСобственников()

Процедура ВыгрузитьЛСЗаПрошлыеМесяцы(КоличествоМесяцев = "") Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Ссылка КАК Ссылка,
		|	УПЖКХ_ВариантыОбменаДаннымиССайтом.НастройкаОбмена КАК НастройкаОбмена,
		|	УПЖКХ_ВариантыОбменаДаннымиССайтом.НастройкаДоступа КАК НастройкаДоступа,
		|	УПЖКХ_ВариантыОбменаДаннымиССайтом.ВыгрузкаДанныхПоЛС КАК ВыгрузкаДанныхПоЛС,
		|	УПЖКХ_ВариантыОбменаДаннымиССайтом.ВыгрузкаЭлектронныхПаспортов КАК ВыгрузкаЭлектронныхПаспортов,
		|	УПЖКХ_ВариантыОбменаДаннымиССайтом.НастройкаДоступа.Пароль КАК Пароль
		|ИЗ
		|	Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом КАК УПЖКХ_ВариантыОбменаДаннымиССайтом
		|ГДЕ
		|	(УПЖКХ_ВариантыОбменаДаннымиССайтом.ВыгрузкаДанныхПоЛС
		|			ИЛИ УПЖКХ_ВариантыОбменаДаннымиССайтом.ВыгрузкаЭлектронныхПаспортов)
		|	И НЕ УПЖКХ_ВариантыОбменаДаннымиССайтом.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МесяцыОбмена = Новый Массив;
	
	Для Сдвиг=1 По Число(КоличествоМесяцев) Цикл
		
		МесяцыОбмена.Добавить(НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1*Сдвиг)));	
		
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		
		Для каждого МесяцОбмена Из МесяцыОбмена Цикл
			
			ПараметрыОбмена  = Новый Структура;
			
			СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(Выборка.НастройкаДоступа);
			
			Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыОбмена.Вставить("НастройкаОбмена",  			 Выборка.НастройкаОбмена);
			ПараметрыОбмена.Вставить("МесяцОбмена",     			 МесяцОбмена);
			ПараметрыОбмена.Вставить("НастройкаДоступа", 			 Выборка.НастройкаДоступа);
			ПараметрыОбмена.Вставить("ВыгрузкаДанныхПоЛС",           Выборка.ВыгрузкаДанныхПоЛС);
			ПараметрыОбмена.Вставить("ВыгрузкаЭлектронныхПаспортов", Выборка.ВыгрузкаЭлектронныхПаспортов);
						
			УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьВыгрузкуДанныхПоЛС(,Выборка.Пароль, ПараметрыОбмена, СтруктураИнформацииОСайте);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузкаЛСНаСайтПериодическаяФГАУ() Экспорт 
	
	ЗаписьЖурналаРегистрации("ЕРЦ_ВыгрузкаЛСНаСайтПериодическая_Старт");
		
	ВариантОбмена = Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.НайтиПоКоду("00-000001");  
	
	НастройкаДоступа = ВариантОбмена.НастройкаДоступа;
	
	Пароль = НастройкаДоступа.Пароль;
	
	СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(НастройкаДоступа);
		
	ТекДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ЕРЦ_РегистрацияЛСдляОбменаССайтом КАК ЕРЦ_РегистрацияЛСдляОбменаССайтом
	|ГДЕ
	|	НЕ ЕРЦ_РегистрацияЛСдляОбменаССайтом.Выгружен
	|	И ЕРЦ_РегистрацияЛСдляОбменаССайтом.МесяцОбмена = &ТекущийМесяц";
	Запрос.УстановитьПараметр("ТекущийМесяц", НачалоМесяца(ТекДата));
	
	Пока Истина Цикл
		
		Если Запрос.Выполнить().Пустой() Тогда
			Прервать;
		КонецЕсли;  
		
		//читаем в цикле а не заранее, чтобы можно было изменять поведение
		//не обрывая регламент
		Если Константы.ЕРЦ_МногопоточнаяВыгрузкаФГАУ.Получить() Тогда
			ОбщегоНазначенияБТС.Пауза(5);
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(ВариантОбмена);
			ПараметрыВыполнения.Добавить(Пароль);
			ПараметрыВыполнения.Добавить(Неопределено);
			ПараметрыВыполнения.Добавить(СтруктураИнформацииОСайте);
			ФоновыеЗадания.Выполнить("УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьВыгрузкуДанныхПоЛС", ПараметрыВыполнения,,"ФоновоеЗадание_ВыгрузкаЛСНаСайтПериодическая");
		Иначе
			УПЖКХ_ВебИнтеграцияОбщегоНазначения.ВыполнитьВыгрузкуДанныхПоЛС(ВариантОбмена, Пароль, Неопределено, СтруктураИнформацииОСайте);
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("ЕРЦ_ВыгрузкаЛСНаСайтПериодическая_Финиш");
	
КонецПроцедуры

Процедура ОчисткаЖурналовВыгрузкиНаСайт(КоличествоМесяцевДляУдаленияОтбор = "") Экспорт 
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	КоличествоМесяцевДляУдаления = 3;
	
	Если ЗначениеЗаполнено(КоличествоМесяцевДляУдаленияОтбор) Тогда
		
		КоличествоМесяцевДляУдаления = Число(КоличествоМесяцевДляУдаленияОтбор);	
		
	КонецЕсли; 
	
	//Очистим неактуальные данные
	МесяцыОчистки = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), -КоличествоМесяцевДляУдаления);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_ЖурналОбменаССайтом.НастройкаДоступа КАК НастройкаДоступа,
		|	УПЖКХ_ЖурналОбменаССайтом.ВариантОбмена КАК ВариантОбмена,
		|	УПЖКХ_ЖурналОбменаССайтом.ВидОбмена КАК ВидОбмена,
		|	УПЖКХ_ЖурналОбменаССайтом.Дата КАК Дата,
		|	УПЖКХ_ЖурналОбменаССайтом.ЕРЦ_УИД КАК ЕРЦ_УИД
		|ИЗ
		|	РегистрСведений.УПЖКХ_ЖурналОбменаССайтом КАК УПЖКХ_ЖурналОбменаССайтом
		|ГДЕ
		|	УПЖКХ_ЖурналОбменаССайтом.Дата < &ПрошлыйДень";
	
	Запрос.УстановитьПараметр("ПрошлыйДень", НачалоДня(ТекущаяДата())-86400);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл 

		НаборЗаписей = РегистрыСведений.УПЖКХ_ЖурналОбменаССайтом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НастройкаДоступа.Установить(Выборка.НастройкаДоступа);
		НаборЗаписей.Отбор.ВариантОбмена.Установить(Выборка.ВариантОбмена);
		НаборЗаписей.Отбор.ВидОбмена.Установить(Выборка.ВидОбмена);
		НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
		НаборЗаписей.Отбор.ЕРЦ_УИД.Установить(Выборка.ЕРЦ_УИД);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.МесяцОбмена КАК МесяцОбмена
		|ИЗ
		|	РегистрСведений.ЕРЦ_РегистрацияЛСдляОбменаССайтом КАК ЕРЦ_РегистрацияЛСдляОбменаССайтом
		|ГДЕ
		|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.МесяцОбмена <= &МесяцыОчистки";
	
	Запрос.УстановитьПараметр("МесяцыОчистки", МесяцыОчистки);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл 

		НаборЗаписей = РегистрыСведений.ЕРЦ_РегистрацияЛСдляОбменаССайтом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МесяцОбмена.Установить(Выборка.МесяцОбмена);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЕРЦ_ОчисткаЖурналовВыгрузкиНаСайт", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(

КонецПроцедуры

#Область ПартионныйУчетВзаиморасчетов

//Функция возвращает остатки в 3-х показателях:
//1.Из таблицы движений "КВП_ВзаиморасчетыПоЛицевымСчетам" - поле "Движения"
//2.Из таблицы итогов "КВП_ВзаиморасчетыПоЛицевымСчетам" - поле "Итоги"
//3.Из регистра "ЕРЦ_ИтогиПартийВзаиморасчетовЛС" - поле "РегистрСведений"
//ВсеХорошо = Истина, если значения между предыдущими полями равны
//в поле "Очередь" указывается количество ЛС, которое стоит в очереди для записи в регистр "ЕРЦ_ИтогиПартийВзаиморасчетовЛС"
//Если очередь не пустая, значит 99% цифры в полях будут отличаться
Функция ПартииРассчитаныВерно(Период = Неопределено) Экспорт 

	СтруктураВозврата = Новый Структура;
	
	Если Период = Неопределено Тогда
		ПериодОстатков = НачалоМесяца(ТекущаяДата());	   
	Иначе
		ПериодОстатков = НачалоМесяца(Период);	   
	КонецЕсли; 

	ПериодНачисления = ДобавитьМесяц(ПериодОстатков, 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(вт.ЕРЦ_Движения) КАК ЕРЦ_Движения,
		|	МАКСИМУМ(вт.Движения) КАК Движения,
		|	МАКСИМУМ(вт.Итоги) КАК Итоги,
		|	МАКСИМУМ(вт.РегистрСведений) КАК РегистрСведений,
		|	МАКСИМУМ(вт.КорректировкиЗаднимЧислом) КАК КорректировкиЗаднимЧислом,
		|	МАКСИМУМ(вт.Движения) = МАКСИМУМ(вт.Итоги)
		|		И МАКСИМУМ(вт.ЕРЦ_Движения) = МАКСИМУМ(вт.РегистрСведений) КАК ВсеХорошо,
		|	МАКСИМУМ(вт.Очередь) КАК Очередь
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ВЫБОР
		|				КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.приход)
		|					ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления
		|				ИНАЧЕ -1 * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления
		|			КОНЕЦ) КАК КорректировкиЗаднимЧислом,
		|		0 КАК ЕРЦ_Движения,
		|		0 КАК Движения,
		|		0 КАК Итоги,
		|		0 КАК РегистрСведений,
		|		0 КАК Очередь
		|	ИЗ
		|		РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|	ГДЕ
		|		КВП_ВзаиморасчетыПоЛицевымСчетам.Период >= &ПериодНачисления
		|		И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &ПериодНачисления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		СУММА(ВЫБОР
		|				КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.приход)
		|					ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления
		|				ИНАЧЕ -1 * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления
		|			КОНЕЦ),
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|	ГДЕ
		|		КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &ПериодНачисления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		СУММА(ВЫБОР
		|				КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(виддвижениянакопления.приход)
		|					ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления
		|				ИНАЧЕ -1 * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления
		|			КОНЕЦ),
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|	ГДЕ
		|		КВП_ВзаиморасчетыПоЛицевымСчетам.Период < &ПериодНачисления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		0,
		|		КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток,
		|		0,
		|		0
		|	ИЗ
		|		РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&ПериодНачисления, ) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		0,
		|		0,
		|		СУММА(ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СуммаНачисленияОстаток),
		|		0
		|	ИЗ
		|		РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
		|	ГДЕ
		|		ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков = &ПериодОстатков
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		КОЛИЧЕСТВО(*)
		|	ИЗ
		|		РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС КАК ЕРЦ_ОчередьВосстановленияПартийЛС) КАК вт";
	
	Запрос.УстановитьПараметр("ПериодНачисления", ПериодНачисления);
	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатков);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
	
		СтруктураВозврата.Вставить(Колонка.Имя);
	
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
	КонецЦикла;

	Возврат СтруктураВозврата;

КонецФункции

Функция ОчередьВосстановленияПартийЛСПустая(ЛицевойСчет = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет) КАК КоличествоЛС
		|ИЗ
		|	РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС КАК ЕРЦ_ОчередьВосстановленияПартийЛС
		|ГДЕ
		|	&УсловиеЛС";
	
	Если ЛицевойСчет = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛС", "ИСТИНА");
	ИначеЕсли ТипЗнч(ЛицевойСчет) = Тип("Массив") Тогда 
		Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевойСчет);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛС", "ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет В (&ЛицевыеСчета)");
	Иначе 
		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛС", "ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет = &ЛицевойСчет");
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда 
        Возврат Выборка.КоличествоЛС = 0;
	Иначе  
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ПартионныйУчетКВП_ВзаиморасчетыПоЛицевымСчетамПодписка(Источник, Отказ, Замещение) Экспорт 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Регистратор = Источник.Отбор.Регистратор.Значение; 
	
	Для каждого Стр Из Источник Цикл
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.КВП_КорректировкаНачислений") и 
			(Стр.ВидДвижения = ВидДвиженияНакопления.Приход И Стр.СуммаНачисления < 0
			ИЛИ Стр.ВидДвижения = ВидДвиженияНакопления.Расход И Стр.СуммаНачисления > 0) Тогда 
			Стр.ЕРЦ_Период = КонецМесяца(Стр.МесяцНачисления);
		Иначе
			Стр.ЕРЦ_Период = Стр.Период;
		КонецЕсли; 
	КонецЦикла;  
	
	Если Источник.Количество() = 0 Тогда 
		Если Не Источник.ДополнительныеСвойства.Свойство("ЕРЦ_НаборЗаписейДо") или
			Источник.ДополнительныеСвойства.ЕРЦ_НаборЗаписейДо.Количество() = 0 Тогда
			//Очистка
			//движений не было
			Возврат;	
		КонецЕсли; 
		ИсточникНабор = Источник.ДополнительныеСвойства.ЕРЦ_НаборЗаписейДо; 
	Иначе 
		ИсточникНабор = Источник; 
	КонецЕсли;   
	
	ГраницаИтоговПартийЛС = Константы.ЕРЦ_ГраницаИтоговПартийЛС.Получить();
	ГраницаНачалаИтоговПартийЛС = Константы.ЕРЦ_ГраницаНачалаИтоговПартийЛС.Получить();
	ДатаНулевыхОстатковПоПартиямЛС = Константы.ЕРЦ_ДатаНулевыхОстатковПоПартиямЛС.Получить(); 
	АнализВсехОплат = (ТипЗнч(Регистратор) = Тип("ДокументСсылка.КВП_РегистрацияОплаты"));
	
	ТЗОтбор = Новый ТаблицаЗначений;
	ТЗОтбор.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТЗОтбор.Колонки.Добавить("ПериодОстатков", Новый ОписаниеТипов("Дата")); 
	ДатаСортировки = ТекущаяДата();
	
	Для каждого Стр Из ИсточникНабор Цикл
		
		Если Не ЗначениеЗаполнено(Стр.ЛицевойСчет) Тогда
			Продолжить;
		КонецЕсли;  
		
		НСтроки = ТЗОтбор.НайтиСтроки(Новый Структура("ЛицевойСчет", Стр.ЛицевойСчет));
		
		ПериодОстатков = НачалоМесяца(Стр.ЕРЦ_Период);
		
		//В очередь не попадут документы будущей датой
		Если ПериодОстатков <= ГраницаИтоговПартийЛС Тогда
			
			ТекСтрока = Неопределено;
			
			Если НСтроки.Количество() = 0 Тогда
				НовСтрока = ТЗОтбор.Добавить();	
				НовСтрока.ЛицевойСчет = Стр.ЛицевойСчет;
				ТекСтрока = НовСтрока;
			ИначеЕсли НСтроки[0].ПериодОстатков > ПериодОстатков Тогда  
				ТекСтрока = НСтроки[0];
			КонецЕсли; 
			
			Если ТекСтрока <> Неопределено Тогда
			
				Если ПериодОстатков <= ГраницаНачалаИтоговПартийЛС Тогда
				    //Если нужен пересчет с периода, который меньше или равно начальной границы рассчитанных итогов партий
					//Значит для пересчета будут браться остатки из предыдущего месяца, который не рассчитан(он до границы начала итогов)
					//Следовательно нужно делать пересчет с того момента, когда остатков не было ни у кого
					//из константы "ЕРЦ_ДатаНулевыхОстатковПоПартиямЛС"
					ТекСтрока.ПериодОстатков = ДатаНулевыхОстатковПоПартиямЛС;
				Иначе
					ТекСтрока.ПериодОстатков = ПериодОстатков;
				КонецЕсли;  
							
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	//Ставим блокировку, чтобы регламент правильно считал
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;  
	ЭлементБлокировки.ИсточникДанных = ТЗОтбор;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЛицевойСчет", "ЛицевойСчет");
	Блокировка.Заблокировать();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗОтбор.ЛицевойСчет КАК ЛицевойСчет,
		|	ТЗОтбор.ПериодОстатков КАК ПериодОстатков
		|ПОМЕСТИТЬ ТЗОтбор
		|ИЗ
		|	&ТЗОтбор КАК ТЗОтбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗОтбор.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет ЕСТЬ NULL
		|				ИЛИ ТЗОтбор.ПериодОстатков < ЕРЦ_ОчередьВосстановленияПартийЛС.ПериодОстатков
		|			ТОГДА ТЗОтбор.ПериодОстатков
		|		ИНАЧЕ ЕРЦ_ОчередьВосстановленияПартийЛС.ПериодОстатков
		|	КОНЕЦ КАК ПериодОстатков,
		|	ВЫБОР
		|		КОГДА ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет ЕСТЬ NULL
		|				ИЛИ НЕ ЕРЦ_ОчередьВосстановленияПартийЛС.АнализВсехОплат
		|			ТОГДА &АнализВсехОплат
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК АнализВсехОплат
		|ИЗ
		|	ТЗОтбор КАК ТЗОтбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС КАК ЕРЦ_ОчередьВосстановленияПартийЛС
		|		ПО ТЗОтбор.ЛицевойСчет = ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет ЕСТЬ NULL
		|					ИЛИ ТЗОтбор.ПериодОстатков < ЕРЦ_ОчередьВосстановленияПартийЛС.ПериодОстатков
		|					ИЛИ НЕ ЕРЦ_ОчередьВосстановленияПартийЛС.АнализВсехОплат
		|						И &АнализВсехОплат
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТЗОтбор", ТЗОтбор);
	Запрос.УстановитьПараметр("АнализВсехОплат", АнализВсехОплат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЕРЦ_ОчередьВосстановленияПартийЛС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЛицевойСчет.Установить(Выборка.ЛицевойСчет); 
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ЛицевойСчет		= Выборка.ЛицевойСчет;
		НовЗапись.ПериодОстатков 	= Выборка.ПериодОстатков;
		НовЗапись.ДатаСортировки 	= ДатаСортировки;
		НовЗапись.АнализВсехОплат	= АнализВсехОплат;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция Таблица_Оплаты_ДляОбменаWS() Экспорт 

	Оплаты_ДляОбменаWS = Новый ТаблицаЗначений;
	Оплаты_ДляОбменаWS.Колонки.Добавить("payment_date", Новый ОписаниеТипов("Дата"));
	Оплаты_ДляОбменаWS.Колонки.Добавить("billing_month", Новый ОписаниеТипов("Дата"));
	Оплаты_ДляОбменаWS.Колонки.Добавить("court_payment", Новый ОписаниеТипов("Булево"));
	Оплаты_ДляОбменаWS.Колонки.Добавить("sum", Новый ОписаниеТипов("Число")); 
	Оплаты_ДляОбменаWS.Колонки.Добавить("registry_number", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	Оплаты_ДляОбменаWS.Колонки.Добавить("registry_data", Новый ОписаниеТипов("Дата"));

	Возврат Оплаты_ДляОбменаWS;
	
КонецФункции

Процедура Регламент_ВосстановитьПартииВзаиморасчетовПоЛС() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);  //в конце регламента снимется автоматически
	
	ЗаписьЖурналаРегистрации("ЕРЦ_Регламент_ВосстановитьПартииВзаиморасчетовПоЛС_Начало");
	
	//В начале работы регламента нужно сдвинуть границу рассчитанных итогов партий ЛС
	//Если наступил новый месяц
	//Будут перерассчитаны ЛС, имеющие остатки в прошлом или движения текущем месяцах
	
	СохраненнаяГраницаИтогов = Константы.ЕРЦ_ГраницаИтоговПартийЛС.Получить();
	ДатаСортировки = ТекущаяДата();  
	ТекущийМесяц = НачалоМесяца(ТекущаяДата()); 
	СледующийМесяц = ДобавитьМесяц(ТекущийМесяц, 1); 
	ГраницаНачалаИтоговПартийЛС = Константы.ЕРЦ_ГраницаНачалаИтоговПартийЛС.Получить();   
	
	Оплаты_ДляОбменаWS = Таблица_Оплаты_ДляОбменаWS();

	Если ЗначениеЗаполнено(СохраненнаяГраницаИтогов) и СохраненнаяГраницаИтогов < ТекущийМесяц Тогда 
		
		НачатьТранзакцию();  
		
		Константы.ЕРЦ_ГраницаИтоговПартийЛС.Установить(ТекущийМесяц);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;  
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ.ЛицевойСчет КАК ЛицевойСчет,
		|	&ТекущийМесяц КАК ПериодОстатков
		|ПОМЕСТИТЬ ТЗОтбор
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет КАК ЛицевойСчет
		|	ИЗ
		|		РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
		|	ГДЕ
		|		ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков = &ПрошлыйМесяц
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет
		|	ИЗ
		|		РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|	ГДЕ
		|		КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период >= &ТекущийМесяц
		|		И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &СледующийМесяц) КАК ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗОтбор.ЛицевойСчет КАК ЛицевойСчет,
		|	ТЗОтбор.ПериодОстатков КАК ПериодОстатков
		|ИЗ
		|	ТЗОтбор КАК ТЗОтбор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС КАК ЕРЦ_ОчередьВосстановленияПартийЛС
		|		ПО ТЗОтбор.ЛицевойСчет = ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет
		|ГДЕ
		|	ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("ПрошлыйМесяц", СохраненнаяГраницаИтогов);
		Запрос.УстановитьПараметр("ТекущийМесяц", ТекущийМесяц);
		Запрос.УстановитьПараметр("СледующийМесяц", СледующийМесяц);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			
			НаборЗаписей = РегистрыСведений.ЕРЦ_ОчередьВосстановленияПартийЛС.СоздатьНаборЗаписей();
			
			Пока Выборка.Следующий() Цикл
				НовЗапись = НаборЗаписей.Добавить();
				НовЗапись.ЛицевойСчет = Выборка.ЛицевойСчет;
				НовЗапись.ПериодОстатков = Выборка.ПериодОстатков;
				НовЗапись.ДатаСортировки = ДатаСортировки;
			КонецЦикла;
			
			НаборЗаписей.Записать(Ложь); //добавляем без замещения. Отбор не нужен	
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли Не ЗначениеЗаполнено(СохраненнаяГраницаИтогов) Тогда    
		Константы.ЕРЦ_ГраницаИтоговПартийЛС.Установить(ТекущийМесяц);
	КонецЕсли;
	
	//Теперь очистим итоги, которые ранее начальной границы
	//1.Сначала нужно установить константу "ЕРЦ_ДатаНулевыхОстатковПоПартиямЛС" - это дата, когда не было в системе еще документов
	//Но дата не должна быть пустой датой, т.к. пустая дата зарезервирована для слежебных обработок
	//по полному перерасчету ЛС(подразумевается, что заранее все итоги партий были очищены)
	//И не должна быть меньше первого документа в системе, иначе для тех ЛС, у которых будет устанавливаться эта дата в качестве
	//даты начала пересчета(ПериодОстатков), будет обработка лишних месяцев "вхолостую"(неоптимально)
	//2.Граница сдвигается руками
	//Ее нельзя сдвигать, когда в РС "ЕРЦ_ОчередьВосстановленияПартийЛС" есть хоть 1 запись 
	//Граница сдвигается только вперед с обязательным перезапуском этого регламента   
	//Если граница сдвигается назад - нужен полный пересчет итогов с нуля с предварительной очисткой итогов по всему регистру
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("ГраницаНачалаИтоговПартийЛС", ГраницаНачалаИтоговПартийЛС);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков КАК ПериодОстатков
		|ИЗ
		|	РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
		|ГДЕ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков < &ГраницаНачалаИтоговПартийЛС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодОстатков";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл

		НаборЗаписей = РегистрыСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодОстатков.Установить(Выборка.ПериодОстатков);  
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС КАК ЕРЦ_ОчередьВосстановленияПартийЛС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕРЦ_ОчередьВосстановленияПартийЛС.ДатаСортировки";
		
	Пока Истина Цикл
				
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;  
				
		Выборка.Следующий();
		
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();  
				
		Данные = Новый структура("ЛицевойСчет,Оплаты_ДляОбменаWS, ГраницаНачалаИтоговПартийЛС, СледующийМесяц",
		Выборка.ЛицевойСчет, Оплаты_ДляОбменаWS, ГраницаНачалаИтоговПартийЛС, СледующийМесяц); 
		
		РезультатОбработкиЛС = ВосстановитьПартииВзаиморасчетовПоЛС(Данные);
		Если Не РезультатОбработкиЛС.Результат Тогда
			ЗаписьЖурналаРегистрации("ЕРЦ_Регламент_ВосстановитьПартииВзаиморасчетовПоЛС_Ошибка",,,,РезультатОбработкиЛС.ОписаниеОшибки);
		КонецЕсли; 
		
		Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ЗаписьЖурналаРегистрации("ЕРЦ_Регламент_ВосстановитьПартииВзаиморасчетовПоЛС",,,,СтрШаблон("Время обработки ЛС %1 = %2 мс(1/1000с)", Выборка.ЛицевойСчет, Конец - Начало));
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации("ЕРЦ_Регламент_ВосстановитьПартииВзаиморасчетовПоЛС_Конец");
	
КонецПроцедуры

Процедура ВосстановитьПартииМногопоточно(ВФоне, КоличествоПотоков) Экспорт 
	
	ИмяФоновыхЗаданий = "ЕРЦ_МногопоточнаяОбработкаОбъектов_ВосстановленийПартийЛС";   
	МассивФоновыхЗаданий = Новый Массив; 
	ТипМногопоточнойОбработки = Перечисления.ЕРЦ_ТипыМногопоточнойОбработки.ВосстановленийПартийЛС;
	
	//сначала очистим
	НаборЗаписей = РегистрыСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Тип.Установить(ТипМногопоточнойОбработки);
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС КАК ЕРЦ_ОчередьВосстановленияПартийЛС";
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	КоличествоЛСДляПотока = Цел(Выборка.Количество() / КоличествоПотоков) + 1;  
	
	МассивЛС = Новый Массив;
	
	СчетчикЛС = 0; 
	НомерПотока = 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если СчетчикЛС = КоличествоЛСДляПотока Тогда
			
			НовЗапись = НаборЗаписей.Добавить();  
			
			НовЗапись.Тип = ТипМногопоточнойОбработки;
			НовЗапись.НомерПотока = НомерПотока;  
			НовЗапись.Данные = Новый ХранилищеЗначения(МассивЛС, Новый СжатиеДанных(9));
			
			МассивЛС = Новый Массив;
			СчетчикЛС = 0; 
			НомерПотока = НомерПотока + 1;
			
		КонецЕсли; 	 
		
		МассивЛС.Добавить(Выборка.ЛицевойСчет);
		
		СчетчикЛС = СчетчикЛС + 1;
		
	КонецЦикла;
	
	НовЗапись = НаборЗаписей.Добавить();  
	
	НовЗапись.Тип = ТипМногопоточнойОбработки;
	НовЗапись.НомерПотока = НомерПотока;  
	НовЗапись.Данные = Новый ХранилищеЗначения(МассивЛС, Новый СжатиеДанных(9));
	
	НаборЗаписей.Записать(); 
	
	Для НомерПотока = 1 По КоличествоПотоков Цикл
		
		ПараметрыПроцедурыОбработки = Новый Структура;
		ПараметрыПроцедурыОбработки.Вставить("Тип", ТипМногопоточнойОбработки);
		ПараметрыПроцедурыОбработки.Вставить("НомерПотока", НомерПотока);	
		
		Если ВФоне Тогда
			
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(ПараметрыПроцедурыОбработки);
			
			МассивФоновыхЗаданий.Добавить(ФоновыеЗадания.Выполнить("ЕРЦ_ОбщийМодуль.ВосстановитьПартииМногопоточноПродолжение", ПараметрыВыполнения,,ИмяФоновыхЗаданий));
			
		Иначе 
			ЕРЦ_ОбщийМодуль.ВосстановитьПартииМногопоточноПродолжение(ПараметрыПроцедурыОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВФоне Тогда
		РезультатМониторингаФоновыхЗаданий = ЕРЦ_ОбщийМодуль.МониторингФоновыхЗаданий(МассивФоновыхЗаданий); 
		
		Если Не РезультатМониторингаФоновыхЗаданий.Успешно Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатМониторингаФоновыхЗаданий.ОбщийРезультат);	
		КонецЕсли;  
		
	КонецЕсли;   
	
	НаборЗаписей = РегистрыСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Тип.Установить(ТипМногопоточнойОбработки);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ВосстановитьПартииМногопоточноПродолжение(ПараметрыПроцедурыОбработки) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	Оплаты_ДляОбменаWS = Таблица_Оплаты_ДляОбменаWS();
	ГраницаНачалаИтоговПартийЛС = Константы.ЕРЦ_ГраницаНачалаИтоговПартийЛС.Получить();   
	СледующийМесяц = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), 1); 
	
	Успешно			  = Истина; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРЦ_МногопоточнаяОбработкаОбъектов.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов КАК ЕРЦ_МногопоточнаяОбработкаОбъектов
	|ГДЕ
	|	ЕРЦ_МногопоточнаяОбработкаОбъектов.Тип = &Тип
	|	И ЕРЦ_МногопоточнаяОбработкаОбъектов.НомерПотока = &НомерПотока";
	
	Запрос.УстановитьПараметр("НомерПотока", ПараметрыПроцедурыОбработки.НомерПотока);
	Запрос.УстановитьПараметр("Тип", ПараметрыПроцедурыОбработки.Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда 
		Возврат;
	КонецЕсли;
	
	МассивЛС = Выборка.Данные.Получить();
	
	Для каждого ЛС Из МассивЛС Цикл 
		Данные = Новый структура("ЛицевойСчет,Оплаты_ДляОбменаWS, ГраницаНачалаИтоговПартийЛС, СледующийМесяц",
		ЛС, Оплаты_ДляОбменаWS, ГраницаНачалаИтоговПартийЛС, СледующийМесяц); 
		
		РезультатОбработкиЛС = ВосстановитьПартииВзаиморасчетовПоЛС(Данные);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрофилактикаПартийВзаиморасчетовПоЛС(ЛицевойСчет) Экспорт 
	
	Результат = Истина;      
	
	Данные = Новый Структура("ЛицевойСчет,Оплаты_ДляОбменаWS, ГраницаНачалаИтоговПартийЛС, СледующийМесяц",
	ЛицевойСчет, Таблица_Оплаты_ДляОбменаWS(),
	Константы.ЕРЦ_ГраницаНачалаИтоговПартийЛС.Получить(),
	ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),1));
	
	РезультатОбработкиЛС = ВосстановитьПартииВзаиморасчетовПоЛС(Данные);
	Если Не РезультатОбработкиЛС.Результат Тогда
		Результат = Ложь;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Ошибка восстановления партий по лицевому счету %1:%2", ЛицевойСчет, РезультатОбработкиЛС.ОписаниеОшибки));
	КонецЕсли; 	
	
	Возврат Результат;
	
КонецФункции
 
// Функция восстанавливает партии взаиморасчетов по 1 лицевому счету, если необходимо
//
// Параметры:
//  ДопПараметры  - Данные - структура данных необходимых для работы
//					Поля:
//							ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета
//							Оплаты_ДляОбменаWS - ТаблицаЗначений - заполняется из Таблица_Оплаты_ДляОбменаWS()
//							ГраницаНачалаИтоговПартийЛС - Дата - Константы.ЕРЦ_ГраницаНачалаИтоговПартийЛС.Получить()
//							СледующийМесяц - Дата - ДобавитьМесяц(НачалоМесяца(ТекущаяДата()),1)
//								
//
// Возвращаемое значение:
//   Структура - СтруктураВозврата.Результат = Истина если нет ошибок
//
Функция ВосстановитьПартииВзаиморасчетовПоЛС(Данные) Экспорт 
	
	СтруктураВозврата = Новый Структура("Результат,ОписаниеОшибки",Истина,"");
		
	Попытка            
		
		НачатьТранзакцию();
		
		//Ставим блокировку, чтобы в процессе обработки ЛС из очереди
		//пользователь не смог занести его снова в очередь
		//Если не ставить блокировку - можно удалить из очереди ЛС, который нужно будет снова рассчитать
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС");
		ЭлементБлокировки.УстановитьЗначение("ЛицевойСчет", Данные.ЛицевойСчет);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();    
		
		//Мы получили ЛС из очереди, но использовать ПериодОстатков нельзя безопасно.
		//После получения регламентом ЛС и ПериодОстатков из очереди ДО установки блокировки
		//считанная ранее запись может быть изменена/удалена  
		//Поэтому после установки блокировки нужно считать данные повторно
		ЗапросПерестраховка = Новый Запрос;
		ЗапросПерестраховка.УстановитьПараметр("ЛицевойСчет", Данные.ЛицевойСчет);
		ЗапросПерестраховка.Текст = 
		"ВЫБРАТЬ
		|	ЕРЦ_ОчередьВосстановленияПартийЛС.ПериодОстатков КАК ПериодОстатков,
		|	ЕРЦ_ОчередьВосстановленияПартийЛС.АнализВсехОплат КАК АнализВсехОплат
		|ИЗ
		|	РегистрСведений.ЕРЦ_ОчередьВосстановленияПартийЛС КАК ЕРЦ_ОчередьВосстановленияПартийЛС
		|ГДЕ
		|	ЕРЦ_ОчередьВосстановленияПартийЛС.ЛицевойСчет = &ЛицевойСчет";
		
		ВыборкаПерестраховка = ЗапросПерестраховка.Выполнить().Выбрать();
		
		Если ВыборкаПерестраховка.Количество() = 0 Тогда   
			ЗафиксироватьТранзакцию();
			Возврат СтруктураВозврата;
		КонецЕсли;  
		
		ВыборкаПерестраховка.Следующий();
		
		Данные.Оплаты_ДляОбменаWS.Очистить();
		
		РеестрыДляОбменаWS = ОбменСWS_ПолучитьРеестры(Данные.ЛицевойСчет);
		
		Если РеестрыДляОбменаWS.Количество() > 0 и ВыборкаПерестраховка.АнализВсехОплат Тогда 
			
			//Если необходим АнализВсехОплат, тогда нужно взять все движения
			//но зафиксировать в регистре только с нужного периода остатков
			//(чтобы не записывать повторно ранее записанные данные)
			//Все движения берутся для заполнения всех оплат по нужным партиям
			//эти оплаты потом используется при обмене с WS
			
			ДанныеПоЛС = Новый Соответствие;
			ДанныеПоЛС.Вставить(Данные.ЛицевойСчет, Новый Структура(
			"Партии,Оплаты_ДляОбменаWS,РеестрыДляОбменаWS,ИсточникиОплатПоСуду",
			РеестрыДляОбменаWS.ВыгрузитьКолонку("Партия"),
			Данные.Оплаты_ДляОбменаWS,
			РеестрыДляОбменаWS,
			Новый Соответствие));
			
			ПериодОстатков = '00010101';  
			
			Если ЗначениеЗаполнено(ВыборкаПерестраховка.ПериодОстатков) Тогда
				НачалоФиксацииИтоговВРегистре = ВыборкаПерестраховка.ПериодОстатков;
			Иначе
				НачалоФиксацииИтоговВРегистре = Данные.ГраницаНачалаИтоговПартийЛС;
			КонецЕсли; 
			
		Иначе 
			ДанныеПоЛС = Неопределено;
			ПериодОстатков = ВыборкаПерестраховка.ПериодОстатков;  
			НачалоФиксацииИтоговВРегистре = Данные.ГраницаНачалаИтоговПартийЛС;
		КонецЕсли;  
		
		ЗапросВнутр = Новый Запрос;
		ЗапросВнутр.Текст = 
		"ВЫБРАТЬ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Организация КАК Организация,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Услуга КАК Услуга,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.МесяцНачисления КАК МесяцНачисления,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Договор КАК Договор,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ВидНачисления КАК ВидНачисления,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия КАК Партия,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
		|ИЗ
		|	РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
		|ГДЕ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков = &ПредыдущийПериодОстатков
		|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет = &ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период КАК Период,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор КАК Регистратор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения КАК ВидДвижения,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Организация КАК Организация,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга КАК Услуга,
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцНачисления, МЕСЯЦ), ДЕНЬ) КАК МесяцНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Договор КАК Договор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления КАК ВидНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления КАК СуммаНачисления,
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, МЕСЯЦ), ДЕНЬ) КАК Партия
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет = &ЛицевойСчет
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период >= &ПериодОстатков
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &СледующийМесяц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		ЗапросВнутр.УстановитьПараметр("ЛицевойСчет", Данные.ЛицевойСчет);
		ЗапросВнутр.УстановитьПараметр("ПериодОстатков", ПериодОстатков); 
		ЗапросВнутр.УстановитьПараметр("ПредыдущийПериодОстатков", ДобавитьМесяц(ПериодОстатков, -1));
		ЗапросВнутр.УстановитьПараметр("СледующийМесяц", Данные.СледующийМесяц);
		
		РезультатЗапроса = ЗапросВнутр.ВыполнитьПакет();
		Остатки = РезультатЗапроса[0].Выгрузить();
		Движения = РезультатЗапроса[1].Выгрузить();
		
		ЛицевыеСчета = Новый Массив;
		ЛицевыеСчета.Добавить(Данные.ЛицевойСчет);  
		
		НаложитьДвиженияНаИтогиПартийВзаиморасчетовЛС(Остатки, Движения, ЛицевыеСчета, ПериодОстатков, Истина, ДанныеПоЛС, НачалоФиксацииИтоговВРегистре);
		
		Если РеестрыДляОбменаWS.Количество() > 0 Тогда
			Если ВыборкаПерестраховка.АнализВсехОплат Тогда
				Данные.Оплаты_ДляОбменаWS.Свернуть("payment_date,billing_month,court_payment,registry_number,registry_data", "sum");  
				ОбменСWS_ОбновитьИнформацию(Данные.ЛицевойСчет, Данные.Оплаты_ДляОбменаWS, Ложь, Ложь, Истина);				
			Иначе 
				ОбменСWS_ОбновитьИнформацию(Данные.ЛицевойСчет, Неопределено, Ложь, Ложь, Истина);				
			КонецЕсли;  
		КонецЕсли; 
		
		//удалим ЛС из очереди
		НаборЗаписей = РегистрыСведений.ЕРЦ_ОчередьВосстановленияПартийЛС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЛицевойСчет.Установить(Данные.ЛицевойСчет);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();   
		
	Исключение      
				
		ОтменитьТранзакцию(); 
		
		СтруктураВозврата.Результат = Ложь;
		СтруктураВозврата.ОписаниеОшибки = ОписаниеОшибки();
		
	КонецПопытки; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

//Для отчета отчета(может быть внешним) "ОтчетПоОплатамДолгов" используется "ДобавлятьОстатки"
//Там не нужно добавлять записи в таблицу с остатками, т.к. требуется видеть картину, только по старым партиям
//а добавление идет только новых партий и пустых(авансов).
Процедура НаложитьДвиженияНаИтогиПартийВзаиморасчетовЛС(Остатки, Движения, ЛицевыеСчета, Знач ПериодОстатков, ОбновлятьИтогиРегистра, ДанныеПоЛС = Неопределено, НачалоФиксацииИтоговВРегистре, ИндексыТЗОстатки = Неопределено, ДобавлятьОстатки = Истина, ДопПараметры = Неопределено) Экспорт 
		
	ПустаяПартия = '00010101';  
	ПоследнийПериод = НачалоМесяца(ТекущаяДата());   
		
	Если ПериодОстатков = '00010101' Тогда 
		//Если ПериодОстатков = '00010101', значит ЕРЦ_ИтогиПартийВзаиморасчетовЛС по ЛС должен быть полностью очищен
		//Иначе в случае, когда движения изчезают - могут остаться остатки в этом регистре
		//Если сделать для профилактики очистку - при росте регистра будут рости ТОРМОЗА   
		
		//Если нужен полный пересчет ЛС: нужно указывать дату первого документа в базе
		//Тогда регистр заполнится с НачалоФиксацииИтоговВРегистре до ЕРЦ_ГраницаИтоговПартийЛС.
		//Если есть движения до НачалоФиксацииИтоговВРегистре - они очистяться регламентом Регламент_ВосстановитьПартииВзаиморасчетовПоЛС 
		//Если движений нет - почистится просто от НачалоФиксацииИтоговВРегистре до ЕРЦ_ГраницаИтоговПартийЛС.
		Если Движения.Количество() = 0 Тогда 
			//Указываем период остатков позже последнего периода
			//Чтобы никаких действий больше делалось
			ПериодОстатков = ДобавитьМесяц(ПоследнийПериод, 1);
		Иначе 
			ПериодОстатков = НачалоМесяца(Движения[0].Период);	
		КонецЕсли; 
	КонецЕсли;  
	
	Для каждого Стр Из Движения Цикл
		
		ПервыйВызов = Истина; 
		
		Пока ПериодОстатков < НачалоМесяца(Стр.Период) Цикл
			//Фиксируем остатки по месяцам 
			
			ПроцедурыФиксацииПартийПриПереключенииМесяца(Остатки, ЛицевыеСчета, ПериодОстатков, ОбновлятьИтогиРегистра, ПервыйВызов, НачалоФиксацииИтоговВРегистре, ИндексыТЗОстатки); 
			ПервыйВызов = Ложь;
			
		КонецЦикла;
									
		Если Стр.ВидДвижения = ВидДвиженияНакопления.Приход Тогда  
			Если Стр.СуммаНачисления > 0 Тогда
				СуммаОстаток = Стр.СуммаНачисления;
				ЭтоНачисление = Истина;	
			Иначе
				СуммаОстаток = -Стр.СуммаНачисления;
				ЭтоНачисление = Ложь;	
			КонецЕсли; 
		Иначе 
			Если Стр.СуммаНачисления > 0 Тогда
				СуммаОстаток = Стр.СуммаНачисления;
				ЭтоНачисление = Ложь;	
			Иначе
				СуммаОстаток = -Стр.СуммаНачисления;
				ЭтоНачисление = Истина;	
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЭтоНачисление Тогда
							
			//ПустыеПартии это переплаты, которые необходимо списать
			ПустыеПартии = Остатки.НайтиСтроки(Новый Структура("Организация,ЛицевойСчет,Услуга,МесяцНачисления,Договор,ВидНачисления,Партия",
			Стр.Организация, Стр.ЛицевойСчет, Стр.Услуга, Стр.МесяцНачисления, Стр.Договор, Стр.ВидНачисления, ПустаяПартия));
			
			Для каждого СтрПустаяПартия Из ПустыеПартии Цикл
				
				КСписанию = Мин(СуммаОстаток, -СтрПустаяПартия.СуммаНачисленияОстаток); //остатки с минусом, поэтому проверяем по модулю  
				
				Если КСписанию > 0 Тогда
					
					//Уменьшаем остаток для списания
					//А так же уменьшаем Остаток пустой партии(сохраним это в таблице с остатками)
					СуммаОстаток = СуммаОстаток - КСписанию;
					СтрПустаяПартия.СуммаНачисленияОстаток = СтрПустаяПартия.СуммаНачисленияОстаток + КСписанию;//остатки авансов минусовые
					
				КонецЕсли; 
				
			КонецЦикла;  
							
			//Если остались деньги для начисления долга
			//То добавляем партию = дате регистратора
			Если СуммаОстаток > 0 Тогда
				
				Если ДобавлятьОстатки Тогда
					//Дополним таблицу остатков
					НовЗаписьОстатков = Остатки.Добавить();                
					ЗаполнитьЗначенияСвойств(НовЗаписьОстатков, Стр);
					НовЗаписьОстатков.СуммаНачисленияОстаток = СуммаОстаток;   
				КонецЕсли; 
				
				ЗаполнитьИнформациюПоДвижениюПартий(ДанныеПоЛС, Стр, Стр.Партия, ЭтоНачисление, СуммаОстаток);
								
			КонецЕсли; 
			
		Иначе //ЭтоНачисление
			
			ОстаткиПоПартиям = Остатки.НайтиСтроки(Новый Структура("Организация,ЛицевойСчет,Услуга,МесяцНачисления,Договор,ВидНачисления",
			Стр.Организация, Стр.ЛицевойСчет, Стр.Услуга, Стр.МесяцНачисления, Стр.Договор, Стр.ВидНачисления));
			
			Для каждого СтрПартия Из ОстаткиПоПартиям Цикл
				
				Если СтрПартия.СуммаНачисленияОстаток < 0 Тогда 
					//это аванс
					//ранее проверка была на пустую партию
					//но из-за одного отчета пришлось ориентироваться на отрицательный остаток
					Продолжить;	
				КонецЕсли;   
				
				КСписанию = Мин(СуммаОстаток, СтрПартия.СуммаНачисленияОстаток);   
				
				Если КСписанию > 0 Тогда
					
					//Уменьшаем остаток для списания
					//А так же уменьшаем Остаток партии(сохраним это в таблице с остатками)
					СуммаОстаток = СуммаОстаток - КСписанию;
					СтрПартия.СуммаНачисленияОстаток = СтрПартия.СуммаНачисленияОстаток - КСписанию;     
					
					ЗаполнитьИнформациюПоДвижениюПартий(ДанныеПоЛС, Стр, СтрПартия.Партия, ЭтоНачисление, КСписанию);

				КонецЕсли;   
				
			КонецЦикла;  
			
			//Если остались деньги для списания долга
			//То списываем их с пустой партии 
			Если СуммаОстаток > 0 и ДобавлятьОстатки Тогда
				
				//Дополним таблицу остатков
				НовЗаписьОстатков = Остатки.Добавить();                
				ЗаполнитьЗначенияСвойств(НовЗаписьОстатков, Стр);  
								
				НовЗаписьОстатков.СуммаНачисленияОстаток = -СуммаОстаток;  
				
				НовЗаписьОстатков.Партия = ПустаяПартия;
				
			КонецЕсли; 
			
		КонецЕсли;//ЭтоНачисление 		
		
	КонецЦикла;  
	
	ПервыйВызов = Истина; 
	
	//Делаем помесячную фиксацию в самом конце, только если нужно
	//записывать итоги в регистр
	Если ОбновлятьИтогиРегистра Тогда
		
		Пока ПериодОстатков <= ПоследнийПериод Цикл
			
			ПроцедурыФиксацииПартийПриПереключенииМесяца(Остатки, ЛицевыеСчета, ПериодОстатков, ОбновлятьИтогиРегистра, ПервыйВызов, НачалоФиксацииИтоговВРегистре, ИндексыТЗОстатки);
			ПервыйВызов = Ложь;
			
		КонецЦикла;
		
	КонецЕсли; 
			
КонецПроцедуры   

Процедура ЗаполнитьИнформациюПоДвижениюПартий(ДанныеПоЛС, Стр, Партия, ЭтоНачисление, Сумма)
	
	Если ЭтоНачисление Тогда
		Множитель = -1;
	Иначе
		Множитель = 1;
	КонецЕсли; 
	
	Если ДанныеПоЛС <> Неопределено Тогда
		
		СтруктураПоЛС = ДанныеПоЛС.Получить(Стр.ЛицевойСчет);	
		
		Если СтруктураПоЛС <> Неопределено и
			СтруктураПоЛС.Партии.Найти(Партия) <> Неопределено Тогда
			
			//История партий используется в отчете "РасчетЗадолженностиЗаявление"(отчет бух. справка)
			Если СтруктураПоЛС.Свойство("ИсторияПартий") Тогда 
				
				НовЗаписьДвиженияПартий = СтруктураПоЛС.ИсторияПартий.Добавить(); 
				ЗаполнитьЗначенияСвойств(НовЗаписьДвиженияПартий, Стр); 
				
				НовЗаписьДвиженияПартий.Партия = Партия;
				
				Если Стр.ЭтоПени Тогда
					НовЗаписьДвиженияПартий.Пени = -Сумма * Множитель;
				ИначеЕсли Стр.ЭтоКорректировка Тогда 
					НовЗаписьДвиженияПартий.Корректировка = -Сумма * Множитель;
				ИначеЕсли Стр.ЭтоЛьгота Тогда 
					НовЗаписьДвиженияПартий.Льготы = Сумма * Множитель;
				ИначеЕсли Стр.ЭтоОплата Тогда 
					НовЗаписьДвиженияПартий.Оплата = Сумма * Множитель;
					НовЗаписьДвиженияПартий.ДатаОплата = Стр.Период;
				Иначе 	
					НовЗаписьДвиженияПартий.Начислено = -Сумма * Множитель;
				КонецЕсли;
				
			КонецЕсли;//ИсторияПартий
			
			//Используется для обмена с WS
			Если СтруктураПоЛС.Свойство("Оплаты_ДляОбменаWS") Тогда 
				
				Если ТипЗнч(Стр.Регистратор) = Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
										
					ОплатаПоСуду = СтруктураПоЛС.ИсточникиОплатПоСуду.Получить(Стр.Регистратор);
					
					Если ОплатаПоСуду = Неопределено Тогда
						
						Запрос = Новый Запрос; 
						Запрос.УстановитьПараметр("Ссылка",Стр.Регистратор );
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	КВП_РегистрацияОплаты.Ссылка КАК Ссылка,
						|	ПОДСТРОКА(КВП_РегистрацияОплаты.ИсточникОплаты.Наименование, 0, 4) = ""СУД_"" КАК ОплатаПоСуду
						|ИЗ
						|	Документ.КВП_РегистрацияОплаты КАК КВП_РегистрацияОплаты
						|ГДЕ
						|	КВП_РегистрацияОплаты.Ссылка = &Ссылка";
						
						Выборка = Запрос.Выполнить().Выбрать();
						
						Если Выборка.Следующий() Тогда 
							
							СтруктураПоЛС.ИсточникиОплатПоСуду.Вставить(Выборка.Ссылка, Выборка.ОплатаПоСуду); 
							ОплатаПоСуду = Выборка.ОплатаПоСуду;
						КонецЕсли;
						
					КонецЕсли; 
					
					НовЗаписьДвиженияПартий = СтруктураПоЛС.Оплаты_ДляОбменаWS.Добавить(); 
					
					НовЗаписьДвиженияПартий.payment_date 				= Стр.Период;
					НовЗаписьДвиженияПартий.billing_month 				= Партия;
					НовЗаписьДвиженияПартий.court_payment 				= ОплатаПоСуду;
					НовЗаписьДвиженияПартий.sum 						= Сумма * Множитель; 
					
					НСтроки = СтруктураПоЛС.РеестрыДляОбменаWS.НайтиСтроки(Новый Структура("Партия", Партия));	
					Если НСтроки.Количество() > 0 Тогда
						НовЗаписьДвиженияПартий.registry_number = НСтроки[0].НомерРеестра;	
						НовЗаписьДвиженияПартий.registry_data = НСтроки[0].ДатаРеестра;	
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли;//Оплаты_ДляОбменаWS
			
			//Используется в отчете "ОтчетПоОплатамДолгов"
			Если СтруктураПоЛС.Свойство("ИсторияПартий_ОплатаДолгов") Тогда 
				
				НовЗаписьДвиженияПартий = СтруктураПоЛС.ИсторияПартий_ОплатаДолгов.Добавить();  
				
				НовЗаписьДвиженияПартий.ЛицевойСчет = Стр.ЛицевойСчет;  
				
				Если Стр.ЭтоПеня Тогда
					НовЗаписьДвиженияПартий.Пеня = -Сумма * Множитель;
				ИначеЕсли Стр.ЭтоКорректировка Тогда 
					НовЗаписьДвиженияПартий.Корректировка = -Сумма * Множитель;
				ИначеЕсли Стр.ЭтоЛьгота Тогда 
					НовЗаписьДвиженияПартий.Льгота = Сумма * Множитель;
				ИначеЕсли Стр.ЭтоЗачет Тогда 
					НовЗаписьДвиженияПартий.Зачет = -Сумма * Множитель;
				ИначеЕсли Стр.ЭтоОплата Тогда 
					НовЗаписьДвиженияПартий.Оплата = Сумма * Множитель;
					НовЗаписьДвиженияПартий.ДатаОплаты = Стр.Период;
				ИначеЕсли Стр.ЭтоОплатаПени Тогда 
					НовЗаписьДвиженияПартий.ОплатаПени = Сумма * Множитель;
				Иначе 	
					НовЗаписьДвиженияПартий.Доначисление = -Сумма * Множитель;
				КонецЕсли;
				
			КонецЕсли;//ИсторияПартий_ОплатаДолгов
			
			//Ранее использовались для начисления пени, обработка "ерц_НачислениеПени"
			Если СтруктураПоЛС.Свойство("ПериодическиеОстатки") Тогда 
				
				НСтроки = СтруктураПоЛС.ПериодическиеОстатки.НайтиСтроки(Новый Структура("ЛицевойСчет,Партия", Стр.ЛицевойСчет, Партия));
				
				Если НСтроки.Количество() = 0 Тогда
					
					НовЗапись = СтруктураПоЛС.ПериодическиеОстатки.Добавить(); 
					
					НовЗапись.ЛицевойСчет = Стр.ЛицевойСчет;
					НовЗапись.Период = НачалоДня(Стр.Период);
					НовЗапись.Партия = Партия;
					НовЗапись.СуммаДолга = -Сумма * Множитель; 
					
				Иначе    
					
					ПослСтрока = НСтроки[НСтроки.Количество()-1];
					
					Если ПослСтрока.Период = НачалоДня(Стр.Период) Тогда
						
						ПослСтрока.СуммаДолга = ПослСтрока.СуммаДолга - Сумма * Множитель;	
						
					Иначе
						
						НовЗапись = СтруктураПоЛС.ПериодическиеОстатки.Добавить(); 
						
						НовЗапись.ЛицевойСчет = Стр.ЛицевойСчет;
						НовЗапись.Период = НачалоДня(Стр.Период);
						НовЗапись.Партия = Партия;
						НовЗапись.СуммаДолга = ПослСтрока.СуммаДолга - Сумма * Множитель; 
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли;//ПериодическиеОстатки
			
			//Сейчас использовальзуется для начисления пени, обработка "ерц_НачислениеПени"
			Если СтруктураПоЛС.Свойство("ПериодическиеОстаткиСУслугами") Тогда 
				
				НСтроки = СтруктураПоЛС.ПериодическиеОстаткиСУслугами.НайтиСтроки(Новый Структура("ЛицевойСчет,Услуга,Партия", Стр.ЛицевойСчет, Стр.Услуга, Партия));
				
				Если НСтроки.Количество() = 0 Тогда
					
					НовЗапись = СтруктураПоЛС.ПериодическиеОстаткиСУслугами.Добавить(); 
					
					НовЗапись.ЛицевойСчет = Стр.ЛицевойСчет;
					НовЗапись.Услуга = Стр.Услуга;
					НовЗапись.Период = НачалоДня(Стр.Период);
					НовЗапись.Партия = Партия;
					НовЗапись.СуммаДолга = -Сумма * Множитель; 
					
				Иначе    
					
					ПослСтрока = НСтроки[НСтроки.Количество()-1];
					
					Если ПослСтрока.Период = НачалоДня(Стр.Период) Тогда
						
						ПослСтрока.СуммаДолга = ПослСтрока.СуммаДолга - Сумма * Множитель;	
						
					Иначе
						
						НовЗапись = СтруктураПоЛС.ПериодическиеОстаткиСУслугами.Добавить(); 
						
						НовЗапись.ЛицевойСчет = Стр.ЛицевойСчет;
						НовЗапись.Услуга = Стр.Услуга;
						НовЗапись.Период = НачалоДня(Стр.Период);
						НовЗапись.Партия = Партия;
						НовЗапись.СуммаДолга = ПослСтрока.СуммаДолга - Сумма * Множитель; 
						
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли;//ПериодическиеОстаткиСУслугами
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроцедурыФиксацииПартийПриПереключенииМесяца(Остатки, ЛицевыеСчета, ПериодОстатков, ОбновлятьИтогиРегистра, ПервыйВызов, НачалоФиксацииИтоговВРегистре, ИндексыТЗОстатки)
	
	Если ПервыйВызов Тогда
		СвернутьИтогиПартийЛС(Остатки, ИндексыТЗОстатки);
	КонецЕсли; 
	
	Если ОбновлятьИтогиРегистра и ПериодОстатков >= НачалоФиксацииИтоговВРегистре Тогда
		ЗафиксироватьИтогиПартийЛС(ЛицевыеСчета, ПериодОстатков, Остатки);   
	КонецЕсли;     
	
	ПериодОстатков = ДобавитьМесяц(ПериодОстатков, 1);

КонецПроцедуры

Процедура СвернутьИтогиПартийЛС(Остатки, ИндексыТЗОстатки)
	
	Остатки.Свернуть("Организация,ЛицевойСчет,Услуга,МесяцНачисления,Договор,ВидНачисления,Партия", "СуммаНачисленияОстаток"); 
	
	//Свертка удаляет индекс
	Если ЗначениеЗаполнено(ИндексыТЗОстатки) Тогда
		Для каждого ИндексСтрока Из ИндексыТЗОстатки Цикл
			Остатки.Индексы.Добавить(ИндексСтрока);
		КонецЦикла;
	КонецЕсли; 
	
	МассивПустыхОстатков = Новый Массив;
	Для каждого СтрОстатки Из Остатки Цикл
		Если СтрОстатки.СуммаНачисленияОстаток = 0 Тогда
			МассивПустыхОстатков.Добавить(СтрОстатки);	
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрУд Из МассивПустыхОстатков Цикл
		Остатки.Удалить(СтрУд);
	КонецЦикла; 
	
	Остатки.Сортировать("Партия");

КонецПроцедуры
 
Процедура ЗафиксироватьИтогиПартийЛС(ЛицевыеСчета, ПериодОстатков, Остатки) Экспорт 
	
	Для каждого ЛицевойСчет Из ЛицевыеСчета Цикл
		
		НаборЗаписей = РегистрыСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодОстатков.Установить(ПериодОстатков);
		НаборЗаписей.Отбор.ЛицевойСчет.Установить(ЛицевойСчет);
		
		Для каждого СтрОстатки Из Остатки.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет)) Цикл
			НовЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрОстатки);  
			НовЗапись.ПериодОстатков = ПериодОстатков;
		КонецЦикла;  
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

//вариант с услугами
//Расчет пеней осуществляется на основании периодических остатков партий(остатки при каждом изменении суммы)
//Так же периодичность дополняется периодами, когда менялась ставка ЦБ.
//Остатки по партиям хранятся в РС "ЕРЦ_ИтогиПартийВзаиморасчетовЛС" помесячно, по аналогии с тем как хранятся остатки
//регистров накопления.
//Ввиду этого невозможно получить периодические остатки запросом(без сложных махинаций с запросами)  
//
//Расчет пеней осуществляется каждый раз полностью до ДатаСреза(дата документа НачислениеПени)с разбивкой по месяцам.
//Но в документ попадают суммы, которые относятся только к нужному месяцу(прошлый месяц относительно даты НачислениеПени)
//
//Разбивка по месяцам дает возможность делать расчет(и расшифровку) за любой отдельный месяц корректно(не будет расхождения
//в копейках, которое бывает при сравнении данных, полученных различными алгоритмами) и далее сравнить
//с полной расшифровкой по лицевому счету(в полной расшифровке тоже идет помясячная разбивка).
//
Функция ПолучитьРасчетПенейСУслугами(ЛицевыеСчета = Неопределено, МесяцыРасчета = Неопределено, ДатаСреза, ПартииЛС = Неопределено, ДопПараметры = Неопределено) Экспорт 
		
    // общее число разрядов - 10, число дробной части - 2
    КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
    ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
 
    // максимальная длина строки - 20 символов
    КвалификаторыСтроки = Новый КвалификаторыСтроки(20);
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
 
    // храниться только дата, без времени
    КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
    ОписаниеДаты = Новый ОписаниеТипов("Дата", , ,КвалификаторыДаты);  
	
	Остатки = Новый ТаблицаЗначений;
	Остатки.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	Остатки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Остатки.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	Остатки.Колонки.Добавить("МесяцНачисления", ОписаниеДаты);
	Остатки.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Остатки.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыНачисленияОстатки"));
	Остатки.Колонки.Добавить("Партия", ОписаниеДаты);
	Остатки.Колонки.Добавить("СуммаНачисленияОстаток", ОписаниеЧисла);
	
	ПериодическиеОстатки = Новый ТаблицаЗначений;
	ПериодическиеОстатки.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ПериодическиеОстатки.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ПериодическиеОстатки.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ПериодическиеОстатки.Колонки.Добавить("Партия", ОписаниеДаты);
	ПериодическиеОстатки.Колонки.Добавить("СуммаДолга", ОписаниеЧисла);
	
	ТаблицаРасчета = Новый ТаблицаЗначений;
	ТаблицаРасчета.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаРасчета.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаРасчета.Колонки.Добавить("Партия", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаНачала", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаОкончания", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаНачалаРасчетногоМесяца", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаОкончанияРасчетногоМесяца", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("СуммаДолга", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("КоэфЗначение", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("Коэф", ОписаниеСтроки);
	ТаблицаРасчета.Колонки.Добавить("Ставка", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("КолДней", ОписаниеСтроки);
	ТаблицаРасчета.Колонки.Добавить("Дней", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("СуммаПени", ОписаниеЧисла);
	
	ДанныеПоЛС = Новый Соответствие;
	Запрос = Новый Запрос;
	
	Если ПартииЛС = Неопределено Тогда
		
		//Если ДопПараметры <> Неопределено и ДопПараметры.Свойство("ПениМесяцПроверкиЗадолженности") Тогда
		//	ПериодОстатковВременный = ДопПараметры.ПениМесяцПроверкиЗадолженности;	
		//Иначе 
		//	ПериодОстатковВременный = Справочники.ЕРЦ_ТехническийСправочник.НайтиПоНаименованию("ПениМесяцПроверкиЗадолженности",Истина).Значение;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(ПериодОстатковВременный) Тогда
		//	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатковВременный);
		//Иначе              
		//	//если не указан период в каком смотреть долги по партиям, значит
		//	//будет смотреть в прошлый месяц от ДатыСреза
		//	Запрос.УстановитьПараметр("ПериодОстатков", НачалоМесяца(ДобавитьМесяц(ДатаСреза, -1)));
		//КонецЕсли;     
		Запрос.УстановитьПараметр("ПериодОстатков", ДопПараметры.МесяцПроверкиЗадолженности);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия КАК Партия,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
		|ГДЕ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков = &ПериодОстатков
		|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
		|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет В (&ЛицевыеСчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СуммаНачисленияОстаток) > 0
		|ИТОГИ ПО
		|	ЛицевойСчет";
		
		Если ЛицевыеСчета = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет В (&ЛицевыеСчета)", "ИСТИНА");
		Иначе
			Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
		КонецЕсли;  
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаЛицевойСчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЛицевойСчет.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаЛицевойСчет.Выбрать();
			
			Партии = Новый Массив;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Партии.Добавить(ВыборкаДетальныеЗаписи.Партия);
			КонецЦикла;  
			
			ДанныеПоЛС.Вставить(ВыборкаЛицевойСчет.ЛицевойСчет, Новый Структура("Партии,ПериодическиеОстаткиСУслугами", Партии, ПериодическиеОстатки));
			
		КонецЦикла;
		
	Иначе  
		
		//Если указаны партии, то и лицевые счета точно есть
		Для каждого КлючЗначение Из ПартииЛС Цикл
			
			ДанныеПоЛС.Вставить(КлючЗначение.Ключ, Новый Структура("Партии,ПериодическиеОстаткиСУслугами", КлючЗначение.Значение, ПериодическиеОстатки));
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если ДопПараметры <> Неопределено и ДопПараметры.Свойство("Движения") Тогда
		
		Движения = ДопПараметры.Движения;
		
	Иначе
		
		Запрос.Текст =   
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(КВП_УчетнаяПолитикаТСЖСрезПоследних.ИспользоватьУслугиИсключенияПриРасчетеПени, ЛОЖЬ) КАК ИспользоватьУслугиИсключенияПриРасчетеПени,
		|	ЕСТЬNULL(КВП_УчетнаяПолитикаТСЖСрезПоследних.НастройкаРасчетаПени.НачислятьПениНаЗакрытыеЛицевыеСчета, ЛОЖЬ) КАК НачислятьПениНаЗакрытыеЛицевыеСчета
		|ПОМЕСТИТЬ Политика
		|ИЗ
		|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(&Период, Организация = &Организация) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ ЗакрытыеЛС
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период < &ДатаСреза
		|	И КВП_ЛицевыеСчета.ЛицевойСчет В(&ЛицевыеСчета)
		|	И ЛОЖЬ В
		|			(ВЫБРАТЬ
		|				Политика.НачислятьПениНаЗакрытыеЛицевыеСчета КАК НачислятьПениНаЗакрытыеЛицевыеСчета
		|			ИЗ
		|				Политика КАК Политика)
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЛицевыеСчета.ЛицевойСчет
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КВП_ЛицевыеСчета.Регистратор ССЫЛКА Документ.КВП_ЗакрытиеЛицевогоСчета
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_УслугиИсключенияДляНачисленияПени.Услуга КАК Услуга
		|ПОМЕСТИТЬ УслугиИсключения
		|ИЗ
		|	РегистрСведений.КВП_УслугиИсключенияДляНачисленияПени КАК КВП_УслугиИсключенияДляНачисленияПени
		|ГДЕ
		|	КВП_УслугиИсключенияДляНачисленияПени.Организация = &Организация
		|	И ИСТИНА В
		|			(ВЫБРАТЬ
		|				Политика.ИспользоватьУслугиИсключенияПриРасчетеПени КАК ИспользоватьУслугиИсключенияПриРасчетеПени
		|			ИЗ
		|				Политика КАК Политика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период КАК Период,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор КАК Регистратор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения КАК ВидДвижения,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Организация КАК Организация,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга КАК Услуга,
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцНачисления, МЕСЯЦ), ДЕНЬ) КАК МесяцНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Договор КАК Договор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления КАК ВидНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления КАК СуммаНачисления,
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, МЕСЯЦ), ДЕНЬ) КАК Партия
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ УслугиИсключения КАК УслугиИсключения
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга = УслугиИсключения.Услуга
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеЛС КАК ЗакрытыеЛС
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет = ЗакрытыеЛС.ЛицевойСчет
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет В(&ЛицевыеСчета)
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &ДатаСреза
		|	И УслугиИсключения.Услуга ЕСТЬ NULL
		|	И ЗакрытыеЛС.ЛицевойСчет ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
		Запрос.УстановитьПараметр("Организация", ДопПараметры.Организация);
		Запрос.УстановитьПараметр("Период", ДатаСреза-1);
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Движения = Новый ТаблицаЗначений; 
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			
			Движения.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			
		КонецЦикла;   
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Движения.Добавить(), Выборка);	
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ПериодОстатков = '00010101'; 
	
	ГраницаНачалаИтоговПартийЛС = Константы.ЕРЦ_ГраницаНачалаИтоговПартийЛС.Получить();
	
	ЕРЦ_ОбщийМодуль.НаложитьДвиженияНаИтогиПартийВзаиморасчетовЛС(Остатки, Движения, ЛицевыеСчета, ПериодОстатков, Ложь, ДанныеПоЛС, ГраницаНачалаИтоговПартийЛС);
	
	ПериодическиеОстатки.Сортировать("ЛицевойСчет,Услуга,Партия,Период");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодическиеОстатки", ПериодическиеОстатки);       
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);  
	//мораторий продлился 270 дней
	//поэтому если дата коэффициента попадает на этот диапазон:
	//прибавляется 270 дней
	
	Запрос.УстановитьПараметр("НачалоМоратория", '20200406'); 
	Запрос.УстановитьПараметр("КонецМоратория", '20210101'); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодическиеОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	ПериодическиеОстатки.Услуга КАК Услуга,
	|	ПериодическиеОстатки.Период КАК Период,
	|	ПериодическиеОстатки.Партия КАК Партия,
	|	ПериодическиеОстатки.СуммаДолга КАК СуммаДолга
	|ПОМЕСТИТЬ ПериодическиеОстаткиПредварительно
	|ИЗ
	|	&ПериодическиеОстатки КАК ПериодическиеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеОстаткиПредварительно.ЛицевойСчет КАК ЛицевойСчет,
	|	ПериодическиеОстаткиПредварительно.Услуга КАК Услуга,
	|	ПериодическиеОстаткиПредварительно.Период КАК Период,
	|	ПериодическиеОстаткиПредварительно.Партия КАК Партия,
	|	ПериодическиеОстаткиПредварительно.СуммаДолга КАК СуммаДолга
	|ПОМЕСТИТЬ ПериодическиеОстатки
	|ИЗ
	|	ПериодическиеОстаткиПредварительно КАК ПериодическиеОстаткиПредварительно
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабСрезПоследних.ЛицевойСчет,
	|	ТабСрезПоследних.Услуга,
	|	&ДатаСреза,
	|	ТабСрезПоследних.Партия,
	|	ТабСрезПоследних.СуммаДолга
	|ИЗ
	|	ПериодическиеОстаткиПредварительно КАК ТабСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Таб.ЛицевойСчет КАК ЛицевойСчет,
	|			Таб.Услуга КАК Услуга,
	|			Таб.Партия КАК Партия,
	|			МАКСИМУМ(Таб.Период) КАК Период
	|		ИЗ
	|			ПериодическиеОстаткиПредварительно КАК Таб
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таб.ЛицевойСчет,
	|			Таб.Услуга,
	|			Таб.Партия) КАК ВТ
	|		ПО ТабСрезПоследних.ЛицевойСчет = ВТ.ЛицевойСчет
	|			И ТабСрезПоследних.Услуга = ВТ.Услуга
	|			И ТабСрезПоследних.Партия = ВТ.Партия
	|			И ТабСрезПоследних.Период = ВТ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Дней,
	|	"""" КАК Коэф,
	|	0 КАК КоэфЗначение,
	|	""30"" КАК КолДней
	|ПОМЕСТИТЬ ВТ_НастройкаПеней
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	30,
	|	""1/300"",
	|	ВЫРАЗИТЬ(1 / 300 КАК ЧИСЛО(9, 8)),
	|	""60""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	90,
	|	""1/130"",
	|	ВЫРАЗИТЬ(1 / 130 КАК ЧИСЛО(9, 8)),
	|	""""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	ПериодическиеОстатки.Услуга КАК Услуга,
	|	ПериодическиеОстатки.Партия КАК Партия,
	|	МИНИМУМ(ПериодическиеОстатки.Период) КАК НачалоПериода,
	|	МАКСИМУМ(ПериодическиеОстатки.Период) КАК КонецПериода
	|ПОМЕСТИТЬ ДиапазоныИзмерений
	|ИЗ
	|	ПериодическиеОстатки КАК ПериодическиеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодическиеОстатки.ЛицевойСчет,
	|	ПериодическиеОстатки.Услуга,
	|	ПериодическиеОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ЛицевойСчет КАК ЛицевойСчет,
	|	ВТ.Услуга КАК Услуга,
	|	ВТ.Партия КАК Партия,
	|	ВТ.Период КАК Период,
	|	МАКСИМУМ(ВТ.СуммаДолга) КАК СуммаДолга,
	|	МАКСИМУМ(ВТ.КлючеваяСтавка) КАК КлючеваяСтавка,
	|	МАКСИМУМ(ВТ.Коэф) КАК Коэф,
	|	МАКСИМУМ(ВТ.КоэфЗначение) КАК КоэфЗначение,
	|	МАКСИМУМ(ВТ.КолДней) КАК КолДней
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодическиеОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|		ПериодическиеОстатки.Услуга КАК Услуга,
	|		ПериодическиеОстатки.Партия КАК Партия,
	|		ПериодическиеОстатки.Период КАК Период,
	|		ПериодическиеОстатки.СуммаДолга КАК СуммаДолга,
	|		NULL КАК КлючеваяСтавка,
	|		NULL КАК Коэф,
	|		NULL КАК КоэфЗначение,
	|		NULL КАК КолДней
	|	ИЗ
	|		ПериодическиеОстатки КАК ПериодическиеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапрос.ЛицевойСчет,
	|		ВложенныйЗапрос.Услуга,
	|		ВложенныйЗапрос.Партия,
	|		ВложенныйЗапрос.НачалоПериода,
	|		NULL,
	|		УПЖКХ_КлючеваяСтавкаЦБ.Размер,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДиапазоныИзмерений.ЛицевойСчет КАК ЛицевойСчет,
	|			ДиапазоныИзмерений.Услуга КАК Услуга,
	|			ДиапазоныИзмерений.Партия КАК Партия,
	|			МАКСИМУМ(УПЖКХ_КлючеваяСтавкаЦБ.Период) КАК Период,
	|			ДиапазоныИзмерений.НачалоПериода КАК НачалоПериода
	|		ИЗ
	|			ДиапазоныИзмерений КАК ДиапазоныИзмерений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_КлючеваяСтавкаЦБ КАК УПЖКХ_КлючеваяСтавкаЦБ
	|				ПО ДиапазоныИзмерений.НачалоПериода >= УПЖКХ_КлючеваяСтавкаЦБ.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДиапазоныИзмерений.ЛицевойСчет,
	|			ДиапазоныИзмерений.Услуга,
	|			ДиапазоныИзмерений.Партия,
	|			ДиапазоныИзмерений.НачалоПериода) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_КлючеваяСтавкаЦБ КАК УПЖКХ_КлючеваяСтавкаЦБ
	|			ПО ВложенныйЗапрос.Период = УПЖКХ_КлючеваяСтавкаЦБ.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДиапазоныИзмерений.ЛицевойСчет,
	|		ДиапазоныИзмерений.Услуга,
	|		ДиапазоныИзмерений.Партия,
	|		УПЖКХ_КлючеваяСтавкаЦБ.Период,
	|		NULL,
	|		УПЖКХ_КлючеваяСтавкаЦБ.Размер,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ДиапазоныИзмерений КАК ДиапазоныИзмерений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_КлючеваяСтавкаЦБ КАК УПЖКХ_КлючеваяСтавкаЦБ
	|			ПО ДиапазоныИзмерений.НачалоПериода <= УПЖКХ_КлючеваяСтавкаЦБ.Период
	|				И ДиапазоныИзмерений.КонецПериода >= УПЖКХ_КлючеваяСтавкаЦБ.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДиапазоныИзмерений.ЛицевойСчет,
	|		ДиапазоныИзмерений.Услуга,
	|		ДиапазоныИзмерений.Партия,
	|		ВЫБОР
	|			КОГДА ДиапазоныИзмерений.Партия < &НачалоМоратория
	|					И (ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней) МЕЖДУ &НачалоМоратория И &КонецМоратория)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, 270)
	|			КОГДА ДиапазоныИзмерений.Партия МЕЖДУ &НачалоМоратория И &КонецМоратория
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, РАЗНОСТЬДАТ(ДиапазоныИзмерений.Партия, &КонецМоратория, ДЕНЬ))
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней)
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		ВТ_НастройкаПеней.Коэф,
	|		ВТ_НастройкаПеней.КоэфЗначение,
	|		ВТ_НастройкаПеней.КолДней
	|	ИЗ
	|		ДиапазоныИзмерений КАК ДиапазоныИзмерений,
	|		ВТ_НастройкаПеней КАК ВТ_НастройкаПеней
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ДиапазоныИзмерений.Партия < &НачалоМоратория
	|						И (ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней) МЕЖДУ &НачалоМоратория И &КонецМоратория)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, 270)
	|				КОГДА ДиапазоныИзмерений.Партия МЕЖДУ &НачалоМоратория И &КонецМоратория
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, РАЗНОСТЬДАТ(ДиапазоныИзмерений.Партия, &КонецМоратория, ДЕНЬ))
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней)
	|			КОНЕЦ < &ДатаСреза) КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ЛицевойСчет,
	|	ВТ.Услуга,
	|	ВТ.Партия,
	|	ВТ.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ.ЛицевойСчет,
	|	ВТ.Услуга,
	|	ВТ.Партия,
	|	ВТ.Период
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	Услуга,
	|	Партия";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЛицевойСчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	
	Пока ВыборкаЛицевойСчет.Следующий() Цикл
		
		ВыборкаУслуга = ВыборкаЛицевойСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
		
		Пока ВыборкаУслуга.Следующий() Цикл
			
			ВыборкаПартия = ВыборкаУслуга.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПартия.Следующий() Цикл
				
				КэшДанных = Новый Структура;
				КэшДанных.Вставить("СуммаДолга", Null);
				КэшДанных.Вставить("КоэфЗначение", Null);
				КэшДанных.Вставить("Коэф", Null);
				КэшДанных.Вставить("КолДней", Null);
				КэшДанных.Вставить("КлючеваяСтавка", Null);
				КэшДанных.Вставить("ДатаНачала", Null);
				КэшДанных.Вставить("ДатаОкончания", Null);
				КэшДанных.Вставить("ПоследнийЗафиксированныйПериод", Неопределено);
				
				ПерваяСтрока	  				= Истина;  
				
				ВыборкаДетали = ВыборкаПартия.Выбрать();
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					//1.В таблицу попадает 1 строкой период без коэффициента
					//2.Когда коэффициент заполнен - попадание в таблицу идет помесячно
					//3.Если есть отбор по месяцам расчета - попадет период с пустым коэффициентом(одной строкой) и выбранные периоды расчета(помесячно)
					//Если образуется пробел между периодом с пустым коэффициентом и выбранным периодом расчета,
					//то дата начала будет заполнена исходя из последней сохраненной даты окончания периода в таблице
					//
					Если Не ПерваяСтрока и (ЗначениеЗаполнено(ВыборкаДетали.КоэфЗначение) или ЗначениеЗаполнено(КэшДанных.КоэфЗначение)) Тогда
						
						//Фиксируем для предыдущей выборки ДатаОкончания
						КэшДанных.Вставить("ДатаОкончания", ВыборкаДетали.Период - 86400);
						
						//И уходим добавлять записи в таблицу
						ДобавитьВТаблицуРасчетовПениСУслугами(ТаблицаРасчета, ВыборкаДетали, КэшДанных, МесяцыРасчета);
						
					КонецЕсли; 
					
					//Заполняем кэш
					КэшДанных.Вставить("СуммаДолга", ?(ВыборкаДетали.СуммаДолга       = Null, КэшДанных.СуммаДолга,    ВыборкаДетали.СуммаДолга));
					КэшДанных.Вставить("КоэфЗначение", ?(ВыборкаДетали.КоэфЗначение       = Null, КэшДанных.КоэфЗначение,    ВыборкаДетали.КоэфЗначение));
					КэшДанных.Вставить("Коэф", ?(ВыборкаДетали.Коэф = Null, КэшДанных.Коэф, ВыборкаДетали.Коэф)); 
					КэшДанных.Вставить("КолДней", ?(ВыборкаДетали.КолДней = Null, КэшДанных.КолДней, ВыборкаДетали.КолДней)); 
					КэшДанных.Вставить("ДатаНачала", ?(ВыборкаДетали.Период = Null, КэшДанных.ДатаНачала, ВыборкаДетали.Период)); 
					КэшДанных.Вставить("КлючеваяСтавка", ?(ВыборкаДетали.КлючеваяСтавка   = Null, КэшДанных.КлючеваяСтавка,  ВыборкаДетали.КлючеваяСтавка));
					
					Если ВыборкаДетали.КоэфЗначение = 0 Тогда
						
						//Значение по умолчанию
						//Получается дата с которой начинается считаться пеня  - 1 день
						//ВыборкаДетали.КоэфЗначение = 0 имеется только у первой даты расчета пени
						//В таблицу попадает дата ПоследнийЗафиксированныйПериод + 1 день в первый раз
						//а далее в ПоследнийЗафиксированныйПериод сохраняется дата последнего
						//добавленного периода в таблицу расчета пеней
						КэшДанных.Вставить("ПоследнийЗафиксированныйПериод", ВыборкаДетали.Период - 86400);	
						
					КонецЕсли; 
					
					ПерваяСтрока = Ложь;
					
				КонецЦикла; 
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

	//Уберем все строки по партии лицевого счета, если там нет пеней
	//Эту фильтрацию удобнее всего делать в самом конце
	
	ТЗ_Свертка = ТаблицаРасчета.Скопировать(,"ЛицевойСчет,Услуга,Партия,СуммаПени");
	ТЗ_Свертка.Свернуть("ЛицевойСчет,Услуга,Партия", "СуммаПени");
	
	Для каждого СтрСвертка Из ТЗ_Свертка Цикл
		Если СтрСвертка.СуммаПени = 0 Тогда
			Для каждого НСтр Из ТаблицаРасчета.НайтиСтроки(Новый Структура("ЛицевойСчет,Услуга,Партия", СтрСвертка.ЛицевойСчет,  СтрСвертка.Услуга, СтрСвертка.Партия)) Цикл
				ТаблицаРасчета.Удалить(НСтр);
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаРасчета;
	
КонецФункции   
 
//Расчет пеней осуществляется на основании периодических остатков партий(остатки при каждом изменении суммы)
//Так же периодичность дополняется периодами, когда менялась ставка ЦБ.
//Остатки по партиям хранятся в РС "ЕРЦ_ИтогиПартийВзаиморасчетовЛС" помесячно, по аналогии с тем как хранятся остатки
//регистров накопления.
//Ввиду этого невозможно получить периодические остатки запросом(без сложных махинаций с запросами)  
//
//Расчет пеней осуществляется каждый раз полностью до ДатаСреза(дата документа НачислениеПени)с разбивкой по месяцам.
//Но в документ попадают суммы, которые относятся только к нужному месяцу(прошлый месяц относительно даты НачислениеПени)
//
//Разбивка по месяцам дает возможность делать расчет(и расшифровку) за любой отдельный месяц корректно(не будет расхождения
//в копейках, которое бывает при сравнении данных, полученных различными алгоритмами) и далее сравнить
//с полной расшифровкой по лицевому счету(в полной расшифровке тоже идет помясячная разбивка).
//
Функция ПолучитьРасчетПеней(ЛицевыеСчета = Неопределено, МесяцыРасчета = Неопределено, ДатаСреза, ПартииЛС = Неопределено, ДопПараметры = Неопределено) Экспорт 
		
    // общее число разрядов - 10, число дробной части - 2
    КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
    ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
 
    // максимальная длина строки - 20 символов
    КвалификаторыСтроки = Новый КвалификаторыСтроки(20);
    ОписаниеСтроки = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
 
    // храниться только дата, без времени
    КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
    ОписаниеДаты = Новый ОписаниеТипов("Дата", , ,КвалификаторыДаты);  
	
	Остатки = Новый ТаблицаЗначений;
	Остатки.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	Остатки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Остатки.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	Остатки.Колонки.Добавить("МесяцНачисления", ОписаниеДаты);
	Остатки.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Остатки.Колонки.Добавить("ВидНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыНачисленияОстатки"));
	Остатки.Колонки.Добавить("Партия", ОписаниеДаты);
	Остатки.Колонки.Добавить("СуммаНачисленияОстаток", ОписаниеЧисла);
	
	ПериодическиеОстатки = Новый ТаблицаЗначений;
	ПериодическиеОстатки.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ПериодическиеОстатки.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ПериодическиеОстатки.Колонки.Добавить("Партия", ОписаниеДаты);
	ПериодическиеОстатки.Колонки.Добавить("СуммаДолга", ОписаниеЧисла);
	
	ТаблицаРасчета = Новый ТаблицаЗначений;
	ТаблицаРасчета.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаРасчета.Колонки.Добавить("Партия", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаНачала", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаОкончания", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаНачалаРасчетногоМесяца", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("ДатаОкончанияРасчетногоМесяца", ОписаниеДаты);
	ТаблицаРасчета.Колонки.Добавить("СуммаДолга", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("КоэфЗначение", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("Коэф", ОписаниеСтроки);
	ТаблицаРасчета.Колонки.Добавить("Ставка", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("КолДней", ОписаниеСтроки);
	ТаблицаРасчета.Колонки.Добавить("Дней", ОписаниеЧисла);
	ТаблицаРасчета.Колонки.Добавить("СуммаПени", ОписаниеЧисла);
	
	ДанныеПоЛС = Новый Соответствие;
	Запрос = Новый Запрос;
	
	Если ПартииЛС = Неопределено Тогда 
		
		Запрос.УстановитьПараметр("ПериодОстатков", ДопПараметры.МесяцПроверкиЗадолженности);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия КАК Партия,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
		|ГДЕ
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков = &ПериодОстатков
		|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
		|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет В (&ЛицевыеСчета)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия,
		|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СуммаНачисленияОстаток) > 0
		|ИТОГИ ПО
		|	ЛицевойСчет";
		
		Если ЛицевыеСчета = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет В (&ЛицевыеСчета)", "ИСТИНА");
		Иначе
			Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
		КонецЕсли;  
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаЛицевойСчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЛицевойСчет.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаЛицевойСчет.Выбрать();
			
			Партии = Новый Массив;
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Партии.Добавить(ВыборкаДетальныеЗаписи.Партия);
			КонецЦикла;  
			
			ДанныеПоЛС.Вставить(ВыборкаЛицевойСчет.ЛицевойСчет, Новый Структура("Партии,ПериодическиеОстатки", Партии, ПериодическиеОстатки));
			
		КонецЦикла;
		
	Иначе  
		
		//Если указаны партии, то и лицевые счета точно есть
		Для каждого КлючЗначение Из ПартииЛС Цикл
			
			ДанныеПоЛС.Вставить(КлючЗначение.Ключ, Новый Структура("Партии,ПериодическиеОстатки", КлючЗначение.Значение, ПериодическиеОстатки));
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если ДопПараметры <> Неопределено и ДопПараметры.Свойство("Движения") Тогда
		
		Движения = ДопПараметры.Движения;
		
	Иначе
		
		Запрос.Текст =   
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(КВП_УчетнаяПолитикаТСЖСрезПоследних.ИспользоватьУслугиИсключенияПриРасчетеПени, ЛОЖЬ) КАК ИспользоватьУслугиИсключенияПриРасчетеПени,
		|	ЕСТЬNULL(КВП_УчетнаяПолитикаТСЖСрезПоследних.НастройкаРасчетаПени.НачислятьПениНаЗакрытыеЛицевыеСчета, ЛОЖЬ) КАК НачислятьПениНаЗакрытыеЛицевыеСчета
		|ПОМЕСТИТЬ Политика
		|ИЗ
		|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(&Период, Организация = &Организация) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ ЗакрытыеЛС
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период < &ДатаСреза
		|	И КВП_ЛицевыеСчета.ЛицевойСчет В(&ЛицевыеСчета)
		|	И ЛОЖЬ В
		|			(ВЫБРАТЬ
		|				Политика.НачислятьПениНаЗакрытыеЛицевыеСчета КАК НачислятьПениНаЗакрытыеЛицевыеСчета
		|			ИЗ
		|				Политика КАК Политика)
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЛицевыеСчета.ЛицевойСчет
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КВП_ЛицевыеСчета.Регистратор ССЫЛКА Документ.КВП_ЗакрытиеЛицевогоСчета
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_УслугиИсключенияДляНачисленияПени.Услуга КАК Услуга
		|ПОМЕСТИТЬ УслугиИсключения
		|ИЗ
		|	РегистрСведений.КВП_УслугиИсключенияДляНачисленияПени КАК КВП_УслугиИсключенияДляНачисленияПени
		|ГДЕ
		|	КВП_УслугиИсключенияДляНачисленияПени.Организация = &Организация
		|	И ИСТИНА В
		|			(ВЫБРАТЬ
		|				Политика.ИспользоватьУслугиИсключенияПриРасчетеПени КАК ИспользоватьУслугиИсключенияПриРасчетеПени
		|			ИЗ
		|				Политика КАК Политика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период КАК Период,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор КАК Регистратор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения КАК ВидДвижения,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Организация КАК Организация,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга КАК Услуга,
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцНачисления, МЕСЯЦ), ДЕНЬ) КАК МесяцНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Договор КАК Договор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления КАК ВидНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления КАК СуммаНачисления,
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, МЕСЯЦ), ДЕНЬ) КАК Партия
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ УслугиИсключения КАК УслугиИсключения
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга = УслугиИсключения.Услуга
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеЛС КАК ЗакрытыеЛС
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет = ЗакрытыеЛС.ЛицевойСчет
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет В(&ЛицевыеСчета)
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &ДатаСреза
		|	И УслугиИсключения.Услуга ЕСТЬ NULL
		|	И ЗакрытыеЛС.ЛицевойСчет ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
		Запрос.УстановитьПараметр("Организация", ДопПараметры.Организация);
		Запрос.УстановитьПараметр("Период", ДатаСреза-1);
		Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
				
		РезультатЗапроса = Запрос.Выполнить();
		
		Движения = Новый ТаблицаЗначений; 
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			
			Движения.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
			
		КонецЦикла;   
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Движения.Добавить(), Выборка);	
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ПериодОстатков = '00010101'; 
	
	ГраницаНачалаИтоговПартийЛС = Константы.ЕРЦ_ГраницаНачалаИтоговПартийЛС.Получить();
	
	ЕРЦ_ОбщийМодуль.НаложитьДвиженияНаИтогиПартийВзаиморасчетовЛС(Остатки, Движения, ЛицевыеСчета, ПериодОстатков, Ложь, ДанныеПоЛС, ГраницаНачалаИтоговПартийЛС);
		
	ПериодическиеОстатки.Сортировать("ЛицевойСчет,Партия,Период");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодическиеОстатки", ПериодическиеОстатки);       
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);  
	//мораторий продлился 270 дней
	//поэтому если дата коэффициента попадает на этот диапазон:
	//прибавляется 270 дней
	
	Запрос.УстановитьПараметр("НачалоМоратория", '20200406'); 
	Запрос.УстановитьПараметр("КонецМоратория", '20210101'); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодическиеОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	ПериодическиеОстатки.Период КАК Период,
	|	ПериодическиеОстатки.Партия КАК Партия,
	|	ПериодическиеОстатки.СуммаДолга КАК СуммаДолга
	|ПОМЕСТИТЬ ПериодическиеОстаткиПредварительно
	|ИЗ
	|	&ПериодическиеОстатки КАК ПериодическиеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеОстаткиПредварительно.ЛицевойСчет КАК ЛицевойСчет,
	|	ПериодическиеОстаткиПредварительно.Период КАК Период,
	|	ПериодическиеОстаткиПредварительно.Партия КАК Партия,
	|	ПериодическиеОстаткиПредварительно.СуммаДолга КАК СуммаДолга
	|ПОМЕСТИТЬ ПериодическиеОстатки
	|ИЗ
	|	ПериодическиеОстаткиПредварительно КАК ПериодическиеОстаткиПредварительно
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабСрезПоследних.ЛицевойСчет,
	|	&ДатаСреза,
	|	ТабСрезПоследних.Партия,
	|	ТабСрезПоследних.СуммаДолга
	|ИЗ
	|	ПериодическиеОстаткиПредварительно КАК ТабСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Таб.ЛицевойСчет КАК ЛицевойСчет,
	|			Таб.Партия КАК Партия,
	|			МАКСИМУМ(Таб.Период) КАК Период
	|		ИЗ
	|			ПериодическиеОстаткиПредварительно КАК Таб
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таб.ЛицевойСчет,
	|			Таб.Партия) КАК ВТ
	|		ПО ТабСрезПоследних.ЛицевойСчет = ВТ.ЛицевойСчет
	|			И ТабСрезПоследних.Партия = ВТ.Партия
	|			И ТабСрезПоследних.Период = ВТ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК Дней,
	|	"""" КАК Коэф,
	|	0 КАК КоэфЗначение,
	|	""30"" КАК КолДней
	|ПОМЕСТИТЬ ВТ_НастройкаПеней
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	30,
	|	""1/300"",
	|	ВЫРАЗИТЬ(1 / 300 КАК ЧИСЛО(9, 8)),
	|	""60""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	90,
	|	""1/130"",
	|	ВЫРАЗИТЬ(1 / 130 КАК ЧИСЛО(9, 8)),
	|	""""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	ПериодическиеОстатки.Партия КАК Партия,
	|	МИНИМУМ(ПериодическиеОстатки.Период) КАК НачалоПериода,
	|	МАКСИМУМ(ПериодическиеОстатки.Период) КАК КонецПериода
	|ПОМЕСТИТЬ ДиапазоныИзмерений
	|ИЗ
	|	ПериодическиеОстатки КАК ПериодическиеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодическиеОстатки.ЛицевойСчет,
	|	ПериодическиеОстатки.Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ЛицевойСчет КАК ЛицевойСчет,
	|	ВТ.Партия КАК Партия,
	|	ВТ.Период КАК Период,
	|	МАКСИМУМ(ВТ.СуммаДолга) КАК СуммаДолга,
	|	МАКСИМУМ(ВТ.КлючеваяСтавка) КАК КлючеваяСтавка,
	|	МАКСИМУМ(ВТ.Коэф) КАК Коэф,
	|	МАКСИМУМ(ВТ.КоэфЗначение) КАК КоэфЗначение,
	|	МАКСИМУМ(ВТ.КолДней) КАК КолДней
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодическиеОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|		ПериодическиеОстатки.Партия КАК Партия,
	|		ПериодическиеОстатки.Период КАК Период,
	|		ПериодическиеОстатки.СуммаДолга КАК СуммаДолга,
	|		NULL КАК КлючеваяСтавка,
	|		NULL КАК Коэф,
	|		NULL КАК КоэфЗначение,
	|		NULL КАК КолДней
	|	ИЗ
	|		ПериодическиеОстатки КАК ПериодическиеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапрос.ЛицевойСчет,
	|		ВложенныйЗапрос.Партия,
	|		ВложенныйЗапрос.НачалоПериода,
	|		NULL,
	|		УПЖКХ_КлючеваяСтавкаЦБ.Размер,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДиапазоныИзмерений.ЛицевойСчет КАК ЛицевойСчет,
	|			ДиапазоныИзмерений.Партия КАК Партия,
	|			МАКСИМУМ(УПЖКХ_КлючеваяСтавкаЦБ.Период) КАК Период,
	|			ДиапазоныИзмерений.НачалоПериода КАК НачалоПериода
	|		ИЗ
	|			ДиапазоныИзмерений КАК ДиапазоныИзмерений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_КлючеваяСтавкаЦБ КАК УПЖКХ_КлючеваяСтавкаЦБ
	|				ПО ДиапазоныИзмерений.НачалоПериода >= УПЖКХ_КлючеваяСтавкаЦБ.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДиапазоныИзмерений.ЛицевойСчет,
	|			ДиапазоныИзмерений.Партия,
	|			ДиапазоныИзмерений.НачалоПериода) КАК ВложенныйЗапрос
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_КлючеваяСтавкаЦБ КАК УПЖКХ_КлючеваяСтавкаЦБ
	|			ПО ВложенныйЗапрос.Период = УПЖКХ_КлючеваяСтавкаЦБ.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДиапазоныИзмерений.ЛицевойСчет,
	|		ДиапазоныИзмерений.Партия,
	|		УПЖКХ_КлючеваяСтавкаЦБ.Период,
	|		NULL,
	|		УПЖКХ_КлючеваяСтавкаЦБ.Размер,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ДиапазоныИзмерений КАК ДиапазоныИзмерений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_КлючеваяСтавкаЦБ КАК УПЖКХ_КлючеваяСтавкаЦБ
	|			ПО ДиапазоныИзмерений.НачалоПериода <= УПЖКХ_КлючеваяСтавкаЦБ.Период
	|				И ДиапазоныИзмерений.КонецПериода >= УПЖКХ_КлючеваяСтавкаЦБ.Период
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДиапазоныИзмерений.ЛицевойСчет,
	|		ДиапазоныИзмерений.Партия,
	|		ВЫБОР
	|			КОГДА ДиапазоныИзмерений.Партия < &НачалоМоратория
	|					И (ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней) МЕЖДУ &НачалоМоратория И &КонецМоратория)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, 270)
	|			КОГДА ДиапазоныИзмерений.Партия МЕЖДУ &НачалоМоратория И &КонецМоратория
	|				ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, РАЗНОСТЬДАТ(ДиапазоныИзмерений.Партия, &КонецМоратория, ДЕНЬ))
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней)
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		ВТ_НастройкаПеней.Коэф,
	|		ВТ_НастройкаПеней.КоэфЗначение,
	|		ВТ_НастройкаПеней.КолДней
	|	ИЗ
	|		ДиапазоныИзмерений КАК ДиапазоныИзмерений,
	|		ВТ_НастройкаПеней КАК ВТ_НастройкаПеней
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА ДиапазоныИзмерений.Партия < &НачалоМоратория
	|						И (ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней) МЕЖДУ &НачалоМоратория И &КонецМоратория)
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, 270)
	|				КОГДА ДиапазоныИзмерений.Партия МЕЖДУ &НачалоМоратория И &КонецМоратория
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней), ДЕНЬ, РАЗНОСТЬДАТ(ДиапазоныИзмерений.Партия, &КонецМоратория, ДЕНЬ))
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДиапазоныИзмерений.Партия, ДЕНЬ, 11), ДЕНЬ, ВТ_НастройкаПеней.Дней)
	|			КОНЕЦ < &ДатаСреза) КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.ЛицевойСчет,
	|	ВТ.Партия,
	|	ВТ.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ.ЛицевойСчет,
	|	ВТ.Партия,
	|	ВТ.Период
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	Партия";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЛицевойСчет = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
	
	Пока ВыборкаЛицевойСчет.Следующий() Цикл
		
		ВыборкаПартия = ВыборкаЛицевойСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПартия.Следующий() Цикл
			
			КэшДанных = Новый Структура;
			КэшДанных.Вставить("СуммаДолга", Null);
			КэшДанных.Вставить("КоэфЗначение", Null);
			КэшДанных.Вставить("Коэф", Null);
			КэшДанных.Вставить("КолДней", Null);
			КэшДанных.Вставить("КлючеваяСтавка", Null);
			КэшДанных.Вставить("ДатаНачала", Null);
			КэшДанных.Вставить("ДатаОкончания", Null);
			КэшДанных.Вставить("ПоследнийЗафиксированныйПериод", Неопределено);
			
			ПерваяСтрока	  				= Истина;  
			
			ВыборкаДетали = ВыборкаПартия.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				//1.В таблицу попадает 1 строкой период без коэффициента
				//2.Когда коэффициент заполнен - попадание в таблицу идет помесячно
				//3.Если есть отбор по месяцам расчета - попадет период с пустым коэффициентом(одной строкой) и выбранные периоды расчета(помесячно)
				//Если образуется пробел между периодом с пустым коэффициентом и выбранным периодом расчета,
				//то дата начала будет заполнена исходя из последней сохраненной даты окончания периода в таблице
				//
				Если Не ПерваяСтрока и (ЗначениеЗаполнено(ВыборкаДетали.КоэфЗначение) или ЗначениеЗаполнено(КэшДанных.КоэфЗначение)) Тогда
					
					//Фиксируем для предыдущей выборки ДатаОкончания
					КэшДанных.Вставить("ДатаОкончания", ВыборкаДетали.Период - 86400);
					
					//И уходим добавлять записи в таблицу
					ДобавитьВТаблицуРасчетовПени(ТаблицаРасчета, ВыборкаДетали, КэшДанных, МесяцыРасчета);
					
				КонецЕсли; 
				
				//Заполняем кэш
				КэшДанных.Вставить("СуммаДолга", ?(ВыборкаДетали.СуммаДолга       = Null, КэшДанных.СуммаДолга,    ВыборкаДетали.СуммаДолга));
				КэшДанных.Вставить("КоэфЗначение", ?(ВыборкаДетали.КоэфЗначение       = Null, КэшДанных.КоэфЗначение,    ВыборкаДетали.КоэфЗначение));
				КэшДанных.Вставить("Коэф", ?(ВыборкаДетали.Коэф = Null, КэшДанных.Коэф, ВыборкаДетали.Коэф)); 
				КэшДанных.Вставить("КолДней", ?(ВыборкаДетали.КолДней = Null, КэшДанных.КолДней, ВыборкаДетали.КолДней)); 
				КэшДанных.Вставить("ДатаНачала", ?(ВыборкаДетали.Период = Null, КэшДанных.ДатаНачала, ВыборкаДетали.Период)); 
				КэшДанных.Вставить("КлючеваяСтавка", ?(ВыборкаДетали.КлючеваяСтавка   = Null, КэшДанных.КлючеваяСтавка,  ВыборкаДетали.КлючеваяСтавка));
				
				Если ВыборкаДетали.КоэфЗначение = 0 Тогда
					
					//Значение по умолчанию
					//Получается дата с которой начинается считаться пеня  - 1 день
					//ВыборкаДетали.КоэфЗначение = 0 имеется только у первой даты расчета пени
					//В таблицу попадает дата ПоследнийЗафиксированныйПериод + 1 день в первый раз
					//а далее в ПоследнийЗафиксированныйПериод сохраняется дата последнего
					//добавленного периода в таблицу расчета пеней
					КэшДанных.Вставить("ПоследнийЗафиксированныйПериод", ВыборкаДетали.Период - 86400);	
					
				КонецЕсли; 
				
				ПерваяСтрока = Ложь;
				
			КонецЦикла; 
						
		КонецЦикла;
		
	КонецЦикла;
	
	//Уберем все строки по партии лицевого счета, если там нет пеней
	//Эту фильтрацию удобнее всего делать в самом конце
	
	ТЗ_Свертка = ТаблицаРасчета.Скопировать(,"ЛицевойСчет,Партия,СуммаПени");
	ТЗ_Свертка.Свернуть("ЛицевойСчет,Партия", "СуммаПени");
	
	Для каждого СтрСвертка Из ТЗ_Свертка Цикл
		
		Если СтрСвертка.СуммаПени = 0 Тогда
			
			Для каждого НСтр Из ТаблицаРасчета.НайтиСтроки(Новый Структура("ЛицевойСчет,Партия", СтрСвертка.ЛицевойСчет, СтрСвертка.Партия)) Цикл
				ТаблицаРасчета.Удалить(НСтр);
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ТаблицаРасчета;
	
КонецФункции 

//вариант с услугами
//Предполагается что даты без времени передаются
Процедура ДобавитьВТаблицуРасчетовПениСУслугами(ТаблицаРасчета, ВыборкаДетали, КэшДанных, МесяцыРасчета) Экспорт 
	
	//Проверка на недопустимые значения
	Если КэшДанных.СуммаДолга = Null Или КэшДанных.КлючеваяСтавка = Null или КэшДанных.СуммаДолга <= 0 или КэшДанных.КоэфЗначение = Null Тогда
		Возврат;
	КонецЕсли;
	
	//Данные добавляются помесячно разбивая период на куски(если есть фильтр по месяцам - попадут только нужные месяца)
	//Если КэшДанных.КоэфЗначение = 0, значит нужно добавлять одной строкой без разбивки(запись обязательно должна попасть)
	Если КэшДанных.КоэфЗначение = 0 Тогда
		//Для прохождения 1 итерации без разбиения по периодам
		//Приравняем наш "ползунок" сразу в конец
		//Это значение используется, только если КэшДанных.КоэфЗначение <> 0
		ТекущаяДатаНачала = КэшДанных.ДатаОкончания;
		КоэффициентЗаполнен = Ложь;
	Иначе
		ТекущаяДатаНачала = КэшДанных.ДатаНачала;
		КоэффициентЗаполнен = Истина;
	КонецЕсли; 
	
	НачалоМоратория = '20200406';
	КонецМоратория = '20210101';
	
	//Помесячное добавление
	Пока ТекущаяДатаНачала <= КэшДанных.ДатаОкончания Цикл
		
		ТекущаяДатаОкончания = Мин(НачалоДня(КонецМесяца(ТекущаяДатаНачала)), КэшДанных.ДатаОкончания);
		ТекущаяДатаОкончанияИсходная = ТекущаяДатаОкончания;
		
		#Область ФильтрМораторий
		Если ТекущаяДатаНачала >= НачалоМоратория и
			ТекущаяДатаОкончания <= КонецМоратория Тогда 
			
			//Если рассчитываемый период целиком внутри моратория
			//тогда пропускаем его
			
			ТекущаяДатаНачала = ТекущаяДатаОкончанияИсходная + 86400; 
			Продолжить;
			
		ИначеЕсли ТекущаяДатаНачала >= НачалоМоратория и
			ТекущаяДатаНачала <= КонецМоратория и
			КонецМоратория < ТекущаяДатаОкончания Тогда  
			
			//Если начало периода в диапазоне моратория
			//при этом конец периода не попадает в мораторий
			//тогда начало периода ставим след день после конца моратория
			
			ТекущаяДатаНачала = КонецМоратория + 86400;               
			//чтобы в январе 2021 Дата начала была указана 02.01.2021
			//а не 06.04.2020, т.к. последняя зафиксированная дата бало 05.04.2020
			КэшДанных.ПоследнийЗафиксированныйПериод = КонецМоратория;
			
		ИначеЕсли ТекущаяДатаОкончания >= НачалоМоратория и
			ТекущаяДатаОкончания <= КонецМоратория и
			НачалоМоратория > ТекущаяДатаНачала Тогда
			
			//Если конец периода в диапазоне моратория
			//при этом начало периода не попадает в мораторий
			//тогда конец периода ставим день до начала моратория
			
			ТекущаяДатаОкончания = НачалоМоратория - 86400;
			
		КонецЕсли;    
		#КонецОбласти
		
		Если КоэффициентЗаполнен Тогда
			//Может быть отбор по месяцам расчета,
			//чтобы рассчитать пени по конкретным месяцам,
			//а другие месяца расчетов просто не отображать
			Если МесяцыРасчета = Неопределено Тогда 
				ПропуститьПериод = Ложь;  
			Иначе 
				ПропуститьПериод = Истина;
				
				Для каждого Месяц Из МесяцыРасчета Цикл
					Если Месяц = НачалоМесяца(ТекущаяДатаНачала) или
						Месяц = НачалоМесяца(ТекущаяДатаОкончания) Тогда 
						
						//Значит месяц пересекается с этим периодом
						ПропуститьПериод = Ложь;
						
					КонецЕсли; 
				КонецЦикла;  
			КонецЕсли; 	
			
		Иначе
			
			ПропуститьПериод = Ложь;  

		КонецЕсли; 
		
		Если Не ПропуститьПериод Тогда
			
			СтрокаРасчета = ТаблицаРасчета.Добавить();
			СтрокаРасчета.ЛицевойСчет   = ВыборкаДетали.ЛицевойСчет;
			СтрокаРасчета.Услуга   		= ВыборкаДетали.Услуга;
			СтрокаРасчета.Партия        = ВыборкаДетали.Партия;
			СтрокаРасчета.СуммаДолга    = КэшДанных.СуммаДолга;
			СтрокаРасчета.КоэфЗначение  = КэшДанных.КоэфЗначение;
			СтрокаРасчета.Коэф			= КэшДанных.Коэф;
			СтрокаРасчета.КолДней		= КэшДанных.КолДней;
			СтрокаРасчета.Ставка        = КэшДанных.КлючеваяСтавка;     
			СтрокаРасчета.ДатаНачала    = КэшДанных.ПоследнийЗафиксированныйПериод + 86400; //не должно быть пробелов в датах
			СтрокаРасчета.ДатаОкончания = ТекущаяДатаОкончания;  
			
			//Эти поля заполняются только если есть что рассчитывать
			Если КоэффициентЗаполнен Тогда 
				
				СтрокаРасчета.ДатаНачалаРасчетногоМесяца    = ТекущаяДатаНачала;
				СтрокаРасчета.ДатаОкончанияРасчетногоМесяца = ТекущаяДатаОкончания;
				СтрокаРасчета.Дней          = (СтрокаРасчета.ДатаОкончанияРасчетногоМесяца - СтрокаРасчета.ДатаНачалаРасчетногоМесяца) / 86400 + 1;
				СтрокаРасчета.СуммаПени     = Окр(КэшДанных.СуммаДолга * КэшДанных.КоэфЗначение * КэшДанных.КлючеваяСтавка / 100 * СтрокаРасчета.Дней, 2);
				
			КонецЕсли;
			
			КэшДанных.ПоследнийЗафиксированныйПериод = ТекущаяДатаОкончания;    
			
		КонецЕсли; 
		
		ТекущаяДатаНачала = ТекущаяДатаОкончанияИсходная + 86400;  
		
	КонецЦикла;  
	
КонецПроцедуры

//Предполагается что даты без времени передаются
Процедура ДобавитьВТаблицуРасчетовПени(ТаблицаРасчета, ВыборкаДетали, КэшДанных, МесяцыРасчета) Экспорт 
	
	//Проверка на недопустимые значения
	Если КэшДанных.СуммаДолга = Null Или КэшДанных.КлючеваяСтавка = Null или КэшДанных.СуммаДолга <= 0 или КэшДанных.КоэфЗначение = Null Тогда
		Возврат;
	КонецЕсли;
	
	//Данные добавляются помесячно разбивая период на куски(если есть фильтр по месяцам - попадут только нужные месяца)
	//Если КэшДанных.КоэфЗначение = 0, значит нужно добавлять одной строкой без разбивки(запись обязательно должна попасть)
	Если КэшДанных.КоэфЗначение = 0 Тогда
		//Для прохождения 1 итерации без разбиения по периодам
		//Приравняем наш "ползунок" сразу в конец
		//Это значение используется, только если КэшДанных.КоэфЗначение <> 0
		ТекущаяДатаНачала = КэшДанных.ДатаОкончания;
		КоэффициентЗаполнен = Ложь;
	Иначе
		ТекущаяДатаНачала = КэшДанных.ДатаНачала;
		КоэффициентЗаполнен = Истина;
	КонецЕсли; 
	
	НачалоМоратория = '20200406';
	КонецМоратория = '20210101';
	
	//Помесячное добавление
	Пока ТекущаяДатаНачала <= КэшДанных.ДатаОкончания Цикл
		
		ТекущаяДатаОкончания = Мин(НачалоДня(КонецМесяца(ТекущаяДатаНачала)), КэшДанных.ДатаОкончания);
		ТекущаяДатаОкончанияИсходная = ТекущаяДатаОкончания;
		
		#Область ФильтрМораторий
		Если ТекущаяДатаНачала >= НачалоМоратория и
			ТекущаяДатаОкончания <= КонецМоратория Тогда 
			
			//Если рассчитываемый период целиком внутри моратория
			//тогда пропускаем его
			
			ТекущаяДатаНачала = ТекущаяДатаОкончанияИсходная + 86400; 
			Продолжить;
			
		ИначеЕсли ТекущаяДатаНачала >= НачалоМоратория и
			ТекущаяДатаНачала <= КонецМоратория и
			КонецМоратория < ТекущаяДатаОкончания Тогда  
			
			//Если начало периода в диапазоне моратория
			//при этом конец периода не попадает в мораторий
			//тогда начало периода ставим след день после конца моратория
			
			ТекущаяДатаНачала = КонецМоратория + 86400;               
			//чтобы в январе 2021 Дата начала была указана 02.01.2021
			//а не 06.04.2020, т.к. последняя зафиксированная дата бало 05.04.2020
			КэшДанных.ПоследнийЗафиксированныйПериод = КонецМоратория;
			
		ИначеЕсли ТекущаяДатаОкончания >= НачалоМоратория и
			ТекущаяДатаОкончания <= КонецМоратория и
			НачалоМоратория > ТекущаяДатаНачала Тогда
			
			//Если конец периода в диапазоне моратория
			//при этом начало периода не попадает в мораторий
			//тогда конец периода ставим день до начала моратория
			
			ТекущаяДатаОкончания = НачалоМоратория - 86400;
			
		КонецЕсли;    
		#КонецОбласти
		
		Если КоэффициентЗаполнен Тогда
			//Может быть отбор по месяцам расчета,
			//чтобы рассчитать пени по конкретным месяцам,
			//а другие месяца расчетов просто не отображать
			Если МесяцыРасчета = Неопределено Тогда 
				ПропуститьПериод = Ложь;  
			Иначе 
				ПропуститьПериод = Истина;
				
				Для каждого Месяц Из МесяцыРасчета Цикл
					Если Месяц = НачалоМесяца(ТекущаяДатаНачала) или
						Месяц = НачалоМесяца(ТекущаяДатаОкончания) Тогда 
						
						//Значит месяц пересекается с этим периодом
						ПропуститьПериод = Ложь;
						
					КонецЕсли; 
				КонецЦикла;  
			КонецЕсли; 	
			
		Иначе
			
			ПропуститьПериод = Ложь;  

		КонецЕсли; 
		
		Если Не ПропуститьПериод Тогда
			
			СтрокаРасчета = ТаблицаРасчета.Добавить();
			СтрокаРасчета.ЛицевойСчет   = ВыборкаДетали.ЛицевойСчет;
			СтрокаРасчета.Партия        = ВыборкаДетали.Партия;
			СтрокаРасчета.СуммаДолга    = КэшДанных.СуммаДолга;
			СтрокаРасчета.КоэфЗначение  = КэшДанных.КоэфЗначение;
			СтрокаРасчета.Коэф			= КэшДанных.Коэф;
			СтрокаРасчета.КолДней		= КэшДанных.КолДней;
			СтрокаРасчета.Ставка        = КэшДанных.КлючеваяСтавка;     
			СтрокаРасчета.ДатаНачала    = КэшДанных.ПоследнийЗафиксированныйПериод + 86400; //не должно быть пробелов в датах
			СтрокаРасчета.ДатаОкончания = ТекущаяДатаОкончания;  
			
			//Эти поля заполняются только если есть что рассчитывать
			Если КоэффициентЗаполнен Тогда 
				
				СтрокаРасчета.ДатаНачалаРасчетногоМесяца    = ТекущаяДатаНачала;
				СтрокаРасчета.ДатаОкончанияРасчетногоМесяца = ТекущаяДатаОкончания;
				СтрокаРасчета.Дней          = (СтрокаРасчета.ДатаОкончанияРасчетногоМесяца - СтрокаРасчета.ДатаНачалаРасчетногоМесяца) / 86400 + 1;
				СтрокаРасчета.СуммаПени     = Окр(КэшДанных.СуммаДолга * КэшДанных.КоэфЗначение * КэшДанных.КлючеваяСтавка / 100 * СтрокаРасчета.Дней, 2);
				
			КонецЕсли;
			
			КэшДанных.ПоследнийЗафиксированныйПериод = ТекущаяДатаОкончания;    
			
		КонецЕсли; 
		
		ТекущаяДатаНачала = ТекущаяДатаОкончанияИсходная + 86400;  
		
	КонецЦикла;  
	
КонецПроцедуры

Функция ПечатьРасшифровкиПениРегламентная(ТЗ, НачалоПериода, КонецПериода, ДатаСреза) Экспорт 
	
	Если ТЗ.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	//расшифровка печатается по 1 лицевому счету
	ЛицевойСчет = ТЗ[0].ЛицевойСчет;
	
	НачалоПериодаСтрокой = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
	КонецПериодаСтрокой = Формат(КонецПериода, "ДФ=dd.MM.yyyy");   
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабСрезПоследних.ЛицевойСчет КАК ЛицевойСчетСсылка,
	|	ТабСрезПоследних.ЛицевойСчет.Наименование КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.ФизЛицо.Наименование КАК ФИО,
	|	ТабСрезПоследних.ЛицевойСчет.Адрес.Наименование КАК Квартира,
	|	ТабСрезПоследних.ЛицевойСчет.Адрес.Владелец.Наименование КАК Здание,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация.Наименование КАК Организация,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация КАК ОрганизацияСсылка
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК ТабСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТабСрезПоследнихПериод.Период КАК Период,
	|			МАКСИМУМ(ТабСрезПоследнихПериод.Регистратор) КАК Регистратор,
	|			ТабСрезПоследнихПериод.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК ТабСрезПоследнихПериод
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(Таб.Период) КАК Период,
	|					Таб.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК Таб
	|				ГДЕ
	|					Таб.ЛицевойСчет = &ЛицевойСчет
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Таб.ЛицевойСчет) КАК ВложенныйЗапрос
	|				ПО ТабСрезПоследнихПериод.Период = ВложенныйЗапрос.Период
	|					И ТабСрезПоследнихПериод.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТабСрезПоследнихПериод.ЛицевойСчет,
	|			ТабСрезПоследнихПериод.Период) КАК ВложенныйЗапрос2
	|		ПО ТабСрезПоследних.Период = ВложенныйЗапрос2.Период
	|			И ТабСрезПоследних.Регистратор = ВложенныйЗапрос2.Регистратор
	|			И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос2.ЛицевойСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ПО ТабСрезПоследних.ОтветственныйВладелец = УПЖКХ_Жильцы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|		ПО ТабСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет); 
	
	ДанныеДляОтчетаПоЛС = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеДляОтчетаПоЛС.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СуммаПениЛицевойСчет = 0;
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьОбщийМакет("ЕРЦ_РасшифровкаПени"); 
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок"); 
	
	ОбластьЗаголовок.Параметры.НачалоПериодаСтрокой = НачалоПериодаСтрокой;	
	ОбластьЗаголовок.Параметры.КонецПериодаСтрокой = КонецПериодаСтрокой;	
	ОбластьЗаголовок.Параметры.ДатаРасчета = Формат(ДатаСреза, "ДФ=dd.MM.yyyy");
	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеДляОтчетаПоЛС);	
	
	ТабДок.Вывести(ОбластьЗаголовок);   
	
	ТЗ_Партий = ТЗ.Скопировать(Новый Структура("ЛицевойСчет", ЛицевойСчет), "Партия");  
	ТЗ_Партий.Свернуть("Партия"); 
	
	Для каждого СтрПартия Из ТЗ_Партий Цикл  
		
		СуммаПениПартия = 0;
		
		ТабДок.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
		
		ОбластьШапкаПени = Макет.ПолучитьОбласть("ШапкаПени"); 
		
		ОбластьШапкаПени.Параметры.Партия = Формат(СтрПартия.Партия, "ДФ='MMММ yyyy'");	

		ТабДок.Вывести(ОбластьШапкаПени);   
		
		Для каждого Стр Из ТЗ.НайтиСтроки(Новый Структура("ЛицевойСчет,Партия", ЛицевойСчет, СтрПартия.Партия)) Цикл
			
			СтрокаПени = Макет.ПолучитьОбласть("СтрокаПени");
			СтрокаПени.Параметры.Заполнить(Стр);
			ТабДок.Вывести(СтрокаПени);
			
			СуммаПениПартия = СуммаПениПартия + Стр.СуммаПени;
			
		КонецЦикла; 
		
		ОбластьИтогоПени = Макет.ПолучитьОбласть("ИтогоПени");
		ОбластьИтогоПени.Параметры.СуммаПени = СуммаПениПартия;
		ТабДок.Вывести(ОбластьИтогоПени);
		
		СуммаПениЛицевойСчет = СуммаПениЛицевойСчет + СуммаПениПартия;
		
	КонецЦикла;  
	
	ТаблицаОплат = ГУЖФ_РаботаСДолжникамиСервер.ПолучитьТаблицуОплатПениЗаПериод(
	ДанныеДляОтчетаПоЛС.ОрганизацияСсылка, ДанныеДляОтчетаПоЛС.ЛицевойСчетСсылка,
	НачалоПериода, КонецПериода, ДатаСреза);
	
	Оплачено  = ТаблицаОплат.Итог("СуммаОплаты");
	
	ОбластьВсегоПени = Макет.ПолучитьОбласть("ВсегоПени");
	ОбластьВсегоПени.Параметры.СуммаПени = СуммаПениЛицевойСчет;
	ОбластьВсегоПени.Параметры.Оплата  = Оплачено;
	ОбластьВсегоПени.Параметры.Остаток = СуммаПениЛицевойСчет - Оплачено;
	ТабДок.Вывести(ОбластьВсегоПени);
	
	Возврат ТабДок;
	
КонецФункции// ПечатьРасшифровкиПениРегламентная()

//вариант с услугами
Функция ПечатьРасшифровкиПениРегламентнаяСУслугами(ТЗ, НачалоПериода, КонецПериода, ДатаСреза) Экспорт 
	
	Если ТЗ.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	//расшифровка печатается по 1 лицевому счету
	ЛицевойСчет = ТЗ[0].ЛицевойСчет;
	
	НачалоПериодаСтрокой = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
	КонецПериодаСтрокой = Формат(КонецПериода, "ДФ=dd.MM.yyyy");   
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабСрезПоследних.ЛицевойСчет КАК ЛицевойСчетСсылка,
	|	ТабСрезПоследних.ЛицевойСчет.Наименование КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.ФизЛицо.Наименование КАК ФИО,
	|	ТабСрезПоследних.ЛицевойСчет.Адрес.Наименование КАК Квартира,
	|	ТабСрезПоследних.ЛицевойСчет.Адрес.Владелец.Наименование КАК Здание,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация.Наименование КАК Организация,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация КАК ОрганизацияСсылка
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК ТабСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТабСрезПоследнихПериод.Период КАК Период,
	|			МАКСИМУМ(ТабСрезПоследнихПериод.Регистратор) КАК Регистратор,
	|			ТабСрезПоследнихПериод.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК ТабСрезПоследнихПериод
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					МАКСИМУМ(Таб.Период) КАК Период,
	|					Таб.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК Таб
	|				ГДЕ
	|					Таб.ЛицевойСчет = &ЛицевойСчет
	|				
	|				СГРУППИРОВАТЬ ПО
	|					Таб.ЛицевойСчет) КАК ВложенныйЗапрос
	|				ПО ТабСрезПоследнихПериод.Период = ВложенныйЗапрос.Период
	|					И ТабСрезПоследнихПериод.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТабСрезПоследнихПериод.ЛицевойСчет,
	|			ТабСрезПоследнихПериод.Период) КАК ВложенныйЗапрос2
	|		ПО ТабСрезПоследних.Период = ВложенныйЗапрос2.Период
	|			И ТабСрезПоследних.Регистратор = ВложенныйЗапрос2.Регистратор
	|			И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос2.ЛицевойСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ПО ТабСрезПоследних.ОтветственныйВладелец = УПЖКХ_Жильцы.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|		ПО ТабСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет); 
	
	ДанныеДляОтчетаПоЛС = Запрос.Выполнить().Выбрать();
	
	Если Не ДанныеДляОтчетаПоЛС.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СуммаПениЛицевойСчет = 0;
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьОбщийМакет("ЕРЦ_РасшифровкаПени"); 
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок"); 
	
	ОбластьЗаголовок.Параметры.НачалоПериодаСтрокой = НачалоПериодаСтрокой;	
	ОбластьЗаголовок.Параметры.КонецПериодаСтрокой = КонецПериодаСтрокой;	
	ОбластьЗаголовок.Параметры.ДатаРасчета = Формат(ДатаСреза, "ДФ=dd.MM.yyyy");
	
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеДляОтчетаПоЛС);	
	
	ТабДок.Вывести(ОбластьЗаголовок);   
	
	ТЗ_Услуги = ТЗ.Скопировать(Новый Структура("ЛицевойСчет", ЛицевойСчет), "Услуга");
	ТЗ_Услуги.Свернуть("Услуга"); 
	
	Для каждого СтрУслуга Из ТЗ_Услуги Цикл
		
		ТабДок.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
		
		ОбластьШапкаУслуга = Макет.ПолучитьОбласть("ШапкаУслуга"); 
		ОбластьШапкаУслуга.Параметры.Услуга = СтрУслуга.Услуга;	 
		ТабДок.Вывести(ОбластьШапкаУслуга);
		
		ТЗ_Партий = ТЗ.Скопировать(Новый Структура("ЛицевойСчет,Услуга", ЛицевойСчет, СтрУслуга.Услуга), "Партия");  
		ТЗ_Партий.Свернуть("Партия"); 
		
		Для каждого СтрПартия Из ТЗ_Партий Цикл  
			
			СуммаПениПартия = 0;
			
			ТабДок.Вывести(Макет.ПолучитьОбласть("ПустаяСтрока"));
			
			ОбластьШапкаПени = Макет.ПолучитьОбласть("ШапкаПени"); 
			
			ОбластьШапкаПени.Параметры.Партия = Формат(СтрПартия.Партия, "ДФ='MMММ yyyy'");	
			
			ТабДок.Вывести(ОбластьШапкаПени);   
			
			Для каждого Стр Из ТЗ.НайтиСтроки(Новый Структура("ЛицевойСчет,Услуга,Партия", ЛицевойСчет, СтрУслуга.Услуга, СтрПартия.Партия)) Цикл
				
				СтрокаПени = Макет.ПолучитьОбласть("СтрокаПени");
				СтрокаПени.Параметры.Заполнить(Стр);
				ТабДок.Вывести(СтрокаПени);
				
				СуммаПениПартия = СуммаПениПартия + Стр.СуммаПени;
				
			КонецЦикла; 
			
			ОбластьИтогоПени = Макет.ПолучитьОбласть("ИтогоПени");
			ОбластьИтогоПени.Параметры.СуммаПени = СуммаПениПартия;
			ТабДок.Вывести(ОбластьИтогоПени);
			
			СуммаПениЛицевойСчет = СуммаПениЛицевойСчет + СуммаПениПартия;
			
		КонецЦикла;  
		
	КонецЦикла;
	
	ТаблицаОплат = ГУЖФ_РаботаСДолжникамиСервер.ПолучитьТаблицуОплатПениЗаПериод(
	ДанныеДляОтчетаПоЛС.ОрганизацияСсылка, ДанныеДляОтчетаПоЛС.ЛицевойСчетСсылка,
	НачалоПериода, КонецПериода, ДатаСреза);
	
	Оплачено  = ТаблицаОплат.Итог("СуммаОплаты");
	
	ОбластьВсегоПени = Макет.ПолучитьОбласть("ВсегоПени");
	ОбластьВсегоПени.Параметры.СуммаПени = СуммаПениЛицевойСчет;
	ОбластьВсегоПени.Параметры.Оплата  = Оплачено;
	ОбластьВсегоПени.Параметры.Остаток = СуммаПениЛицевойСчет - Оплачено;
	ТабДок.Вывести(ОбластьВсегоПени);
	
	Возврат ТабДок;
	
КонецФункции// ПечатьРасшифровкиПениРегламентная()

Процедура ОбновитьНачислениеПениВПакете(ПакетНачислениеПени, ДанныеДляОбработки, МесяцРасчета, Организация, ДопПараметры) Экспорт 
	
	//Переменные  
	ЕстОшибки = Ложь;
	ДатаСреза = ДобавитьМесяц(МесяцРасчета, 1);
	МесяцыРасчета = Новый Массив;
	МесяцыРасчета.Добавить(МесяцРасчета);     
	МесяцНачисления = НачалоДня(КонецМесяца(МесяцРасчета));
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетНачислениеПени, "Дата"); 
	//УслугаПени = Справочники.КВП_Услуги.НайтиПоНаименованию("Пеня", Истина); 
	
	Для каждого ТекДанные Из ДанныеДляОбработки Цикл
				
		Попытка
			
			ТЗ = ЕРЦ_ОбщийМодуль.ПолучитьРасчетПенейСУслугами(ТекДанные.ЛицевыеСчета, МесяцыРасчета, ДатаСреза, Неопределено, ДопПараметры);   
			ТЗ.Свернуть("ЛицевойСчет,Партия,Услуга", "СуммаПени");
			//ТЗ = ЕРЦ_ОбщийМодуль.ПолучитьРасчетПеней(ТекДанные.ЛицевыеСчета, МесяцыРасчета, ДатаСреза, Неопределено);   
			//ТЗ.Свернуть("ЛицевойСчет,Партия", "СуммаПени");
			
			Если ТЗ.Количество() = 0 Тогда
				//Если у ЛС есть долг но нет пеней - значит пока не наступил срок
				//Уберем из пакета это здание                              
				Если Не УдалитьНачислениеПениИзПакетаВыборочно(ПакетНачислениеПени, ТекДанные.Здание, ТекДанные.НачислениеПени) Тогда 
					ЕстОшибки = Истина;    
				КонецЕсли;
				
				Продолжить;	  
				
			КонецЕсли; 
			
			НачатьТранзакцию();
			
			Если ЗначениеЗаполнено(ТекДанные.НачислениеПени) Тогда
				КВП_НачислениеПениОбъект = ТекДанные.НачислениеПени.ПолучитьОбъект();	
			Иначе
				КВП_НачислениеПениОбъект = Документы.КВП_НачислениеПени.СоздатьДокумент();	
			КонецЕсли;
			
			КВП_НачислениеПениОбъект.ПометкаУдаления = Ложь;
			КВП_НачислениеПениОбъект.Дата = ДатаДокумента;
			КВП_НачислениеПениОбъект.ЕРЦ_Месяц = МесяцРасчета;
			КВП_НачислениеПениОбъект.ЕРЦ_МесяцПроверкиЗадолженности = ДопПараметры.МесяцПроверкиЗадолженности;
			КВП_НачислениеПениОбъект.Организация = Организация;
			КВП_НачислениеПениОбъект.Объект = ТекДанные.Здание; 
			КВП_НачислениеПениОбъект.ЕРЦ_Контрагент = ТекДанные.Контрагент;
			
			КВП_НачислениеПениОбъект.Начисления.Очистить();
			
			Для каждого Стр Из ТЗ Цикл
				
				НовСтрока = КВП_НачислениеПениОбъект.Начисления.Добавить(); 
				
				НовСтрока.ЛицевойСчет = Стр.ЛицевойСчет;
				//НовСтрока.Услуга = УслугаПени;
				НовСтрока.Услуга = Стр.Услуга;
				НовСтрока.МесяцНачисления = НачалоДня(КонецМесяца(Стр.Партия));
				НовСтрока.Сумма = Стр.СуммаПени;
				
			КонецЦикла; 
			
			КВП_НачислениеПениОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			РегистрыСведений.ЕРЦ_ФорматированиеПакетНачислениеПени.ДобавитьЗапись(ПакетНачислениеПени, ТекДанные.Здание, КВП_НачислениеПениОбъект.Ссылка, 1, Истина, "");
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Если ТранзакцияАктивна() Тогда
				
				ОтменитьТранзакцию();
				
			КонецЕсли; 
			
			ЕстОшибки = Истина;
			
			РегистрыСведений.ЕРЦ_ФорматированиеПакетНачислениеПени.ДобавитьЗапись(ПакетНачислениеПени, ТекДанные.Здание, ТекДанные.НачислениеПени, 1, Ложь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;   
		
	Если ЕстОшибки Тогда
		
		ВызватьИсключение "Есть ошибки при добавлении документов в пакет. Подробности смотрите в регистре ""Форматирование данных в документах ""пакет начисление пени""""";
		
	КонецЕсли; 
	
КонецПроцедуры

Функция УдалитьНачислениеПениИзПакетаВыборочно(ПакетНачислениеПени, Здание, НачислениеПени) Экспорт  
	
	Успешно = Истина;
	
	Попытка  
		
		НачатьТранзакцию();
		
		Если ЗначениеЗаполнено(НачислениеПени) и Не НачислениеПени.ПометкаУдаления Тогда 
			
			ДокОбъект = НачислениеПени.ПолучитьОбъект(); 
			ДокОбъект.ПометкаУдаления = Истина; 
			ДокОбъект.Комментарий = "Помечен на удаление автоматически обработкой ""ерц_НачислениеПени"""; 
			
			//для экономии места очистим табличные части
			//информация важна только как мусор, который можно анализировать
			//но такие ситуации единичны 
			ДокОбъект.Начисления.Очистить();
			
			Если ДокОбъект.Проведен Тогда
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли; 
			
		КонецЕсли; 
		
		РегистрыСведений.ЕРЦ_ФорматированиеПакетНачислениеПени.ДобавитьЗапись(ПакетНачислениеПени, Здание, НачислениеПени, 0, Истина, "");
		
		ЗафиксироватьТранзакцию();  
		
	Исключение          
		
		ОтменитьТранзакцию();
		
		Успешно = Ложь;
		
		РегистрыСведений.ЕРЦ_ФорматированиеПакетНачислениеПени.ДобавитьЗапись(ПакетНачислениеПени, Здание, НачислениеПени, 0, Ложь, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;  
	
	Возврат Успешно;
	
КонецФункции

Процедура УдалитьНачислениеПениИзПакета(ПакетНачислениеПени, ДанныеДляОбработки) Экспорт 
	
	//Переменные
	ЕстОшибки = Ложь;
	
	Для каждого ТекДанные Из ДанныеДляОбработки Цикл
		
		Если Не УдалитьНачислениеПениИзПакетаВыборочно(ПакетНачислениеПени, ТекДанные.Здание, ТекДанные.НачислениеПени) Тогда
			
			ЕстОшибки = Истина;
		
		КонецЕсли; 	
		
	КонецЦикла;
	
	Если ЕстОшибки Тогда
	
		ВызватьИсключение "Есть ошибки при удалении начислений пени из пакета. Подробности смотрите в регистре ""Форматирование данных в документах ""пакет начисление пени""""";
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработатьПакетНачислениеПени(ЕРЦ_ПакетНачислениеПени, ВФоне, КоличествоПотоков, ПродолжитьОбработку) Экспорт
	
	//Переменные                      
	ИмяФоновыхЗаданий = "ОбработкаРегистра_ЕРЦ_ФорматированиеПакетНачислениеПени";
	
	//Сначал проверим есть ли фоновые задания с таким же именем
	//если есть - выводить сообщение об ошибке
	//Если запускать фоновые задания при условии, что старые не доработали,то
	//одни и те же здания будут обрабатываться несколько раз в разных потоках.
	//Это приведет к тому что могут быть созданы несколько разных документов по одному зданию
	//И в пакет попадет последнее
	СтарыеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Наименование", ИмяФоновыхЗаданий));     
	
	Если СтарыеФоновыеЗадания.Количество() > 0 Тогда
		Для каждого Стр Из СтарыеФоновыеЗадания Цикл
			Если Стр.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Есть активные старые фоновые задания с именем %1. Их необходимо либо долждаться, либо прервать", ИмяФоновыхЗаданий));	
				Возврат;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Если ВФоне Тогда
		
		ПараметрыВыполнения = Новый Массив;
		ПараметрыВыполнения.Добавить(ЕРЦ_ПакетНачислениеПени);
		ПараметрыВыполнения.Добавить(ВФоне);
		ПараметрыВыполнения.Добавить(КоличествоПотоков);
		ПараметрыВыполнения.Добавить(ПродолжитьОбработку);
		
		ФоновыеЗадания.Выполнить("ЕРЦ_ОбщийМодуль.ОбработатьПакетНачислениеПениПродолжение", ПараметрыВыполнения,,ИмяФоновыхЗаданий);
		
	Иначе
		ЕРЦ_ОбщийМодуль.ОбработатьПакетНачислениеПениПродолжение(ЕРЦ_ПакетНачислениеПени, ВФоне, КоличествоПотоков, ПродолжитьОбработку);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработатьПакетНачислениеПениПродолжение(ЕРЦ_ПакетНачислениеПени, ВФоне, КоличествоПотоков, ПродолжитьОбработку) Экспорт 
	
	//Переменные                      
	НачалоОбработки = ТекущаяДата();
	ИмяФоновыхЗаданий = "ОбработкаРегистра_ЕРЦ_ФорматированиеПакетНачислениеПени";
	МассивФоновыхЗаданий = Новый Массив;
	КолПотоковДляОбновления = КоличествоПотоков - 1;
	КолПотоковДляУдаления = 1;
	ДанныеДляУдаления = Новый Массив;
	ДанныеДляОбновленияПоПотокам = Новый Массив; 
	МассивСтруктурЗданий = Новый Массив; 
	ТаблицаДляРаспределенияПоПотокам = Новый ТаблицаЗначений;
	ТаблицаДляРаспределенияПоПотокам.Колонки.Добавить("МассивСтруктурЗданий");
	ТаблицаДляРаспределенияПоПотокам.Колонки.Добавить("КоличествоЛС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный))); 
	ЕРЦ_ПакетНачислениеПениРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕРЦ_ПакетНачислениеПени, "Контрагент,МесяцПроверкиЗадолженности");
	Контрагент = ЕРЦ_ПакетНачислениеПениРеквизиты.Контрагент;
	ДопПараметры = Новый Структура("МесяцПроверкиЗадолженности,Организация", ЕРЦ_ПакетНачислениеПениРеквизиты.МесяцПроверкиЗадолженности, ЕРЦ_ПакетНачислениеПени.Организация);
	
	Для а=1 По КолПотоковДляОбновления Цикл
		
		НовСтрока = ТаблицаДляРаспределенияПоПотокам.Добавить();
		НовСтрока.МассивСтруктурЗданий = Новый Массив;
		
	КонецЦикла;
	
	//ТипОперации 0 - для удаления
	//ТипОперации 1 - для добавления/обновления
	//используется максимальное значение этого показателя 
	Запрос = Новый Запрос; 
	//ПериодОстатковВременный = Справочники.ЕРЦ_ТехническийСправочник.НайтиПоНаименованию("ПениМесяцПроверкиЗадолженности",Истина).Значение;
	//
	//Если ЗначениеЗаполнено(ПериодОстатковВременный) Тогда
	//	Запрос.УстановитьПараметр("ПериодОстатков", ПериодОстатковВременный);
	//Иначе
	//	Запрос.УстановитьПараметр("ПериодОстатков", ЕРЦ_ПакетНачислениеПени.МесяцРасчета);
	//КонецЕсли;     
	Запрос.УстановитьПараметр("ПериодОстатков", ДопПараметры.МесяцПроверкиЗадолженности);
	
	Запрос.УстановитьПараметр("СледПериодОстатков", ДобавитьМесяц(Запрос.Параметры.ПериодОстатков, 1));
	Запрос.УстановитьПараметр("Организация", ЕРЦ_ПакетНачислениеПени.Организация);
	Запрос.УстановитьПараметр("Контрагент", ЕРЦ_ПакетНачислениеПени.Контрагент);   
	Запрос.УстановитьПараметр("ЕРЦ_ПакетНачислениеПени", ЕРЦ_ПакетНачислениеПени);   
	Запрос.УстановитьПараметр("ЗданияИсключения", ЕРЦ_ПакетНачислениеПени.ЗданияИсключения.Выгрузить().ВыгрузитьКолонку("Здание"));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	ЗНАЧЕНИЕ(Документ.КВП_НачислениеПени.ПустаяСсылка) КАК КВП_НачислениеПени,
	|	1 КАК НовыйТипОперации,
	|	0 КАК СтарыйТипОперации,
	|	ЛОЖЬ КАК Готово,
	|	ЛОЖЬ КАК ВПроцессеФорматирования
	|ИЗ
	|	РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
	|ГДЕ
	|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков = &ПериодОстатков
	|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Организация = &Организация
	|	И НЕ ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет.Адрес.Владелец В (&ЗданияИсключения)
	|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				ТабСрезПоследних.ЛицевойСчет
	|			ИЗ
	|				РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК ТабСрезПоследних
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|						МАКСИМУМ(Таб.Период) КАК Период,
	|						Таб.Организация КАК Организация,
	|						Таб.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК Таб
	|					ГДЕ
	|						Таб.Организация = &Организация
	|						И Таб.Период < &СледПериодОстатков
	|					СГРУППИРОВАТЬ ПО
	|						Таб.ЛицевойСчет,
	|						Таб.Организация) КАК ВложенныйЗапрос
	|					ПО
	|						ТабСрезПоследних.Период = ВложенныйЗапрос.Период
	|							И ТабСрезПоследних.Организация = ВложенныйЗапрос.Организация
	|							И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|			ГДЕ
	|				ТабСрезПоследних.Контрагент В ИЕРАРХИИ(&Контрагент))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет,
	|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет.Адрес.Владелец
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СуммаНачисленияОстаток) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка),
	|	ЕРЦ_ПакетНачислениеПениДокументы.Здание,
	|	ЕРЦ_ПакетНачислениеПениДокументы.КВП_НачислениеПени,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ЕРЦ_ПакетНачислениеПени.Документы КАК ЕРЦ_ПакетНачислениеПениДокументы
	|ГДЕ
	|	ЕРЦ_ПакетНачислениеПениДокументы.Ссылка = &ЕРЦ_ПакетНачислениеПени
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка),
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.Здание,
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.НачислениеПени,
	|	0,
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.ТипОперации,
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.Готово,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ЕРЦ_ФорматированиеПакетНачислениеПени КАК ЕРЦ_ФорматированиеПакетНачислениеПени
	|ГДЕ
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.Пакет = &ЕРЦ_ПакетНачислениеПени
	|ИТОГИ
	|	МАКСИМУМ(КВП_НачислениеПени),
	|	МАКСИМУМ(НовыйТипОперации),
	|	МАКСИМУМ(СтарыйТипОперации),
	|	МАКСИМУМ(Готово),
	|	МАКСИМУМ(ВПроцессеФорматирования)
	|ПО
	|	Здание";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗдание = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
	Пока ВыборкаЗдание.Следующий() Цикл
		
		Если ПродолжитьОбработку Тогда
			
			//Обрабатываются только те записи, которые попали в регистр "ЕРЦ_ФорматированиеПакетНачислениеПени"
			//и не успели обработаться фоновыми заданиями (нет признака "Готово")
			Если Не (ВыборкаЗдание.ВПроцессеФорматирования и Не ВыборкаЗдание.Готово) Тогда
				Продолжить;	
			КонецЕсли; 
			
		Иначе
			
			Если Не ВыборкаЗдание.ВПроцессеФорматирования Тогда
				
				//Нет в регистре "ЕРЦ_ФорматированиеПакетНачислениеПени"
				//Добавляем без замещения
				РегистрыСведений.ЕРЦ_ФорматированиеПакетНачислениеПени.ДобавитьЗаписьБезЗамещения(
					ЕРЦ_ПакетНачислениеПени,
					ВыборкаЗдание.Здание,
					ВыборкаЗдание.КВП_НачислениеПени,
					ВыборкаЗдание.НовыйТипОперации,
					Ложь,
					"");
				
			ИначеЕсли ВыборкаЗдание.НовыйТипОперации <> ВыборкаЗдание.СтарыйТипОперации Тогда 
				
				//Есть в регистре "ЕРЦ_ФорматированиеПакетНачислениеПени" 
				//Но сейчас требуется другой тип операции
				//Ставим новый тип операции со сбросом признака "Готово"
				РегистрыСведений.ЕРЦ_ФорматированиеПакетНачислениеПени.ДобавитьЗапись(
					ЕРЦ_ПакетНачислениеПени,
					ВыборкаЗдание.Здание,
					ВыборкаЗдание.КВП_НачислениеПени,
					ВыборкаЗдание.НовыйТипОперации,
					Ложь,
					"");
				
			ИначеЕсли ВыборкаЗдание.Готово Тогда 
				//Есть в регистре "ЕРЦ_ФорматированиеПакетНачислениеПени"
				//Стоит признак "Готово"
				//Запускать обработку не требуется
				//Данные попадут в пакет после завершения работы потоков
				
				Продолжить;

			КонецЕсли; 
			
		КонецЕсли;  
		
		Если ВыборкаЗдание.НовыйТипОперации = 0 Тогда 
			
			ДанныеДляУдаления.Добавить(Новый Структура("Здание,НачислениеПени", ВыборкаЗдание.Здание, ВыборкаЗдание.КВП_НачислениеПени));
			
		ИначеЕсли ВыборкаЗдание.НовыйТипОперации = 1 Тогда 
			
			Выборка = ВыборкаЗдание.Выбрать();
			
			ЛицевыеСчета = Новый Массив;
			
			Пока Выборка.Следующий() и ЗначениеЗаполнено(Выборка.ЛицевойСчет) Цикл
				
				ЛицевыеСчета.Добавить(Выборка.ЛицевойСчет);
				
			КонецЦикла;
			
			//Добавляем в массив зданий с наименьшим числом ЛС для обработки
			ТаблицаДляРаспределенияПоПотокам.Сортировать("КоличествоЛС");
			ТекСтрока = ТаблицаДляРаспределенияПоПотокам[0];
			
			ТекСтрока.КоличествоЛС = ТекСтрока.КоличествоЛС + ЛицевыеСчета.Количество();
			
			ТекСтрока.МассивСтруктурЗданий.Добавить(Новый Структура("Здание,НачислениеПени,ЛицевыеСчета,Контрагент",
			ВыборкаЗдание.Здание, ВыборкаЗдание.КВП_НачислениеПени, ЛицевыеСчета, Контрагент)); 
			
		КонецЕсли; 
		
	КонецЦикла;  
	
	Для каждого Стр Из ТаблицаДляРаспределенияПоПотокам Цикл
		
		ДанныеДляОбновленияПоПотокам.Добавить(Стр.МассивСтруктурЗданий);
		
	КонецЦикла;

	//чистим память
	РезультатЗапроса = Неопределено; 
	ВыборкаЗдание = Неопределено;  
	Выборка = Неопределено;	 
	
	//Удаление документов из пакета идет одним потоком  
	Если ДанныеДляУдаления.Количество() > 0 Тогда
		Если ВФоне Тогда
			
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(ЕРЦ_ПакетНачислениеПени);
			ПараметрыВыполнения.Добавить(ДанныеДляУдаления);
			
			МассивФоновыхЗаданий.Добавить(ФоновыеЗадания.Выполнить("ЕРЦ_ОбщийМодуль.УдалитьНачислениеПениИзПакета", ПараметрыВыполнения,,ИмяФоновыхЗаданий));
			
		Иначе 
			ЕРЦ_ОбщийМодуль.УдалитьНачислениеПениИзПакета(ЕРЦ_ПакетНачислениеПени, ДанныеДляУдаления);
		КонецЕсли; 
	КонецЕсли; 
	
	//Обработка документов и добавление их в пакет по потокам
	Для каждого ДанныеДляОбновления Из ДанныеДляОбновленияПоПотокам Цикл
		
		Если ВФоне Тогда
						
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(ЕРЦ_ПакетНачислениеПени);
			ПараметрыВыполнения.Добавить(ДанныеДляОбновления);
			ПараметрыВыполнения.Добавить(ЕРЦ_ПакетНачислениеПени.МесяцРасчета);
			ПараметрыВыполнения.Добавить(ЕРЦ_ПакетНачислениеПени.Организация);
			ПараметрыВыполнения.Добавить(ДопПараметры);
			
			МассивФоновыхЗаданий.Добавить(ФоновыеЗадания.Выполнить("ЕРЦ_ОбщийМодуль.ОбновитьНачислениеПениВПакете", ПараметрыВыполнения,,ИмяФоновыхЗаданий));
			
		Иначе
			ЕРЦ_ОбщийМодуль.ОбновитьНачислениеПениВПакете(ЕРЦ_ПакетНачислениеПени, ДанныеДляОбновления, ЕРЦ_ПакетНачислениеПени.МесяцРасчета, ЕРЦ_ПакетНачислениеПени.Организация, ДопПараметры);
		КонецЕсли; 
		
	КонецЦикла;
	
	//Мониторинг фоновых заданий 
	
	Если ВФоне Тогда
		РезультатМониторингаФоновыхЗаданий = МониторингФоновыхЗаданий(МассивФоновыхЗаданий);
	КонецЕсли; 
	
	ЗафиксироватьФорматированиеПакетНачислениеПени(ЕРЦ_ПакетНачислениеПени);
	
	КонецОбработки = ТекущаяДата();
	
	ЕРЦ_ПакетНачислениеПениОбъект = ЕРЦ_ПакетНачислениеПени.ПолучитьОбъект(); 
	
	Если ВФоне Тогда
		ЕРЦ_ПакетНачислениеПениОбъект.Комментарий = СтрШаблон("Начало: %1 Конец: %2. %3 %4", НачалоОбработки, КонецОбработки, РезультатМониторингаФоновыхЗаданий.ОбщийРезультат, РезультатМониторингаФоновыхЗаданий.ТекстОшибок); 
	Иначе
		ЕРЦ_ПакетНачислениеПениОбъект.Комментарий = СтрШаблон("Начало: %1 Конец: %2.", НачалоОбработки, КонецОбработки); 
	КонецЕсли;  
	
	ЕРЦ_ПакетНачислениеПениОбъект.Записать(РежимЗаписиДокумента.Проведение);	

КонецПроцедуры

Процедура ЗафиксироватьФорматированиеПакетНачислениеПени(ПакетНачислениеПени) Экспорт 
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;         
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЕРЦ_ПакетНачислениеПени");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПакетНачислениеПени);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный; 
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_ФорматированиеПакетНачислениеПени");
	ЭлементБлокировки.УстановитьЗначение("Пакет", ПакетНачислениеПени);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();   
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.Здание КАК Здание,
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.НачислениеПени КАК НачислениеПени,
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.ТипОперации КАК ТипОперации
	|ИЗ
	|	РегистрСведений.ЕРЦ_ФорматированиеПакетНачислениеПени КАК ЕРЦ_ФорматированиеПакетНачислениеПени
	|ГДЕ
	|	ЕРЦ_ФорматированиеПакетНачислениеПени.Пакет = &Пакет
	|	И ЕРЦ_ФорматированиеПакетНачислениеПени.Готово";
	
	Запрос.УстановитьПараметр("Пакет", ПакетНачислениеПени);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		ПакетНачислениеПениОбъект = ПакетНачислениеПени.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл     
			
			Если Выборка.ТипОперации = 0 Тогда 
				
				//убираем из пакета
				Для каждого НСтр Из ПакетНачислениеПениОбъект.Документы.НайтиСтроки(Новый Структура("КВП_НачислениеПени,Здание", Выборка.НачислениеПени, Выборка.Здание)) Цикл
					ПакетНачислениеПениОбъект.Документы.Удалить(НСтр);	
				КонецЦикла;
				
			ИначеЕсли Выборка.ТипОперации = 1 Тогда   
				
				//Добавляем в пакет если нет
				Если ПакетНачислениеПениОбъект.Документы.НайтиСтроки(Новый Структура("КВП_НачислениеПени,Здание", Выборка.НачислениеПени, Выборка.Здание)).Количество() = 0 Тогда
					НовСтрока = ПакетНачислениеПениОбъект.Документы.Добавить();
					НовСтрока.КВП_НачислениеПени = Выборка.НачислениеПени;
					НовСтрока.Здание = Выборка.Здание;
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ПакетНачислениеПениОбъект.ОбменДанными.Загрузка = Истина;
		ПакетНачислениеПениОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		РегистрыСведений.ЕРЦ_ФорматированиеПакетНачислениеПени.ОчисткаГотовых(ПакетНачислениеПениОбъект.Ссылка);	
		
	КонецЕсли; 
	
	ЗафиксироватьТранзакцию();	
	
КонецПроцедуры

#Область ПартионныйУчетВзаиморасчетов_ОбменСWS

Процедура ОбменСWS_ОбновитьИнформацию(ЛицевойСчет, Оплаты, ОбновитьСправочнуюИнформацию, ОбновитьИнформациюПоЖильцам, ОбновитьИнформациюПоДолгам) Экспорт 
	
	Если Не ЭтоРабочаяБаза() Тогда
		Возврат;
	КонецЕсли;  
	
	Если ОбменСWS_ИсключатьИзОбменаWS(ЛицевойСчет) Тогда
		Возврат;
	КонецЕсли; 
  
	ОсновныеРеквизитыЛС = ОбменСWS_ПолучитьОсновнуюИнформациюПоЛицевомуСчету(ЛицевойСчет);
	
	ЕРЦ_ПапкаОбменаWS = Константы.ЕРЦ_ПапкаОбменаWS.Получить();
	
	Если Не ЗначениеЗаполнено(ЕРЦ_ПапкаОбменаWS) Тогда
		ВызватьИсключение "Не заполнена папка для обмена с WS в константе ЕРЦ_ПапкаОбменаWS";	
	КонецЕсли; 
	
	ПолноеИмяФайла = СтрШаблон("%1\%2", ЕРЦ_ПапкаОбменаWS, ЛицевойСчет);
	ВыбранныйФайл = Новый Файл(ПолноеИмяФайла);
	Если ВыбранныйФайл.Существует() Тогда
		// Запишем JSON_Структура в файл
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ПолноеИмяФайла, "UTF-8"); 
		ПоляДат = Новый Массив;
		ПоляДат.Добавить("birthdate");
		ПоляДат.Добавить("date_doc");
		ПоляДат.Добавить("month");
		ПоляДат.Добавить("registry_data");
		ПоляДат.Добавить("payment_date");
		ПоляДат.Добавить("billing_month");
		ПоляДат.Добавить("registry_data");
		JSON_Структура = ПрочитатьJSON(ЧтениеJSON,, ПоляДат, ФорматДатыJSON.ISO); 
		ЧтениеJSON.Закрыть();
	Иначе 
		JSON_Структура = Новый Структура("cod_ls,house_id,address,org,payed,tenants,debts");
	КонецЕсли;   
		
	Если Оплаты <> Неопределено Тогда 
		
		//Перенесем в массив структур таблицу значений
		МассивОплат = Новый Массив;    
		Для каждого Стр Из Оплаты Цикл 
			Оплата = Новый Структура; 
			Для каждого Колонка Из Оплаты.Колонки Цикл
				Оплата.Вставить(Колонка.Имя);	
			КонецЦикла;  
			ЗаполнитьЗначенияСвойств(Оплата, Стр);
			МассивОплат.Добавить(Оплата);
		КонецЦикла;  
		
		JSON_Структура.Вставить("payed", МассивОплат);	 
		
	ИначеЕсли JSON_Структура.payed = Неопределено Тогда
		JSON_Структура.Вставить("payed", Новый Массив);	
	КонецЕсли;  
	
	Если ОбновитьСправочнуюИнформацию или JSON_Структура.cod_ls = Неопределено Тогда
		ОбменСWS_ЗаполнитьСправочнуюИнформацию(ЛицевойСчет, JSON_Структура);	
	КонецЕсли;  
	
	Если ОбновитьИнформациюПоЖильцам или JSON_Структура.tenants = Неопределено Тогда
		JSON_Структура.Вставить("tenants", ОбменСWS_ПолучитьИнформациюПоЖильцам(ЛицевойСчет, ОсновныеРеквизитыЛС));	
	КонецЕсли;  
	
	Если ОбновитьИнформациюПоДолгам или JSON_Структура.debts = Неопределено Тогда
		JSON_Структура.Вставить("debts", ОбменСWS_ПолучитьИнформациюПоДолгам(ЛицевойСчет, ОсновныеРеквизитыЛС));	
	КонецЕсли;
	
	// Запишем JSON_Структура в файл
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ПолноеИмяФайла, "UTF-8", Ложь);  
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	ЗаписатьJSON(ЗаписьJSON, JSON_Структура, НастройкиСериализацииJSON);
	ЗаписьJSON.Закрыть();
	
КонецПроцедуры 

Функция ОбменСWS_ПолучитьОсновнуюИнформациюПоЛицевомуСчету(ЛицевойСчет)
	
	ОсновныеРеквизитыЛС = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация КАК Организация,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет.Адрес КАК Помещение,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет.Адрес.Владелец КАК Здание
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
		|ГДЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет = &ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
	
		ОсновныеРеквизитыЛС.Вставить(Колонка.Имя);
	
	КонецЦикла;	 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
	ЗаполнитьЗначенияСвойств(ОсновныеРеквизитыЛС, Выборка);
		
	КонецЕсли;

	Возврат ОсновныеРеквизитыЛС;
	
КонецФункции // ПолучитьОсновнуюИнформациюПоЛицевомуСчету()

Процедура ОбменСWS_ЗаполнитьСправочнуюИнформацию(ЛицевойСчет, JSON_Структура)
		
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("Ссылка", ЛицевойСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КВП_ЛицевыеСчета.Адрес.Владелец.Код, """") КАК house_id,
	|	ЕСТЬNULL(КВП_ЛицевыеСчета.Адрес.Владелец.Наименование, """") + "" кв."" + ЕСТЬNULL(КВП_ЛицевыеСчета.Адрес.Наименование, """") КАК address,
	|	ЕСТЬNULL(УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация.Наименование, """") КАК org,
	|	КВП_ЛицевыеСчета.Наименование КАК cod_ls
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|		ПО КВП_ЛицевыеСчета.Ссылка = УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();   
			
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(JSON_Структура, Выборка);
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьСправочнуюИнформацию()

Функция ОбменСWS_ИсключатьИзОбменаWS(ЛицевойСчет)
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК поле1
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК ТабСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Таб.Период) КАК Период,
	|			Таб.Организация КАК Организация,
	|			Таб.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК Таб
	|		ГДЕ
	|			Таб.ЛицевойСчет = &ЛицевойСчет
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таб.ЛицевойСчет,
	|			Таб.Организация) КАК ВложенныйЗапрос
	|		ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
	|			И ТабСрезПоследних.Организация = ВложенныйЗапрос.Организация
	|			И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
	|ГДЕ
	|	ТабСрезПоследних.Контрагент.ЕРЦ_ИсключатьИзОбменаWS";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции // ОбменСWS_ИсключатьИзОбменаWS()

Функция ОбменСWS_ПолучитьИнформациюПоЖильцам(ЛицевойСчет, ОсновныеРеквизитыЛС)

	Жильцы = Новый Массив;
	
	Запрос = Новый Запрос;    
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение", ОсновныеРеквизитыЛС.Помещение);
	Запрос.УстановитьПараметр("Здание", ОсновныеРеквизитыЛС.Здание);
	Запрос.УстановитьПараметр("СвойствоТерОтдел",
	ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
	"Территориальный отдел", Истина));            
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизЛицо,
		|	ФизическиеЛица.Фамилия КАК Фамилия,
		|	ФизическиеЛица.Имя КАК Имя,
		|	ФизическиеЛица.Отчество КАК Отчество,
		|	ПРЕДСТАВЛЕНИЕ(ФизическиеЛица.Пол) КАК Пол,
		|	ФизическиеЛица.ИНН КАК ИНН,
		|	ФизическиеЛица.СтраховойНомерПФР КАК СНИЛС,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ФизическиеЛица.МестоРожденияПредставление КАК МестоРожденияПредставление
		|ПОМЕСТИТЬ втЖильцы
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО УПЖКХ_Жильцы.ФизЛицо = ФизическиеЛица.Ссылка
		|ГДЕ
		|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЖильцы.Фамилия КАК surname,
		|	втЖильцы.Имя КАК name,
		|	втЖильцы.Отчество КАК middle_name,
		|	втЖильцы.Пол КАК sex,
		|	втЖильцы.ИНН КАК inn,
		|	втЖильцы.СНИЛС КАК snils,
		|	втЖильцы.ДатаРождения КАК birthdate,
		|	втЖильцы.МестоРожденияПредставление КАК birthplace,
		|	ЕСТЬNULL(втДоли.ДоляСобственникаЧислитель, 0) КАК dolyCh,
		|	ЕСТЬNULL(втДоли.ДоляСобственникаЗнаменатель, 0) КАК dolyZn,
		|	ЕСТЬNULL(втПаспорт.Серия, """") КАК series_doc,
		|	ЕСТЬNULL(втПаспорт.Номер, """") КАК num_doc,
		|	ЕСТЬNULL(втПаспорт.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК date_doc,
		|	ЕСТЬNULL(втПаспорт.КемВыдан, """") КАК dep_doc,
		|	ЕСТЬNULL(ВТ_ТерОтдел.ТеррОтдел, """") КАК dep_terr
		|ИЗ
		|	втЖильцы КАК втЖильцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТабСрезПоследних.Собственник КАК ФизЛицо,
		|			ТабСрезПоследних.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
		|			ТабСрезПоследних.ДоляСобственникаЗнаменатель КАК ДоляСобственникаЗнаменатель
		|		ИЗ
		|			РегистрСведений.УПЖКХ_СобственникиПомещений КАК ТабСрезПоследних
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					МАКСИМУМ(Таб.Период) КАК Период,
		|					Таб.Помещение КАК Помещение,
		|					Таб.Собственник КАК Собственник
		|				ИЗ
		|					РегистрСведений.УПЖКХ_СобственникиПомещений КАК Таб
		|				ГДЕ
		|					Таб.Помещение = &Помещение
		|					И Таб.Собственник В
		|							(ВЫБРАТЬ
		|								втЖильцы.ФизЛицо КАК ФизЛицо
		|							ИЗ
		|								втЖильцы КАК втЖильцы)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Таб.Собственник,
		|					Таб.Помещение) КАК ВложенныйЗапрос
		|				ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
		|					И ТабСрезПоследних.Помещение = ВложенныйЗапрос.Помещение
		|					И ТабСрезПоследних.Собственник = ВложенныйЗапрос.Собственник) КАК втДоли
		|		ПО втЖильцы.ФизЛицо = втДоли.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТабСрезПоследних.Физлицо КАК Физлицо,
		|			ТабСрезПоследних.Серия КАК Серия,
		|			ТабСрезПоследних.Номер КАК Номер,
		|			ТабСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|			ТабСрезПоследних.КемВыдан КАК КемВыдан,
		|			ТабСрезПоследних.КодПодразделения КАК КодПодразделения
		|		ИЗ
		|			РегистрСведений.ДокументыФизическихЛиц КАК ТабСрезПоследних
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					МАКСИМУМ(Таб.Период) КАК Период,
		|					Таб.Физлицо КАК Физлицо,
		|					Таб.ВидДокумента КАК ВидДокумента
		|				ИЗ
		|					РегистрСведений.ДокументыФизическихЛиц КАК Таб
		|				ГДЕ
		|					Таб.Физлицо В
		|							(ВЫБРАТЬ
		|								втЖильцы.ФизЛицо КАК ФизЛицо
		|							ИЗ
		|								втЖильцы КАК втЖильцы)
		|					И Таб.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Таб.ВидДокумента,
		|					Таб.Физлицо) КАК ВложенныйЗапрос
		|				ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
		|					И ТабСрезПоследних.Физлицо = ВложенныйЗапрос.Физлицо
		|					И ТабСрезПоследних.ВидДокумента = ВложенныйЗапрос.ВидДокумента) КАК втПаспорт
		|		ПО втЖильцы.ФизЛицо = втПаспорт.Физлицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗначенияСвойствОбъектов.Наименование КАК ТеррОтдел
		|		ИЗ
		|			Справочник.КВП_Здания.ДополнительныеРеквизиты КАК КВП_ЗданияДополнительныеРеквизиты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|				ПО КВП_ЗданияДополнительныеРеквизиты.Значение = ЗначенияСвойствОбъектов.Ссылка
		|		ГДЕ
		|			КВП_ЗданияДополнительныеРеквизиты.Свойство = &СвойствоТерОтдел
		|			И КВП_ЗданияДополнительныеРеквизиты.Ссылка = &Здание) КАК ВТ_ТерОтдел
		|		ПО (ИСТИНА)";
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Данные = Новый Структура;  
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Данные.Вставить(Колонка.Имя);	
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(Данные, Выборка); 
		Жильцы.Добавить(Данные); 
		
	КонецЦикла;
		
	Возврат Жильцы;

КонецФункции // ПолучитьИнформациюПоЖильцам()
 
Функция ОбменСWS_ПолучитьИнформациюПоДолгам(ЛицевойСчет, ОсновныеРеквизитыЛС)
	
	Долги = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК sum_peni,
	|	СУММА(ВЫБОР
	|			КОГДА ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Начисление)
	|				ТОГДА ЕРЦ_ИтогиПартийВзаиморасчетовЛС.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК sum_dolg,
	|	НАЧАЛОПЕРИОДА(ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия, МЕСЯЦ) КАК month,
	|	ЕРЦ_РеестрДолжников.Номер КАК registry_number,
	|	ЕРЦ_РеестрДолжников.Дата КАК registry_data
	|ИЗ
	|	РегистрСведений.ЕРЦ_ИтогиПартийВзаиморасчетовЛС КАК ЕРЦ_ИтогиПартийВзаиморасчетовЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЕРЦ_РеестрыЛСпоПериодам КАК ЕРЦ_РеестрыЛСпоПериодам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЕРЦ_РеестрДолжников КАК ЕРЦ_РеестрДолжников
	|			ПО ЕРЦ_РеестрыЛСпоПериодам.Реестр = ЕРЦ_РеестрДолжников.Ссылка
	|		ПО (НАЧАЛОПЕРИОДА(ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия, МЕСЯЦ) = ЕРЦ_РеестрыЛСпоПериодам.МесяцДолга)
	|			И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет = ЕРЦ_РеестрыЛСпоПериодам.ЛицевойСчет
	|			И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Организация = ЕРЦ_РеестрыЛСпоПериодам.Организация
	|ГДЕ
	|	ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ПериодОстатков = &ПериодОстатков
	|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.ЛицевойСчет = &ЛицевойСчет
	|	И ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ЕРЦ_ИтогиПартийВзаиморасчетовЛС.Партия, МЕСЯЦ),
	|	ЕРЦ_РеестрДолжников.Номер,
	|	ЕРЦ_РеестрДолжников.Дата";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Организация", ОсновныеРеквизитыЛС.Организация);
	Запрос.УстановитьПараметр("ПериодОстатков", НачалоМесяца(ТекущаяДата()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 
	
	Пока Выборка.Следующий() Цикл   
		
		Данные = Новый Структура;  
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Данные.Вставить(Колонка.Имя);	
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(Данные, Выборка); 
		Долги.Добавить(Данные); 
		
	КонецЦикла;
	
	Возврат Долги;
	
КонецФункции // ПолучитьДолги()

Функция ОбменСWS_ПолучитьРеестры(ЛицевойСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ЕРЦ_РеестрыЛСпоПериодам.МесяцДолга, МЕСЯЦ), ДЕНЬ) КАК Партия,
		|	ЕРЦ_РеестрДолжников.Номер КАК НомерРеестра,
		|	ЕРЦ_РеестрДолжников.Дата КАК ДатаРеестра
		|ИЗ
		|	РегистрСведений.ЕРЦ_РеестрыЛСпоПериодам КАК ЕРЦ_РеестрыЛСпоПериодам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЕРЦ_РеестрДолжников КАК ЕРЦ_РеестрДолжников
		|		ПО ЕРЦ_РеестрыЛСпоПериодам.Реестр = ЕРЦ_РеестрДолжников.Ссылка
		|ГДЕ
		|	ЕРЦ_РеестрыЛСпоПериодам.ЛицевойСчет = &ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партия";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	       
КонецФункции // ПолучитьРеестрыДляОбменаWS()

#КонецОбласти

#КонецОбласти 

// #14211 - новая обработка данных перед формированием ЕПД по пакетам (Тузин Р.А. 06.12.2022)
Процедура СформироватьДокументыЕПДПоПакету(ДокСсылка) Экспорт    
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
												
	// Массив документов ЕПД (если в табличной части уже есть документы)
	МассивДокументовЕПД = Новый Массив;
	Для Каждого Стр Из ДокОбъект.Табл Цикл
		МассивДокументовЕПД.Добавить(Стр.ДокументЕПД);
	КонецЦикла;	
	
	ПараметрыДляНахожденияЕПД = Новый Структура("ДатаПериод, Организация, НастройкаСбораДанных, НеПерезаполнятьЕПД", 
	                                            ?(ДокСсылка.ВыгрузкаЗаАктуальныйПериод = 0, ДокСсылка.Дата, ДокСсылка.МесяцПериод), ДокСсылка.Организация, ДокСсылка.НастройкаСбораДанных, ДокСсылка.НеПерезаполнятьЕПД);
												
	ЗапросЛицСчета = Новый Запрос; 
	МВТ = Новый МенеджерВременныхТаблиц;
    ЗапросЛицСчета.МенеджерВременныхТаблиц = МВТ; 
	РазделениеМеждуЗапросами = ";" + Символы.ПС + "//////////////////////////////////////////////////////////////////////////////// ";
	
	// 1. Соберем лицевые счета из пакетов в выборку (Дом - Пакет - Лицевой счет)
	// 1.1 Временные таблицы лицевых счетов из каждого пакета
	МассивЛицевыхСчетов = Новый Массив;  
	ТекстЗапроса = "";  
	НомерПП = 0;
	Для Каждого СтрПакет Из ДокОбъект.ТаблПакеты Цикл 
		НомерПП = НомерПП + 1;
		ОбъектСпр = СтрПакет.Пакет.Ссылка.ПолучитьОбъект();
		МассивИзПакета = ОбъектСпр.ПолучитьЛицевыеСчетаПоПакету_Массив();
		ЗапросНовыйПакет = "ВЫБРАТЬ КВП_ЛицевыеСчета.Ссылка КАК ЛицСчет, " + Символы.ПС + 
		                            "&Пакет" + Строка(НомерПП) + " КАК Пакет, " + Символы.ПС + 
		                            "КВП_ЛицевыеСчета.Адрес.Владелец КАК Дом " + Символы.ПС + 
		                            "ПОМЕСТИТЬ МассивИзПакета" + Строка(НомерПП) + Символы.ПС + 
		                            " ИЗ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета " + Символы.ПС + 
		                            "ГДЕ КВП_ЛицевыеСчета.Ссылка В(&МассивИзПакета" + Строка(НомерПП) + ")";
		Если ТекстЗапроса = "" Тогда
		    ТекстЗапроса = ЗапросНовыйПакет;
		Иначе
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + РазделениеМеждуЗапросами + Символы.ПС + ЗапросНовыйПакет;
		КонецЕсли;
		ЗапросЛицСчета.УстановитьПараметр("МассивИзПакета" + Строка(НомерПП), МассивИзПакета);   
		ЗапросЛицСчета.УстановитьПараметр("Пакет" + Строка(НомерПП), СтрПакет.Пакет); 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЛицевыхСчетов, МассивИзПакета, Истина); 
	КонецЦикла;	 
	ЗапросЛицСчета.Текст = ТекстЗапроса; 
	РезультатЗапросаЛицСчета = ЗапросЛицСчета.Выполнить(); 	
	
	// 1.2 - общая временная таблица из всех временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	ТекстЗапроса = "";         
	РазделениеМеждуОбъединениями = Символы.ПС + "ОБЪЕДИНИТЬ" + Символы.ПС;
	Для Счетчик = 1 По НомерПП Цикл 
		ЗапросНовоеОбъединение = "ВЫБРАТЬ МассивИзПакета.ЛицСчет" + ?(Счетчик = 1, " КАК ЛицСчет,", ",") + Символы.ПС +
		                                  "МассивИзПакета.Пакет" + ?(Счетчик = 1, " КАК Пакет,", ",") + Символы.ПС +  
		                                  "МассивИзПакета.Дом" + ?(Счетчик = 1, " КАК Дом", "") + Символы.ПС + 
		                                  ?(Счетчик = 1, "ПОМЕСТИТЬ ЛицСчета " + Символы.ПС, "") + 
		                                  " ИЗ МассивИзПакета" + Строка(Счетчик) + " КАК МассивИзПакета";
		Если ТекстЗапроса = "" Тогда
			ТекстЗапроса = ЗапросНовоеОбъединение;
		Иначе
			ТекстЗапроса = ТекстЗапроса + РазделениеМеждуОбъединениями + ЗапросНовоеОбъединение;
		КонецЕсли;	
	КонецЦикла;	 
	
	// 2. Добавим в запрос дубли лицевых счетов в документах ЕПД
	ЛевоеСоединениеДубли = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дбф_Абоненты КАК Абоненты " + Символы.ПС + 
	                                         "ПО ЛицСчета.ЛицСчет = Абоненты.ЛицевойСчет " + Символы.ПС + 
	                                         "И (Абоненты.Период МЕЖДУ &ДатаНачала И &ДатаКонца И НЕ Абоненты.Регистратор В (&МассивДокументовЕПД)) ";	 
	
	// 3. Добавим в запрос документы, которые уже присутствуют в документе Формирование ЕПД
	ЛевоеСоединениеЕПД = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.дбф_Абоненты КАК АбонентыЕПД " + Символы.ПС + 
	                                         "ПО ЛицСчета.ЛицСчет = АбонентыЕПД.ЛицевойСчет " + Символы.ПС + 
	                                         "И (АбонентыЕПД.Период МЕЖДУ &ДатаНачала И &ДатаКонца И АбонентыЕПД.Регистратор В (&МассивДокументовЕПД)) "; 
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыДляНахожденияЕПД.ДатаПериод));
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(ПараметрыДляНахожденияЕПД.ДатаПериод)); 
	Запрос.УстановитьПараметр("МассивДокументовЕПД", МассивДокументовЕПД);
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + РазделениеМеждуЗапросами + Символы.ПС + 
                   "ВЫБРАТЬ ЛицСчета.ЛицСчет КАК ЛицСчет, " + Символы.ПС + 
                             "ЛицСчета.Пакет КАК Пакет, " + Символы.ПС + 
                             "ЛицСчета.Дом КАК Дом, " + Символы.ПС + 
	                         "АбонентыЕПД.Регистратор КАК ЕПД, " + Символы.ПС +
							 "Абоненты.Регистратор КАК Дубль " + Символы.ПС + 
	                         "ИЗ ЛицСчета КАК ЛицСчета " + Символы.ПС +
							 ЛевоеСоединениеДубли + Символы.ПС + 
							 ЛевоеСоединениеЕПД + Символы.ПС +
							 "СГРУППИРОВАТЬ ПО ЛицСчета.Дом, ЛицСчета.Пакет, ЛицСчета.ЛицСчет, Абоненты.Регистратор, АбонентыЕПД.Регистратор " + Символы.ПС +  	                         
							 "ИТОГИ ПО Дом, Пакет, ЕПД";
							 
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	// Общий комментарий выполнения для подставления в документ
	ОбщКомментарий = "";
	
	ВыборкаДом = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаДом.Следующий() Цикл
		// ВыборкаДом.Дом; 
		Дом = ВыборкаДом.Дом;
		ВыборкаПакет = ВыборкаДом.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);  
		Пока ВыборкаПакет.Следующий() Цикл
			// ВыборкаПакет.Пакет; 
			Пакет = ВыборкаПакет.Пакет;
			ВыборкаЕПД = ВыборкаПакет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаЕПД.Следующий() Цикл
				// ВыборкаЕПД.ЕПД;  
				ДокЕПД = ВыборкаЕПД.ЕПД;
				Если ЗначениеЗаполнено(ДокЕПД) И ДокОбъект.НеПерезаполнятьЕПД Тогда 
					ОбщКомментарий = ОбщКомментарий + Строка(Стр.Дом) + " (Пропуск (оставлен как был))" + " : " + "Данные загружены" + Символы.ПС;
					Продолжить;
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Истина);
				Если ЗначениеЗаполнено(ДокЕПД) Тогда
					НовДок = ДокЕПД.ПолучитьОбъект();
				Иначе                                    
					СсылкаНового = Документы.епд_ЕдиныйПлатежныйДокумент.ПолучитьСсылку();
					НовДок = Документы.епд_ЕдиныйПлатежныйДокумент.СоздатьДокумент(); 
					НовДок.УстановитьСсылкуНового(СсылкаНового);
				КонецЕсли; 
				
				НовДок.ВыгрузкаЗаАктуальныйПериод   = ДокОбъект.ВыгрузкаЗаАктуальныйПериод;
				НовДок.МесяцПериод                  = ДокОбъект.МесяцПериод;   
				НовДок.Дата                         = ДокОбъект.Дата;
				НовДок.Организация                  = ПараметрыДляНахожденияЕПД.Организация; 
				НовДок.НастройкаСбораДанных         = ПараметрыДляНахожденияЕПД.НастройкаСбораДанных;
				НовДок.Здание                       = Дом;  
				НовДок.ПакетЛицевыхСчетов           = Пакет;    
				НовДок.ВидОперации                  = Перечисления.ерц_ВидОперацииЕПД.РасчетМесяцаНачисления;
				
				НовДок.ЛицевыеСчета.Очистить();
				
				ВыборкаЛицСчета = ВыборкаЕПД.Выбрать();
				Пока ВыборкаЛицСчета.Следующий() Цикл  
					Если ЗначениеЗаполнено(ВыборкаЛицСчета.Дубль) Тогда
						ОбщКомментарий = ОбщКомментарий + Строка(Дом) + " : " + "Лиц. счет " + Строка(ВыборкаЛицСчета.ЛицСчет) + " уже рассчитан в документе - " + Строка(ВыборкаЛицСчета.Дубль) + Символы.ПС;  
						Продолжить;
					КонецЕсли;	
					
					НовСтр = НовДок.ЛицевыеСчета.Добавить();
					НовСтр.ЛицевойСчет = ВыборкаЛицСчета.ЛицСчет;
				КонецЦикла;	
				
				Попытка
					НовДок.Статус = Перечисления.епд_СтатусыЕПД.Рассчитан; 
					НовДок.Записать(РежимЗаписиДокумента.Проведение);   
					
					// Добавим в табличную часть документа Формирование
					НовСтр = ДокОбъект.Табл.Добавить();
					НовСтр.ДокументЕПД = НовДок.Ссылка;	
					
					ОбщКомментарий = ОбщКомментарий + Строка(Дом) + ?(ЗначениеЗаполнено(ДокЕПД), " (Перерасчет)", " ") + " : " + "Данные загружены" + Символы.ПС;
				Исключение
					ОбщКомментарий = ОбщКомментарий + Строка(Дом) + " : " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС;
				КонецПопытки;	
							
				УстановитьПривилегированныйРежим(Ложь);
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;
	
	ДокОбъект.КомментарийВыполнения = ДокОбъект.КомментарийВыполнения + Символы.ПС + ТекущаяДата() + Символы.ПС + ОбщКомментарий;
	ОбработатьТабличнуюЧасть(ДокОбъект);	 	
	
	ДокОбъект.Статус = "Обработан";
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);	
КонецПроцедуры	

Процедура СформироватьДокументыЕПДПоПакету_Старый(ДокСсылка) Экспорт   	
	ДокОбъект = ДокСсылка.ПолучитьОбъект();  
	
	// #13812 - Параметры для запроса документа ЕПД - Тузин Р.А. 
	ПараметрыДляНахожденияЕПД = Новый Структура("ДатаПериод, Организация, НастройкаСбораДанных, НеПерезаполнятьЕПД", 
	                                            ?(ДокСсылка.ВыгрузкаЗаАктуальныйПериод = 0, ДокСсылка.Дата, ДокСсылка.МесяцПериод), ДокСсылка.Организация, ДокСсылка.НастройкаСбораДанных, ДокСсылка.НеПерезаполнятьЕПД);

	МассивДанных = Новый Массив;  
	ТЗ = Новый ТаблицаЗначений;
	ЗаполнитьМассивЛицСчетов(МассивДанных, ДокОбъект, ПараметрыДляНахожденияЕПД.ДатаПериод, ТЗ);	
	
	МассивДокументов = Новый Массив;
	Если Не ДокОбъект.НеПерезаполнятьЕПД Тогда  
		Для Каждого Стр Из ДокОбъект.Табл Цикл
			МассивДокументов.Добавить(Стр.ДокументЕПД.Ссылка);
		КонецЦикла;	
	    ДокОбъект.Табл.Очистить();  
	КонецЕсли;	
	ОбщКомментарий = "";
	Для Каждого Стр Из МассивДанных Цикл	
		ТекстОшибки = "";
		ДокЕПД = Документы.епд_ЕдиныйПлатежныйДокумент.ПустаяСсылка();   
		 
		Попытка
	        ОбработатьДом(Стр, ТекстОшибки, Стр.Пакет, ПараметрыДляНахожденияЕПД, ДокОбъект, ДокЕПД, ТЗ);
		Исключение
			ТекстОшибки = "Ошибка! " + ТекстОшибки;
		КонецПопытки;
		
		СообщениеиеПерерасчета = "";
		Если Не МассивДокументов.Найти(ДокЕПД) = Неопределено Тогда 
			Если ДокОбъект.НеПерезаполнятьЕПД Тогда
			    СообщениеиеПерерасчета = "(Пропуск (оставлен как был))";
			Иначе
				СообщениеиеПерерасчета = "(Перерасчет)";
			КонецЕсли;	
		КонецЕсли;
		
		ОбщКомментарий = ОбщКомментарий + Строка(Стр.Дом) + " " + СообщениеиеПерерасчета + " : " + ?(ТекстОшибки = "", "Данные загружены", ТекстОшибки) + Символы.ПС;
	КонецЦикла;	   
	ДокОбъект.КомментарийВыполнения = ДокОбъект.КомментарийВыполнения + Символы.ПС + ТекущаяДата() + Символы.ПС + ОбщКомментарий;
	ОбработатьТабличнуюЧасть(ДокОбъект);	 	
	
	
	ДокОбъект.Статус = "Обработан";
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

Процедура ОбработатьТабличнуюЧасть(ДокОбъект)
	СуммаНачислений    = 0;
	СуммаПени          = 0; 
	ОбщееКоличествоЛС  = 0;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ЛицСчет");
	
	Для Каждого Стр Из ДокОбъект.Табл Цикл
		Если Стр.ДокументЕПД.Статус = Перечисления.епд_СтатусыЕПД.Рассчитан Тогда
			Стр.Рассчитан = Истина;
		Иначе
			Стр.Рассчитан = Ложь;
		КонецЕсли;	             
		Стр.ЕстьДвижения = ЕстьДвижения(Стр.ДокументЕПД, СуммаНачислений, СуммаПени, ТЗ);	
	КонецЦикла;	
	ТЗ.Свернуть("ЛицСчет");
	
	// Общий данные
	ДокОбъект.СуммаНачислений    = СуммаНачислений;
	ДокОбъект.СуммаПени          = СуммаПени;
	ДокОбъект.ОбщееКоличествоЛС  = ТЗ.Количество();	
КонецПроцедуры  

Функция ЕстьДвижения(ДокументЕПД, СуммаНачислений, СуммаПени, ТЗ)
	Результат = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	дбф_Абоненты.NLS_ID КАК ЛицСчет,
	              |	дбф_Абоненты.PENI_NACH КАК НачисленоПени,
	              |	дбф_Абоненты.IT_IPU КАК НачисленоИПУ,
	              |	дбф_Абоненты.IT_OPU КАК НачисленоОПУ
	              |ИЗ
	              |	РегистрСведений.дбф_Абоненты КАК дбф_Абоненты
	              |ГДЕ
	              |	дбф_Абоненты.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", ДокументЕПД.Ссылка);  
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Результат = Ложь;
	Иначе	
		Результат = Истина;
	КонецЕсли;	
	Пока Выборка.Следующий() Цикл
		НовСтр = ТЗ.Добавить();
		НовСтр.ЛицСчет = Выборка.ЛицСчет;
		
		СуммаНачислений = СуммаНачислений + Выборка.НачисленоИПУ + Выборка.НачисленоОПУ;
		СуммаПени = СуммаПени + Выборка.НачисленоПени;
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьМассивЛицСчетов(Массив, ДокОбъект, ДатаПериод, ТЗ)  
	ТЗ.Колонки.Добавить("ЛицевойСчет");
	ТЗ.Колонки.Добавить("Дом"); 
	ТЗ.Колонки.Добавить("Пакет");
	
	Для Каждого СтрПакет Из ДокОбъект.ТаблПакеты Цикл
		ОбъектСпр = СтрПакет.Пакет.Ссылка.ПолучитьОбъект();
		СЗ = ОбъектСпр.ПолучитьЛицевыеСчетаПоПакету_СписокЗначений();
		
		Для Каждого Стр Из СЗ Цикл
			НовСтр = ТЗ.Добавить();
			НовСтр.Дом = Стр.Значение.Адрес.Владелец;
			НовСтр.ЛицевойСчет = Стр.Значение; 
			НовСтр.Пакет = СтрПакет.Пакет.Ссылка;
		КонецЦикла;	
	КонецЦикла;	
	ТЗ.Свернуть("ЛицевойСчет, Дом, Пакет");
	ТЗ.Колонки.Добавить("ЛицевойСчетДубль");     
	ТЗ.Колонки.Добавить("ДокументДубль");
	ПоискДублейВУказанномПериоде(ТЗ, ДатаПериод, ДокОбъект);
	
	// Отсортируем по домам
	ТЗ_Дома = ТЗ.Скопировать();
	ТЗ_Дома.Свернуть("Дом");  	
	
	Для Каждого СтрДом Из ТЗ_Дома Цикл
		ТЗ_ЛицСчета = ТЗ.НайтиСтроки(Новый Структура("Дом", СтрДом.Дом));
		МассивЛицСчетов = Новый Массив;
		Для Каждого Стр Из ТЗ_ЛицСчета Цикл 
			МассивЛицСчетов.Добавить(Стр.ЛицевойСчет);	
		КонецЦикла;	
		Массив.Добавить(Новый Структура("Дом, Пакет, ЛицевыеСчета", СтрДом.Дом, Стр.Пакет, МассивЛицСчетов));
	КонецЦикла;	
КонецПроцедуры  

Процедура ПоискДублейВУказанномПериоде(ТЗ, ДатаПериод, ДокОбъект)
	МассивЛицСчетов = Новый Массив;
	Для Каждого Стр Из ТЗ Цикл
		МассивЛицСчетов.Добавить(Стр.ЛицевойСчет.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	епд_ЕдиныйПлатежныйДокументЛицевыеСчета.Ссылка КАК Ссылка,
	               |	епд_ЕдиныйПлатежныйДокументЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	               |ИЗ
	               |	Документ.епд_ЕдиныйПлатежныйДокумент.ЛицевыеСчета КАК епд_ЕдиныйПлатежныйДокументЛицевыеСчета
	               |ГДЕ
	               |	епд_ЕдиныйПлатежныйДокументЛицевыеСчета.ЛицевойСчет В(&МассивЛицСчетов)
	               |	И епд_ЕдиныйПлатежныйДокументЛицевыеСчета.Ссылка.Проведен = ИСТИНА
	               |	И епд_ЕдиныйПлатежныйДокументЛицевыеСчета.Ссылка.МесяцПериод МЕЖДУ &ДатаНачала И &ДатаКонца
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	епд_ЕдиныйПлатежныйДокументЛицевыеСчета.Ссылка,
	               |	епд_ЕдиныйПлатежныйДокументЛицевыеСчета.ЛицевойСчет";   
	Запрос.УстановитьПараметр("МассивЛицСчетов", МассивЛицСчетов);  
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаПериод));
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(ДатаПериод)); 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("ЛицевойСчет", Выборка.ЛицевойСчет));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЛицевойСчетДубль = Выборка.ЛицевойСчет;
			НайденнаяСтрока.ДокументДубль = Выборка.Ссылка;
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ОбработатьДом(СтруктураДом, ТекстОшибки, ПакетЛицСчетов, ПараметрыДляНахожденияЕПД, ОбъектДок, ДокЕПД, ТЗ)
	УстановитьПривилегированныйРежим(Истина);
	НайденныйДокумент                        = СоздатьНайтиДокумент(СтруктураДом.Дом, ПакетЛицСчетов, ПараметрыДляНахожденияЕПД);
	
	Если Не НайденныйДокумент = Неопределено И ПараметрыДляНахожденияЕПД.НеПерезаполнятьЕПД И НайденныйДокумент.Проведен Тогда
		ТекстОшибки = "Пропуск (оставлен как был)";  
		ДокЕПД = НайденныйДокумент.Ссылка;
		Возврат;
	КонецЕсли;	   
	
	
	
	//ОбновитьНумерациюОбъектов(Метаданные.Документы.епд_ЕдиныйПлатежныйДокумент); 
	Если НайденныйДокумент = Неопределено Тогда   
		//ОбновитьНумерациюОбъектов(Метаданные.Документы.епд_ЕдиныйПлатежныйДокумент);  
		СсылкаНового = Документы.епд_ЕдиныйПлатежныйДокумент.ПолучитьСсылку();
		НайденныйДокумент                    = Документы.епд_ЕдиныйПлатежныйДокумент.СоздатьДокумент();    
		НайденныйДокумент.УстановитьСсылкуНового(СсылкаНового);
		ДокЕПД = НайденныйДокумент.ПолучитьСсылкуНового();
	КонецЕсли;	
	
	НайденныйДокумент.ВыгрузкаЗаАктуальныйПериод = ОбъектДок.ВыгрузкаЗаАктуальныйПериод;
	НайденныйДокумент.МесяцПериод            = ОбъектДок.МесяцПериод;
	НайденныйДокумент.Дата                   = ОбъектДок.Дата; // Мин(ТекущаяДата(), КонецМесяца(ПараметрыДляНахожденияЕПД.ДатаПериод));
	НайденныйДокумент.Организация            = ПараметрыДляНахожденияЕПД.Организация;
	НайденныйДокумент.НастройкаСбораДанных   = ПараметрыДляНахожденияЕПД.НастройкаСбораДанных;
	НайденныйДокумент.Здание                 = СтруктураДом.Дом; 
	Если Не ЗначениеЗаполнено(НайденныйДокумент.ПакетЛицевыхСчетов) Тогда
		НайденныйДокумент.ПакетЛицевыхСчетов = ПакетЛицСчетов;
	КонецЕсли;
	НайденныйДокумент.ВидОперации            = Перечисления.ерц_ВидОперацииЕПД.РасчетМесяцаНачисления;
	
	НайденныйДокумент.ЛицевыеСчета.Очистить();
	Для Каждого Стр Из СтруктураДом.ЛицевыеСчета Цикл
		// #14062 - Тузин Р.А. дополнительная проверка на дубль лицевого счета будет теперь здесь
		// Необходимо понимать, что лицевой счет (возможный дубль) по факту находится в другом документе   
		НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("ЛицевойСчетДубль", Стр.Ссылка));  
		Если НайденныеСтроки.Количество() = 0 Тогда
			НовСтр = НайденныйДокумент.ЛицевыеСчета.Добавить();
			НовСтр.ЛицевойСчет = Стр.Ссылка;
		Иначе	
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.ДокументДубль.Ссылка = НайденныйДокумент.Ссылка Тогда
					НовСтр = НайденныйДокумент.ЛицевыеСчета.Добавить();
					НовСтр.ЛицевойСчет = Стр.Ссылка;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;	
	
	//#13799 - Тузин Р.А. заполнение регистров (Документ ЕПД) происходит при проведении документа
	//Попытка
	//	НайденныйДокумент.Записать(РежимЗаписиДокумента.Запись);
	//Исключение
	//	// Запись события в журнал регистрации для системного администратора.
	//	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ТФ. Запись ЕПД'"),
	//	УровеньЖурналаРегистрации.Ошибка,,,
	//	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	//	ВызватьИсключение;
	//КонецПопытки;
		
	//НайденныйДокумент.ЗаполнитьРегистры(ТекстОшибки);
	//НайденныйДокумент = НайденныйДокумент.Ссылка.ПолучитьОбъект();
	//НайденныйДокумент.Статус = Перечисления.епд_СтатусыЕПД.Рассчитан;
	Попытка                                                            
		НайденныйДокумент.Статус = Перечисления.епд_СтатусыЕПД.Рассчитан;
		НайденныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		// Запись события в журнал регистрации для системного администратора.
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ТФ. Проведение ЕПД'"),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// #14211 - будем писать в текст ошибки подробное представление об ошибке    
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		//ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;

	// Добавим документ в табличную часть 
	НовСтр = ОбъектДок.Табл.Добавить();
	НовСтр.ДокументЕПД = НайденныйДокумент.Ссылка;	 
	
	ДокЕПД = НайденныйДокумент.Ссылка;  
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры  

Функция СоздатьНайтиДокумент(Дом, ПакетЛицСчетов, ПараметрыДляНахожденияЕПД)	
	//Результат = Документы.епд_ЕдиныйПлатежныйДокумент.СоздатьДокумент(); 
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	епд_ЕдиныйПлатежныйДокумент.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.епд_ЕдиныйПлатежныйДокумент КАК епд_ЕдиныйПлатежныйДокумент
	               |ГДЕ
	               |	епд_ЕдиныйПлатежныйДокумент.МесяцПериод МЕЖДУ &ДатаНачала И &ДатаКонца
	               |	И епд_ЕдиныйПлатежныйДокумент.Организация = &Организация
	               |	И епд_ЕдиныйПлатежныйДокумент.НастройкаСбораДанных = &НастройкаСбораДанных
	               |	И епд_ЕдиныйПлатежныйДокумент.Здание = &Здание
	               |	И епд_ЕдиныйПлатежныйДокумент.ПакетЛицевыхСчетов = &Пакет
	               |	И епд_ЕдиныйПлатежныйДокумент.Проведен = ИСТИНА
	               |	И епд_ЕдиныйПлатежныйДокумент.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПараметрыДляНахожденияЕПД.ДатаПериод));
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(ПараметрыДляНахожденияЕПД.ДатаПериод));
	Запрос.УстановитьПараметр("Организация", ПараметрыДляНахожденияЕПД.Организация);
	Запрос.УстановитьПараметр("НастройкаСбораДанных", ПараметрыДляНахожденияЕПД.НастройкаСбораДанных);
	Запрос.УстановитьПараметр("Здание", Дом);  
	Запрос.УстановитьПараметр("Пакет", ПакетЛицСчетов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Ссылка.ПолучитьОбъект();
		// #14211 - не будем перезаписывать документ (ОтменаПроведения), документ все равно будет переформирован
		//Если ПараметрыДляНахожденияЕПД.НеПерезаполнятьЕПД = Ложь Тогда  
		//	//#13799 - Тузин Р.А. очистка записей в регистре происходит при отмене проведения
		//	//Результат.ОчиститьРегистры();
		//	Результат.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
		//	Результат = Результат.Ссылка.ПолучитьОбъект();
		//КонецЕсли;	
	КонецЦикла;	
	
	Возврат Результат;	
КонецФункции

#Область АРМ_ОДПУ
                                                                                                      
Процедура ЗаполнитьВводПоказанийСчетчикаПоЗданию(Документ, Здание, ТаблицаПоказаний) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;   
	
	Если Не ЗначениеЗаполнено(Здание) Тогда
		Возврат;
	КонецЕсли;   
	
	Если ТаблицаПоказаний.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли; 
	
	Док = Документ.ПолучитьОбъект();
	Док.Главная.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	вт.Ссылка КАК Счетчик,
		|	МАКСИМУМ(вт.Тарифность) КАК Тарифность,
		|	МАКСИМУМ(вт.КоэффициентТрансформации) КАК КоэффициентТрансформации,
		|	МАКСИМУМ(вт.Разрядность) КАК Разрядность,
		|	МАКСИМУМ(вт.КоэффициентЗнаменатель) КАК КоэффициентЗнаменатель
		|ИЗ
		|	(ВЫБРАТЬ
		|		КВП_Счетчики.Ссылка КАК Ссылка,
		|		КВП_Счетчики.Тарифность КАК Тарифность,
		|		КВП_Счетчики.Коэффициент КАК КоэффициентТрансформации,
		|		КВП_Счетчики.Разрядность КАК Разрядность,
		|		1 КАК КоэффициентЗнаменатель
		|	ИЗ
		|		Справочник.КВП_Счетчики КАК КВП_Счетчики
		|	ГДЕ
		|		КВП_Счетчики.Ссылка В(&Счетчики)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТабСрезПоследних.Счетчик,
		|		NULL,
		|		NULL,
		|		NULL,
		|		КОЛИЧЕСТВО(*)
		|	ИЗ
		|		РегистрСведений.КВП_ЗакрепленныеСчетчики КАК ТабСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(Таб.Период) КАК Период,
		|				Таб.Объект КАК Объект,
		|				Таб.Счетчик КАК Счетчик
		|			ИЗ
		|				РегистрСведений.КВП_ЗакрепленныеСчетчики КАК Таб
		|			ГДЕ
		|				Таб.Период <= &ДатаДокумента
		|				И Таб.Счетчик В(&Счетчики)
		|				И НЕ Таб.Счетчик.ПризнакВыходногоСчетчика
		|				И Таб.ДатаИзменения <= &ДатаДокумента
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Таб.Счетчик,
		|				Таб.Объект) КАК ВложенныйЗапрос
		|			ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
		|				И ТабСрезПоследних.Объект = ВложенныйЗапрос.Объект
		|				И ТабСрезПоследних.Счетчик = ВложенныйЗапрос.Счетчик
		|	ГДЕ
		|		ТабСрезПоследних.Действует
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТабСрезПоследних.Счетчик) КАК вт
		|
		|СГРУППИРОВАТЬ ПО
		|	вт.Ссылка"; 
		
	Запрос.УстановитьПараметр("Счетчики", ТаблицаПоказаний.ВыгрузитьКолонку("Счетчик"));
	Запрос.УстановитьПараметр("ДатаДокумента", Док.Дата);
	
	ДанныеСчетчиков = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТаблицаПоказаний Цикл
		
		НовСтрока = Док.Главная.Добавить();   
		
		ЗаполнитьЗначенияСвойств(НовСтрока, Стр);
		
		НСтрокиРеквизиты = ДанныеСчетчиков.НайтиСтроки(Новый Структура("Счетчик", Стр.Счетчик));  
		
		Если НСтрокиРеквизиты.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(НовСтрока, НСтрокиРеквизиты[0]);
		КонецЕсли;  
		
		НовСтрока.Объект = Здание;   
		//НовСтрока.Помещение ОДПУ только по зданиям идет
		
		НовСтрока.ДатаПоказания = Док.Дата; 
				
		//НовСтрока.ПредыдущееПоказаниеНачальное не увидел, чтобы реквизит как-то использовался                   
		
		//Значения всегда = 1
		НовСтрока.КоэффициентЧислитель = 1;   
		НовСтрока.ТемпературныйКоэффициент = 1;  
		
		//заметил что реквизит имеет жесткую связь с признаком ввода начальных остатков
		//реквизит на мой взгляд "костыльный", т.к. данные отправляются в регистры при любом значении
		//увидел только проверку на пустые значения показаний в связке с этим реквизитом
		НовСтрока.ПоказанияКорректны = Док.ВводНачальныхПоказаний;
		
		//СреднийРасход:
		//Средний расход не фиксируется в регистрах(значит его нет в отчетах).
		//И не увидел, где бы он использовался для замены реальных показаний(функциональной нагрузки нет).
		//Есть закономерность: "Средний расход дневной" заполнен, только при заполненном реквизите "ДневноеПоказание"
		//Глобальным поиском увидел, что средний расход используется только для уведомления пользователя
		//т.к. пользователи не будут видеть карточку документа, а будут использовать АРМ - уведомления они увидят только потом.
		//закомментирую пока что для оптимизации, т.к. не нет причин рассчитывать его.
		
		//СтруктураСреднихРасходов = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСреднийРасход(Стр.Счетчик, Док.Дата, 6); // Структура: "Дневной", "Ночной", "Пиковый".
		//
		//НовСтрока.СреднийРасходДневной = СтруктураСреднихРасходов.Дневной;
		//НовСтрока.СреднийРасходНочной = СтруктураСреднихРасходов.Ночной;
		//НовСтрока.СреднийРасходПиковый = СтруктураСреднихРасходов.Пиковый;
		
	КонецЦикла;
	
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

#КонецОбласти

//Здание можно получать и через ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//Но процедура будет собирать нужный запрос как конструктор и тратить на это процессорное время
Функция ПолучитьЗданиеЛицевогоСчета(ЛицевойСчет) Экспорт 
	
	Здание = Справочники.КВП_Здания.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_Помещения.Владелец КАК Здание
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|		ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка = &ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
    	Здание = Выборка.Здание;
	КонецЕсли;
	
	Возврат Здание;
	
КонецФункции // ПолучитьЗданиеЛицевогоСчета() 

//Здание можно получать и через ОбщегоНазначения.ЗначениеРеквизитаОбъекта
//Но процедура будет собирать нужный запрос как конструктор и тратить на это процессорное время
Функция ПолучитьЗданиеПомещения(Помещение) Экспорт 

	Здание = Справочники.КВП_Здания.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_Помещения.Владелец КАК Здание
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|ГДЕ
		|	УПЖКХ_Помещения.Ссылка = &Помещение";
	
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
    	Здание = Выборка.Здание;
	КонецЕсли;
	
	Возврат Здание;

КонецФункции // ПолучитьЗданиеПомещения()

//Очень часто приходится получать здание у различных объектов
//Для удобства сделал эту процедуру
Функция ПолучитьЗданиеОбъекта(Объект) Экспорт 
	
	ТипОбъекта = ТипЗнч(Объект);  
	
	Если ТипОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		Здание = ПолучитьЗданиеЛицевогоСчета(Объект);	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		Здание = ПолучитьЗданиеПомещения(Объект);
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КВП_Здания") Тогда
		Здание = Объект;
	Иначе
		ВызватьИсключение СтрШаблон("Не предусмотренный тип объекта %1", ТипОбъекта);
	КонецЕсли;	    
	
	Возврат Здание;
	
КонецФункции // ПолучитьЗданиеОбъекта()
 
#Область НаборыУслуг

Функция ЕРЦ_ИспользоватьНаборыУслуг() Экспорт 
	//Для работы с наборами услуг необходимо иметь роль "ЕРЦ_НаборыУслугЧтение", либо "ЕРЦ_НаборыУслугЗапись"
	//Включение функционала набора услуг осуществляется константой "ЕРЦ_ИспользоватьНаборыУслуг"
	//Обе эти роли имеют доступ на уровне "Чтение/Просмотр" к константе
	//Поэтому проверяем права доступа к константе и если они есть то еще и значение.
	//Не используем функцилональную опцию, тк она не учитывает права доступа
	//Возврат ПравоДоступа("Чтение", Метаданные.Константы.ЕРЦ_ИспользоватьНаборыУслуг) и
	//Константы.ЕРЦ_ИспользоватьНаборыУслуг.Получить();	   
	
	////++ #14419 Старозубаев пропуск заполнения услуг 09.01.2023 сверху то что было 
	// Убрал проверку на права что бы работало у всех    
	УстановитьПривилегированныйРежим(Истина); 
	ИспользоватьНаборыУслуг  =   Константы.ЕРЦ_ИспользоватьНаборыУслуг.Получить();
	УстановитьПривилегированныйРежим(Ложь); 
	Возврат ИспользоватьНаборыУслуг;  
КонецФункции // ЕРЦ_ИспользоватьНаборыУслуг()

// Функция делает проверку на соответствие услуг назначенным наборам услуг на здания
//
// Параметры:
//  УслугиВсехЗданий  - ТаблицаЗначений - Таблица услуг для зданий, можно получить ее так ЕРЦ_ОбщийМодуль.ПолучитьПустуюТаблицуУслугиЗданий()
//                 Колонки:
//						"Здание" - Тип СправочникСсылка.КВП_Здания
//						"Услуга" - Тип СправочникСсылка.КВП_Услуги
//  Период  - Дата - Дата среза набора услуг
//
// Возвращаемое значение:
//   Булево   - "Истина" обозначает отсутствие ошибок, "Ложь" - обратное
//
Функция ПроверкаСоответствияУслугЗданиям(УслугиВсехЗданийПоВидамЛС, Период) Экспорт 
	
	Если УслугиВсехЗданийПоВидамЛС.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Успешно = Истина;
	
	//Делаем профилактическую группировку
	УслугиВсехЗданийПоВидамЛС.Свернуть("Здание,ЕРЦ_ВидЛицевогоСчета,Услуга");
	УслугиВсехЗданийПоВидамЛС.Индексы.Добавить("Здание,ЕРЦ_ВидЛицевогоСчета");
	МассивТекстОшибок = Новый Массив;
	
	ЗданияПоВидамЛС = УслугиВсехЗданийПоВидамЛС.Скопировать(,"Здание,ЕРЦ_ВидЛицевогоСчета");
	ЗданияПоВидамЛС.Свернуть("Здание,ЕРЦ_ВидЛицевогоСчета");
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ТЗ", ЗданияПоВидамЛС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
	|	ТЗ.Здание КАК Здание
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабСрезПоследних.Здание КАК Здание,
	|	ТабСрезПоследних.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
	|	ЕРЦ_НаборыУслугУслуги.Услуга КАК Услуга
	|ИЗ
	|	РегистрСведений.ЕРЦ_НаборыУслуг КАК ТабСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(Таб.Период) КАК Период,
	|			Таб.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
	|			Таб.Здание КАК Здание
	|		ИЗ
	|			РегистрСведений.ЕРЦ_НаборыУслуг КАК Таб
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
	|				ПО Таб.Здание = ТЗ.Здание
	|					И Таб.ЕРЦ_ВидЛицевогоСчета = ТЗ.ЕРЦ_ВидЛицевогоСчета
	|		ГДЕ
	|			Таб.Период <= &Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Таб.Здание,
	|			Таб.ЕРЦ_ВидЛицевогоСчета) КАК ВложенныйЗапрос
	|		ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
	|			И ТабСрезПоследних.Здание = ВложенныйЗапрос.Здание
	|			И ТабСрезПоследних.ЕРЦ_ВидЛицевогоСчета = ВложенныйЗапрос.ЕРЦ_ВидЛицевогоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕРЦ_НаборыУслуг.Услуги КАК ЕРЦ_НаборыУслугУслуги
	|		ПО ТабСрезПоследних.НаборУслуг = ЕРЦ_НаборыУслугУслуги.Ссылка";
		
	Запрос.УстановитьПараметр("Период", Период);
	
	ДопустимыеУслугиЗданийПоВидамЛС = Запрос.Выполнить().Выгрузить();  
	ДопустимыеУслугиЗданийПоВидамЛС.Индексы.Добавить("Здание,ЕРЦ_ВидЛицевогоСчета");
	
	Для каждого СтрЗданиеПоВидуЛС Из ЗданияПоВидамЛС Цикл
		
		ДопустимыеУслуги = Новый Соответствие;
		Для каждого Нстр Из ДопустимыеУслугиЗданийПоВидамЛС.НайтиСтроки(Новый Структура(
			"Здание,ЕРЦ_ВидЛицевогоСчета", СтрЗданиеПоВидуЛС.Здание, СтрЗданиеПоВидуЛС.ЕРЦ_ВидЛицевогоСчета)) Цикл
			ДопустимыеУслуги.Вставить(Нстр.Услуга, Истина);
		КонецЦикла;
		
		Если ДопустимыеУслуги.Количество() = 0 Тогда   
			//Если для здания не назначен набор услуг
			//значит и проверку делать не надо
			Продолжить;	
		КонецЕсли; 
		
		Услуги = Новый Соответствие;
		Для каждого Нстр Из УслугиВсехЗданийПоВидамЛС.НайтиСтроки(Новый Структура(
			"Здание,ЕРЦ_ВидЛицевогоСчета", СтрЗданиеПоВидуЛС.Здание, СтрЗданиеПоВидуЛС.ЕРЦ_ВидЛицевогоСчета)) Цикл
			Услуги.Вставить(Нстр.Услуга, Истина);
		КонецЦикла;
		
		Для каждого КлЗн Из Услуги Цикл
			Если ДопустимыеУслуги.Получить(КлЗн.Ключ) = Неопределено Тогда
				ЕРЦ_ОбщийМодульКлиентСервер.ДобавитьОшибку(МассивТекстОшибок, СтрШаблон(
				"Для здания ""%1"" для вида ЛС ""%2"" не назначен набор услуг, содержащий услугу ""%3""",
				СтрЗданиеПоВидуЛС.Здание, СтрЗданиеПоВидуЛС.ЕРЦ_ВидЛицевогоСчета, КлЗн.Ключ));
			КонецЕсли; 
		КонецЦикла;
		
	КонецЦикла;
	
	Если МассивТекстОшибок.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрСоединить(МассивТекстОшибок, Символы.ПС + Символы.ПС));
		Успешно = Ложь;
	КонецЕсли; 				
	
	Возврат Успешно;
	
КонецФункции // ПроверкаСоответствияУслугЗданиям()

Функция ПолучитьПустуюТаблицуУслугиЗданий() Экспорт 
	
	УслугиВсехЗданий = Новый ТаблицаЗначений;
	УслугиВсехЗданий.Колонки.Добавить("Здание", Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	УслугиВсехЗданий.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	УслугиВсехЗданий.Колонки.Добавить("ЕРЦ_ВидЛицевогоСчета", Новый ОписаниеТипов("ПеречислениеСсылка.ЕРЦ_ВидыЛицевыхСчетов"));
	
	Возврат УслугиВсехЗданий;
	
КонецФункции // ПолучитьПустуюТаблицуУслугиЗданий()

Функция ПолучитьРеквизитыЛСДляПроверкиНабораУслуг(ЛицевыеСчета) Экспорт 
	
	СоответствиеЛС = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
	|	КВП_ЛицевыеСчета.ЕРЦ_ОтключитьПроверкуНабораУслуг КАК ЕРЦ_ОтключитьПроверкуНабораУслуг,
	|	УПЖКХ_Помещения.Владелец КАК Здание,
	|	КВП_ЛицевыеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&ЛицевыеСчета)";
	
	Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл  
		Реквизиты = Новый Структура;
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Реквизиты.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;   
		СоответствиеЛС.Вставить(Выборка.Ссылка, Реквизиты);
	КонецЦикла;
	
	Возврат СоответствиеЛС;
	
КонецФункции // ПолучитьРеквизитыЛСДляПроверкиНабораУслуг()

//Функция ПолучитьТЗСУслугамиОснованиями(ТЗ, ПериодСреза) Экспорт 
//	
//	ТЗ.Свернуть("Здание,ЕРЦ_ВидЛицевогоСчета,Услуга");
//	ТЗВсеУслуги = ТЗ.Скопировать(,"Услуга");
//	ТЗВсеУслуги.Свернуть("Услуга");
//	ВсеУслуги = ТЗВсеУслуги.ВыгрузитьКолонку("Услуга");
//	ТЗРазрезы = ТЗ.Скопировать(,"Здание,ЕРЦ_ВидЛицевогоСчета");
//	ТЗРазрезы.Свернуть("Здание,ЕРЦ_ВидЛицевогоСчета");
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ВсеУслуги", ВсеУслуги);
//	Запрос.УстановитьПараметр("ТЗРазрезы", ТЗРазрезы);
//	Запрос.УстановитьПараметр("ПериодСреза", ПериодСреза);
//	Запрос.УстановитьПараметр("ТЗ", ТЗ);
//	
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	ТЗРазрезы.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
//	|	ТЗРазрезы.Здание КАК Здание
//	|ПОМЕСТИТЬ ТЗРазрезы
//	|ИЗ
//	|	&ТЗРазрезы КАК ТЗРазрезы
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТЗ.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
//	|	ТЗ.Здание КАК Здание,
//	|	ТЗ.Услуга КАК Услуга
//	|ПОМЕСТИТЬ ТЗ
//	|ИЗ
//	|	&ТЗ КАК ТЗ
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТЗРазрезы.Здание КАК Здание,
//	|	ТЗРазрезы.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
//	|	ТабСрезПоследних.Услуга КАК Услуга,
//	|	ТабСрезПоследних.УслугаОснование КАК УслугаОснование
//	|ИЗ
//	|	РегистрСведений.КВП_ЗависимостиУслуг КАК ТабСрезПоследних
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			МАКСИМУМ(Таб.Период) КАК Период,
//	|			Таб.УслугаОснование КАК УслугаОснование,
//	|			Таб.Услуга КАК Услуга,
//	|			Таб.Организация КАК Организация,
//	|			Таб.Объект КАК Объект
//	|		ИЗ
//	|			РегистрСведений.КВП_ЗависимостиУслуг КАК Таб
//	|		ГДЕ
//	|			Таб.Период <= &ПериодСреза
//	|			И Таб.Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
//	|			И Таб.Услуга В(&ВсеУслуги)
//	|		
//	|		СГРУППИРОВАТЬ ПО
//	|			Таб.УслугаОснование,
//	|			Таб.Услуга,
//	|			Таб.Организация,
//	|			Таб.Объект) КАК ВложенныйЗапрос
//	|		ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
//	|			И ТабСрезПоследних.УслугаОснование = ВложенныйЗапрос.УслугаОснование
//	|			И ТабСрезПоследних.Услуга = ВложенныйЗапрос.Услуга
//	|			И ТабСрезПоследних.Организация = ВложенныйЗапрос.Организация
//	|			И ТабСрезПоследних.Объект = ВложенныйЗапрос.Объект,
//	|	ТЗРазрезы КАК ТЗРазрезы
//	|ГДЕ
//	|	ТабСрезПоследних.Действует
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ТабСрезПоследних.Объект,
//	|	ВложенныйЗапрос.ЕРЦ_ВидЛицевогоСчета,
//	|	ТабСрезПоследних.Услуга,
//	|	ТабСрезПоследних.УслугаОснование
//	|ИЗ
//	|	РегистрСведений.КВП_ЗависимостиУслуг КАК ТабСрезПоследних
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//	|			МАКСИМУМ(Таб.Период) КАК Период,
//	|			Таб.УслугаОснование КАК УслугаОснование,
//	|			Таб.Услуга КАК Услуга,
//	|			Таб.Организация КАК Организация,
//	|			Таб.Объект КАК Объект,
//	|			ТЗ.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета
//	|		ИЗ
//	|			РегистрСведений.КВП_ЗависимостиУслуг КАК Таб
//	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
//	|				ПО Таб.Объект = ТЗ.Здание
//	|					И Таб.Услуга = ТЗ.Услуга
//	|		ГДЕ
//	|			Таб.Период <= &ПериодСреза
//	|		
//	|		СГРУППИРОВАТЬ ПО
//	|			Таб.УслугаОснование,
//	|			Таб.Услуга,
//	|			Таб.Организация,
//	|			Таб.Объект,
//	|			ТЗ.ЕРЦ_ВидЛицевогоСчета) КАК ВложенныйЗапрос
//	|		ПО ТабСрезПоследних.Период = ВложенныйЗапрос.Период
//	|			И ТабСрезПоследних.УслугаОснование = ВложенныйЗапрос.УслугаОснование
//	|			И ТабСрезПоследних.Услуга = ВложенныйЗапрос.Услуга
//	|			И ТабСрезПоследних.Организация = ВложенныйЗапрос.Организация
//	|			И ТабСрезПоследних.Объект = ВложенныйЗапрос.Объект
//	|ГДЕ
//	|	ТабСрезПоследних.Действует
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	ТЗ.Здание,
//	|	ТЗ.ЕРЦ_ВидЛицевогоСчета,
//	|	ТЗ.Услуга,
//	|	ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
//	|ИЗ
//	|	ТЗ КАК ТЗ";
//	
//	Возврат Запрос.Выполнить().Выгрузить();

//КонецФункции // ПолучитьТЗСУслугамиОснованиями()

#КонецОбласти

Функция МониторингФоновыхЗаданий(МассивФоновыхЗаданий) Экспорт 
	
	ВременныйМассивФоновыхЗаданий = Новый Массив; 
	СчетчикОтменено = 0;  
	СчетчикЗавершеноАварийно = 0;
	СчетчикЗавершено = 0;
	Успешно = Истина;
	ТекстОшибок = "";
	
	//Мониторинг фоновых заданий
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		
		Пока Истина Цикл
			
			ОбщегоНазначенияБТС.Пауза(5);
			
			МассивФоновыхЗаданий = ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивФоновыхЗаданий);
						
			ВременныйМассивФоновыхЗаданий.Очистить();
			
			Для каждого Стр Из МассивФоновыхЗаданий Цикл
				Если Стр.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					ВременныйМассивФоновыхЗаданий.Добавить(Стр);
				ИначеЕсли Стр.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					СчетчикЗавершено = СчетчикЗавершено + 1;	
				ИначеЕсли Стр.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					СчетчикЗавершеноАварийно = СчетчикЗавершеноАварийно + 1;
					ТекстОшибок = ТекстОшибок + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(Стр.ИнформацияОбОшибке);
				ИначеЕсли Стр.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					СчетчикОтменено = СчетчикОтменено + 1;	
				КонецЕсли; 
			КонецЦикла;
			
			МассивФоновыхЗаданий.Очистить(); 
			
			Если ВременныйМассивФоновыхЗаданий.Количество() = 0 Тогда
				Прервать;	
			КонецЕсли;
			
			Для каждого Эл Из ВременныйМассивФоновыхЗаданий Цикл
				МассивФоновыхЗаданий.Добавить(Эл);	
			КонецЦикла;
			
		КонецЦикла;
				
		Если ЗначениеЗаполнено(ТекстОшибок) Тогда
			ТекстОшибок = "Ошибки:" + символы.ПС + ТекстОшибок;  
			Успешно = Ложь;
		Иначе
			ТекстОшибок = "Ошибки:" + символы.ПС + "Ошибок нет.";
		КонецЕсли;  
		
		ОбщийРезультат = СтрШаблон("
		|Результат работы фоновых заданий:
		|Завершено:%1
		|Завершено с ошибками:%2
		|Отменено:%3
		|", СчетчикЗавершено, СчетчикЗавершеноАварийно, СчетчикОтменено);
		
	КонецЕсли; 
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СчетчикЗавершено", СчетчикЗавершено);
	СтруктураВозврата.Вставить("СчетчикЗавершеноАварийно", СчетчикЗавершеноАварийно);
	СтруктураВозврата.Вставить("СчетчикОтменено", СчетчикОтменено);
	СтруктураВозврата.Вставить("Успешно", Успешно);
	СтруктураВозврата.Вставить("ОбщийРезультат", ОбщийРезультат);
	СтруктураВозврата.Вставить("ТекстОшибок", ТекстОшибок);
	
	Возврат СтруктураВозврата;

КонецФункции

#Область ЕРЦ_НачислениеПоступлениеДСПоПартиям  

Процедура ЕРЦ_НачислениеПоступлениеДСПоПартиям_РассчитатьВФоне(ПараметрыПроцедурыОбработки) Экспорт 
	
	Успешно			  = Истина; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРЦ_МногопоточнаяОбработкаОбъектов.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов КАК ЕРЦ_МногопоточнаяОбработкаОбъектов
	|ГДЕ
	|	НЕ ЕРЦ_МногопоточнаяОбработкаОбъектов.Успешно
	|	И ЕРЦ_МногопоточнаяОбработкаОбъектов.Пользователь = &Пользователь
	|	И ЕРЦ_МногопоточнаяОбработкаОбъектов.Тип = &Тип
	|	И ЕРЦ_МногопоточнаяОбработкаОбъектов.Организация = &Организация
	|	И ЕРЦ_МногопоточнаяОбработкаОбъектов.НомерПотока = &НомерПотока";
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("НомерПотока", ПараметрыПроцедурыОбработки.НомерПотока);
	Запрос.УстановитьПараметр("Организация", ПараметрыПроцедурыОбработки.Организация);
	Запрос.УстановитьПараметр("Тип", ПараметрыПроцедурыОбработки.Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОтбора = Выборка.Данные.Получить();
	
	//получаем начисления
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ГОД(НАЧАЛОПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, ГОД)) В (&РазвернутыеГода)
		|			ТОГДА НАЧАЛОПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, ГОД)
		|	КОНЕЦ КАК Ключ,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Наименование КАК Наименование_ЛС,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА 1
		|			ИНАЧЕ -1
		|		КОНЕЦ * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления) КАК НачисленоГруппировка,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_РасчетЛьгот
		|				ТОГДА ВЫБОР
		|						КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления) КАК Льгота,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_НачислениеПени
		|				ТОГДА ВЫБОР
		|						КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления) КАК Пеня,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
		|					И (КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							И КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления < 0
		|						ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							И КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления > 0)
		|				ТОГДА 0
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
		|					И КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления <> ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
		|				ТОГДА ВЫБОР
		|						КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления) КАК Корректировка,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
		|					И (КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							И КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления < 0
		|						ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							И КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления > 0)
		|				ТОГДА 0
		|			КОГДА (КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.ОперацияБух
		|					ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений)
		|					И КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
		|				ТОГДА ВЫБОР
		|						КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления) КАК КорректировкаПени,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
		|					И (КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							И КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления < 0
		|						ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							И КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления > 0)
		|				ТОГДА ВЫБОР
		|						КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА 1
		|						ИНАЧЕ -1
		|					КОНЕЦ
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
		|					ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_РасчетЛьгот
		|					ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_НачислениеПени
		|					ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.ОперацияБух
		|						И КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						ТОГДА 1
		|					ИНАЧЕ -1
		|				КОНЕЦ
		|		КОНЕЦ * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления) КАК Начислено
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|ГДЕ
		|	НЕ КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|	И НЕ КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.Организация = &Организация
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &СледДеньПериода
		|	И &УсловиеЗдание
		|	И &УсловиеТерОтделы
		|	И &УсловиеЛицевыеСчета
		|	И &УсловиеКонтрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА ГОД(НАЧАЛОПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, ГОД)) В (&РазвернутыеГода)
		|			ТОГДА НАЧАЛОПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период, ГОД)
		|	КОНЕЦ,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Наименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ключ
		|ИТОГИ ПО
		|	Ключ";
	
	Запрос.УстановитьПараметр("РазвернутыеГода", ПараметрыПроцедурыОбработки.РазвернутыеГода);
	Запрос.УстановитьПараметр("Организация", ПараметрыПроцедурыОбработки.Организация);
	Запрос.УстановитьПараметр("СледДеньПериода", НачалоДня(ПараметрыПроцедурыОбработки.Период + 86400));
	
	Если ДанныеОтбора.Здания.Количество() Тогда
		Запрос.УстановитьПараметр("Здания", ДанныеОтбора.Здания);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗдание", "КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец в (&Здания)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗдание", "ИСТИНА");
	КонецЕсли; 

	Если ДанныеОтбора.ТерОтделы.Количество() Тогда
		Запрос.УстановитьПараметр("ТерОтделы", ДанныеОтбора.ТерОтделы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерОтделы", "КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец.ЕРЦ_ТерриториальныйОтдел в (&ТерОтделы)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерОтделы", "ИСТИНА");
	КонецЕсли; 
		
	Если ДанныеОтбора.ЛицевыеСчета.Количество() Тогда
		Запрос.УстановитьПараметр("ЛицевыеСчета", ДанныеОтбора.ЛицевыеСчета);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛицевыеСчета", "КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет В(&ЛицевыеСчета)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛицевыеСчета", "ИСТИНА");
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(ДанныеОтбора.Контрагент) Тогда
		Запрос.УстановитьПараметр("Контрагент", ДанныеОтбора.Контрагент);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКонтрагент", "
		|	(КВП_ВзаиморасчетыПоЛицевымСчетам.Организация, КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет) В
		|			(ВЫБРАТЬ
		|				ТабСрезПоследних.Организация КАК Организация,
		|				ТабСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|			ИЗ
		|				РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК ТабСрезПоследних
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						МАКСИМУМ(Таб.Период) КАК Период,
		|						Таб.Организация КАК Организация,
		|						Таб.ЛицевойСчет КАК ЛицевойСчет
		|					ИЗ
		|						РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК Таб
		|					ГДЕ
		|						Таб.Период < &СледДеньПериода
		|					СГРУППИРОВАТЬ ПО
		|						Таб.ЛицевойСчет,
		|						Таб.Организация) КАК ВложенныйЗапрос
		|					ПО
		|						ТабСрезПоследних.Период = ВложенныйЗапрос.Период
		|							И ТабСрезПоследних.Организация = ВложенныйЗапрос.Организация
		|							И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
		|			ГДЕ
		|				ТабСрезПоследних.Контрагент = &Контрагент)
		|");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКонтрагент", "ИСТИНА");
	КонецЕсли; 
	
	ВыборкаКлюч = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеПоПериодам = Новый Массив;
		
	Пока ВыборкаКлюч.Следующий() Цикл
		
		Выборка = ВыборкаКлюч.Выбрать(); 
		
		ЛицевыеСчета = Новый Соответствие;
		
		Пока Выборка.Следующий() Цикл
			
			//"Начислено,Корректировка,Льгота,Пеня,Оплата, ЛицевыеСчетаСНачислениями, ЛицевыеСчетаСЗадолженностью, СуммаЗадолженности", 
			//СтруктураЛС = Новый Структура("НачисленоГруппировка,Начислено,Корректировка,КорректировкаПени,Льгота,Пеня,Оплата",0,0,0,0,0,0,0);
			СтруктураЛС = ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели();
			ЗаполнитьЗначенияСвойств(СтруктураЛС, Выборка); 
			
			ЛицевыеСчета.Вставить(Выборка.ЛицевойСчет, СтруктураЛС);
			
		КонецЦикла; 
		
		ДанныеПоПериодам.Добавить(Новый Структура("Ключ,ЛицевыеСчета", ВыборкаКлюч.Ключ, ЛицевыеСчета));
		
	КонецЦикла;
	
	//получаем оплаты и распределяем их  
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Наименование КАК Наименование_ЛС,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления) КАК Оплата,
		|	ВЫБОР
		|		КОГДА ГОД(НАЧАЛОПЕРИОДА(МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период), ГОД)) В (&РазвернутыеГода)
		|			ТОГДА НАЧАЛОПЕРИОДА(МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период), МЕСЯЦ)
		|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период), ГОД)
		|	КОНЕЦ КАК ПоследнийКлюч
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|ГДЕ
		|	(КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|			ИЛИ КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ)
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.Организация = &Организация
		|	И КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период < &СледДеньПериода
		|	И &УсловиеЗдание
		|	И &УсловиеТерОтделы
		|	И &УсловиеЛицевыеСчета
		|	И &УсловиеКонтрагент
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Наименование";
	
	Если ДанныеОтбора.Здания.Количество() Тогда
		Запрос.УстановитьПараметр("Здания", ДанныеОтбора.Здания);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗдание", "КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец в (&Здания)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗдание", "ИСТИНА");
	КонецЕсли;
	
	Если ДанныеОтбора.ТерОтделы.Количество() Тогда
		Запрос.УстановитьПараметр("ТерОтделы", ДанныеОтбора.ТерОтделы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерОтделы", "КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец.ЕРЦ_ТерриториальныйОтдел в (&ТерОтделы)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТерОтделы", "ИСТИНА");
	КонецЕсли; 
		
	Если ДанныеОтбора.ЛицевыеСчета.Количество() Тогда
		Запрос.УстановитьПараметр("ЛицевыеСчета", ДанныеОтбора.ЛицевыеСчета);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛицевыеСчета", "КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет В(&ЛицевыеСчета)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЛицевыеСчета", "ИСТИНА");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДанныеОтбора.Контрагент) Тогда
		Запрос.УстановитьПараметр("Контрагент", ДанныеОтбора.Контрагент);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКонтрагент", "
		|	(КВП_ВзаиморасчетыПоЛицевымСчетам.Организация, КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет) В
		|			(ВЫБРАТЬ
		|				ТабСрезПоследних.Организация КАК Организация,
		|				ТабСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|			ИЗ
		|				РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК ТабСрезПоследних
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						МАКСИМУМ(Таб.Период) КАК Период,
		|						Таб.Организация КАК Организация,
		|						Таб.ЛицевойСчет КАК ЛицевойСчет
		|					ИЗ
		|						РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК Таб
		|					ГДЕ
		|						Таб.Период < &СледДеньПериода
		|					СГРУППИРОВАТЬ ПО
		|						Таб.ЛицевойСчет,
		|						Таб.Организация) КАК ВложенныйЗапрос
		|					ПО
		|						ТабСрезПоследних.Период = ВложенныйЗапрос.Период
		|							И ТабСрезПоследних.Организация = ВложенныйЗапрос.Организация
		|							И ТабСрезПоследних.ЛицевойСчет = ВложенныйЗапрос.ЛицевойСчет
		|			ГДЕ
		|				ТабСрезПоследних.Контрагент = &Контрагент)
		|");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКонтрагент", "ИСТИНА");
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		СуммаОстаток = Выборка.Оплата;
		
		Для каждого ПериодНачисления Из ДанныеПоПериодам Цикл
			
			Если СуммаОстаток = 0 Тогда
			    Прервать;			
			КонецЕсли;   
			
			СтруктураЛС = ПериодНачисления.ЛицевыеСчета.Получить(Выборка.ЛицевойСчет);	  
			
			Если СтруктураЛС = Неопределено Тогда
				Продолжить;	
			КонецЕсли;                     
			
			СуммаСписания = Мин(СтруктураЛС.НачисленоГруппировка, СуммаОстаток);  
			
			Если СуммаСписания = 0 Тогда
				Продолжить;	
			КонецЕсли; 
			
			СтруктураЛС.Оплата = СуммаСписания;
			
			СуммаОстаток = СуммаОстаток - СуммаСписания;
			
		КонецЦикла;
		
		Если СуммаОстаток > 0 Тогда
			
			ОстатокОплатЗафиксирован = Ложь; 
			
			Для каждого ПериодНачисления Из ДанныеПоПериодам Цикл   
				Если ПериодНачисления.Ключ = Выборка.ПоследнийКлюч Тогда
					
					СтруктураЛС = ПериодНачисления.ЛицевыеСчета.Получить(Выборка.ЛицевойСчет);	  
					
					Если СтруктураЛС = Неопределено Тогда
						//СтруктураЛС = Новый Структура("НачисленоГруппировка,Начислено,Корректировка,КорректировкаПени,Льгота,Пеня,Оплата",0,0,0,0,0,0,СуммаОстаток);
						СтруктураЛС = ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели();  
						СтруктураЛС.Наименование_ЛС = Выборка.Наименование_ЛС;
						СтруктураЛС.Оплата = СуммаОстаток;
						ПериодНачисления.ЛицевыеСчета.Вставить(Выборка.ЛицевойСчет, СтруктураЛС); 
					Иначе 
						СтруктураЛС.Оплата = СтруктураЛС.Оплата + СуммаОстаток;
					КонецЕсли;  
					
					ОстатокОплатЗафиксирован = Истина;
					Прервать;
					
				КонецЕсли; 	
			КонецЦикла;   
			
			Если Не ОстатокОплатЗафиксирован Тогда
				
				//СтруктураЛС = Новый Структура("НачисленоГруппировка,Начислено,Корректировка,КорректировкаПени,Льгота,Пеня,Оплата",0,0,0,0,0,0,СуммаОстаток);
				СтруктураЛС = ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели();  
				СтруктураЛС.Наименование_ЛС = Выборка.Наименование_ЛС;
				СтруктураЛС.Оплата = СуммаОстаток;
				ЛицевыеСчета = Новый Соответствие; 
				ЛицевыеСчета.Вставить(Выборка.ЛицевойСчет, СтруктураЛС); 
				
				ДанныеПоПериодам.Добавить(Новый Структура("Ключ,ЛицевыеСчета", Выборка.ПоследнийКлюч, ЛицевыеСчета));
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	//подготовим группировку по месяц/год/общая
	Группировка = Новый Соответствие;
	ПодсчетКоличествоСНачислениями = Новый Соответствие;
	ПодсчетКоличествоСЗадолженностью = Новый Соответствие;
	ГодаДляОбъединения = Новый Соответствие;
	
	КлючОбщейГруппировки = КонецГода(ПараметрыПроцедурыОбработки.ДатаОкончания)+1;
	ГруппировкаОбщая = ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели();
	Группировка.Вставить(КлючОбщейГруппировки, ГруппировкаОбщая);  
	
	Для каждого ПериодНачисления Из ДанныеПоПериодам Цикл   
		
		ЭтоМесячнаяГруппировка = Ложь;
		КлючГруппировкаГода = Неопределено;
		ГруппировкаГода = Неопределено; 
		
		Если КонецГода(ПериодНачисления.Ключ) <> ПериодНачисления.Ключ Тогда
			ЭтоМесячнаяГруппировка = Истина;
			КлючГруппировкаГода = КонецГода(ПериодНачисления.Ключ);
			ГруппировкаГода = Группировка.Получить(КлючГруппировкаГода);
			Если ГруппировкаГода = Неопределено Тогда
				ГруппировкаГода = ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели();	
				Группировка.Вставить(КлючГруппировкаГода, ГруппировкаГода);
			КонецЕсли; 
		КонецЕсли; 
		
		ГруппировкаТекущая = ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели();	
		Если ЭтоМесячнаяГруппировка Тогда
			ГруппировкаТекущая.Расшифровка = ПериодНачисления.ЛицевыеСчета;
		КонецЕсли;
		Группировка.Вставить(ПериодНачисления.Ключ, ГруппировкаТекущая);
		
		Для каждого КлючЗначение Из ПериодНачисления.ЛицевыеСчета Цикл
			
			ЕРЦ_НачислениеПоступлениеДСПоПартиям_ВычислитьСуммуЗадолженности(КлючЗначение.Значение);		
			ЕРЦ_НачислениеПоступлениеДСПоПартиям_ОбъединитьПоказатели(ГруппировкаТекущая, КлючЗначение.Значение);
			
			Если КлючЗначение.Значение.НачисленоГруппировка <> 0 Тогда 
				ГруппировкаТекущая.КоличествоСНачислениями = ГруппировкаТекущая.КоличествоСНачислениями + 1; 
				Если ЭтоМесячнаяГруппировка Тогда
					ЕРЦ_НачислениеПоступлениеДСПоПартиям_ДобавитьЛСДляПодсчетаКоличества(ПодсчетКоличествоСНачислениями, КлючГруппировкаГода, КлючЗначение.Ключ); 
				Иначе
					ЕРЦ_НачислениеПоступлениеДСПоПартиям_ДобавитьЛСДляПодсчетаКоличества(ПодсчетКоличествоСНачислениями, КлючОбщейГруппировки, КлючЗначение.Ключ); 
				КонецЕсли; 
			КонецЕсли;
			
			Если КлючЗначение.Значение.СуммаЗадолженности > 0 Тогда
				ГруппировкаТекущая.КоличествоСЗадолженностью = ГруппировкаТекущая.КоличествоСЗадолженностью + 1;	
				Если ЭтоМесячнаяГруппировка Тогда
					ЕРЦ_НачислениеПоступлениеДСПоПартиям_ДобавитьЛСДляПодсчетаКоличества(ПодсчетКоличествоСЗадолженностью, КлючГруппировкаГода, КлючЗначение.Ключ); 
				Иначе
					ЕРЦ_НачислениеПоступлениеДСПоПартиям_ДобавитьЛСДляПодсчетаКоличества(ПодсчетКоличествоСЗадолженностью, КлючОбщейГруппировки, КлючЗначение.Ключ); 
				КонецЕсли; 
			КонецЕсли;       
			
		КонецЦикла; 
				
		Если ЭтоМесячнаяГруппировка Тогда
			ЕРЦ_НачислениеПоступлениеДСПоПартиям_ОбъединитьПоказатели(ГруппировкаГода, ГруппировкаТекущая); 
			ГодаДляОбъединения.Вставить(ГруппировкаГода, Неопределено);
		Иначе 
			ЕРЦ_НачислениеПоступлениеДСПоПартиям_ОбъединитьПоказатели(ГруппировкаОбщая, ГруппировкаТекущая);   
		КонецЕсли; 
		
	КонецЦикла;    
	
	//сгруппируем промежуточные группировки года в общую группировку 
	Для каждого КлЗн Из ГодаДляОбъединения Цикл
		ЕРЦ_НачислениеПоступлениеДСПоПартиям_ОбъединитьПоказатели(ГруппировкаОбщая, КлЗн.Ключ);   
	КонецЦикла;
	
	Для каждого КлЗн Из ПодсчетКоличествоСНачислениями Цикл 
		Если КлЗн.Ключ <> КлючОбщейГруппировки Тогда  
			Для каждого КлючЗначение Из КлЗн.Значение Цикл
				ЕРЦ_НачислениеПоступлениеДСПоПартиям_ДобавитьЛСДляПодсчетаКоличества(ПодсчетКоличествоСНачислениями, КлючОбщейГруппировки, КлючЗначение.Ключ); 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	Для каждого КлЗн Из ПодсчетКоличествоСНачислениями Цикл
		ГруппировкаТекущая = Группировка.Получить(КлЗн.Ключ);
		ГруппировкаТекущая.КоличествоСНачислениями = КлЗн.Значение.Количество();    
	КонецЦикла;   

	Для каждого КлЗн Из ПодсчетКоличествоСЗадолженностью Цикл 
		Если КлЗн.Ключ <> КлючОбщейГруппировки Тогда  
			Для каждого КлючЗначение Из КлЗн.Значение Цикл
				ЕРЦ_НачислениеПоступлениеДСПоПартиям_ДобавитьЛСДляПодсчетаКоличества(ПодсчетКоличествоСЗадолженностью, КлючОбщейГруппировки, КлючЗначение.Ключ); 
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;   
	Для каждого КлЗн Из ПодсчетКоличествоСЗадолженностью Цикл
		ГруппировкаТекущая = Группировка.Получить(КлЗн.Ключ);
		ГруппировкаТекущая.КоличествоСЗадолженностью = КлЗн.Значение.Количество();
	КонецЦикла;
	
	Для каждого КлючЗначение Из Группировка Цикл   
		ЕРЦ_НачислениеПоступлениеДСПоПартиям_ВычислитьСуммуЗадолженности(КлючЗначение.Значение);		
	КонецЦикла;  
	
			
	НовыеДанные = Новый Структура("ИмяГруппировки, Группировка", ПараметрыПроцедурыОбработки.ИмяГруппировки, Группировка);	
	
	НаборЗаписей = РегистрыСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.Тип.Установить(ПараметрыПроцедурыОбработки.Тип);
	НаборЗаписей.Отбор.Организация.Установить(ПараметрыПроцедурыОбработки.Организация);
	НаборЗаписей.Отбор.НомерПотока.Установить(ПараметрыПроцедурыОбработки.НомерПотока);
	
	НовЗапись				 = НаборЗаписей.Добавить();  
	
	НовЗапись.Пользователь	 = ПараметрыСеанса.ТекущийПользователь;
	НовЗапись.Тип			 = ПараметрыПроцедурыОбработки.Тип;
	НовЗапись.Организация	 = ПараметрыПроцедурыОбработки.Организация;
	НовЗапись.НомерПотока	 = ПараметрыПроцедурыОбработки.НомерПотока;
	НовЗапись.Успешно		 = Успешно;  
		
	//НовЗапись.Данные = Новый ХранилищеЗначения(ПолноеИмяФайла, Новый СжатиеДанных(9));
	НовЗапись.Данные = Новый ХранилищеЗначения(НовыеДанные);
	
	НаборЗаписей.Записать();  
	
	Если Не Успешно Тогда
		ВызватьИсключение СтрШаблон("Есть ошибки при выполнении процедуры 
		|""ЕРЦ_ОбщийМодуль.ЕРЦ_НачислениеПоступлениеДСПоПартиям_РассчитатьВФоне""
		|. Подробности смотрите в регистре ""ЕРЦ_МногопоточнаяОбработкаОбъектов"""".
		|Отборы регистра: Тип:%1, Организация:%2, НомерПотока:%3",
		ПараметрыПроцедурыОбработки.Тип,
		ПараметрыПроцедурыОбработки.Организация,
		ПараметрыПроцедурыОбработки.НомерПотока
		);
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ЕРЦ_НачислениеПоступлениеДСПоПартиям_ДобавитьЛСДляПодсчетаКоличества(НаборСоответствий, Ключ, ЛС)
	
	//Через соответствие можно быстро сделать уникальный массив объектов
	ТекСоответствие = НаборСоответствий.Получить(Ключ); 
	
	Если ТекСоответствие = Неопределено Тогда
		ТекСоответствие = Новый Соответствие;
		НаборСоответствий.Вставить(Ключ, ТекСоответствие);
	КонецЕсли; 
	
	ТекСоответствие.Вставить(ЛС, Неопределено);

КонецПроцедуры
 
Функция ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели() Экспорт 
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Наименование_ЛС", "");
	СтруктураВозврата.Вставить("КоличествоСНачислениями", 0);
	СтруктураВозврата.Вставить("КоличествоСЗадолженностью", 0);
	СтруктураВозврата.Вставить("НачисленоГруппировка", 0);
	СтруктураВозврата.Вставить("Начислено", 0);
	СтруктураВозврата.Вставить("Корректировка", 0);
	СтруктураВозврата.Вставить("КорректировкаПени", 0);
	СтруктураВозврата.Вставить("Льгота", 0);
	СтруктураВозврата.Вставить("Пеня", 0);
	СтруктураВозврата.Вставить("Оплата", 0);
	СтруктураВозврата.Вставить("СуммаЗадолженности", 0);
	СтруктураВозврата.Вставить("Расшифровка", Неопределено);

	Возврат СтруктураВозврата;

КонецФункции // ЕРЦ_НачислениеПоступлениеДСПоПартиям_ПустыеПоказатели()

Процедура ЕРЦ_НачислениеПоступлениеДСПоПартиям_ОбъединитьПоказатели(СтруктураИмпорт, СтруктураЭкспорт) Экспорт 
	
	СтруктураИмпорт.НачисленоГруппировка 	= СтруктураИмпорт.НачисленоГруппировка + СтруктураЭкспорт.НачисленоГруппировка;
	СтруктураИмпорт.Начислено 				= СтруктураИмпорт.Начислено + СтруктураЭкспорт.Начислено;
	СтруктураИмпорт.Корректировка 			= СтруктураИмпорт.Корректировка + СтруктураЭкспорт.Корректировка;
	СтруктураИмпорт.КорректировкаПени 		= СтруктураИмпорт.КорректировкаПени + СтруктураЭкспорт.КорректировкаПени;
	СтруктураИмпорт.Льгота					= СтруктураИмпорт.Льгота + СтруктураЭкспорт.Льгота;
	СтруктураИмпорт.Пеня					= СтруктураИмпорт.Пеня + СтруктураЭкспорт.Пеня;
	СтруктураИмпорт.Оплата 					= СтруктураИмпорт.Оплата + СтруктураЭкспорт.Оплата;   
	
КонецПроцедуры // ЕРЦ_НачислениеПоступлениеДСПоПартиям_ОбъединитьПоказатели 

Процедура ЕРЦ_НачислениеПоступлениеДСПоПартиям_ВычислитьСуммуЗадолженности(Данные) Экспорт 
	
	Данные.СуммаЗадолженности = Данные.НачисленоГруппировка - Данные.Оплата;  
	
КонецПроцедуры // ЕРЦ_НачислениеПоступлениеДСПоПартиям_ОбъединитьПоказатели 


#КонецОбласти

#Область ЗагрузкаСудебныхДокументов    
// Функция возвращает массив структур из json API
Функция ПолучитьДанныеСудебныхДокументовИзAPI(ДатаВЗапрос) Экспорт
	Токен = Константы.ЕРЦ_ТокенДляЗагрузкиСудебныхДокументов.Получить();
	Если Токен = "" Тогда
		ОбновитьТокенЗагрузкиСудебныхДокументов(Токен);
	КонецЕсли;	
	Если Токен = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	             
	
	// Токен обновлен - запрос данных
	ДатаЗапроса = Формат(ДатаВЗапрос,"ДФ=yyyy-MM-dd"); 
	//Фахретдинов #14392
	//HTTP_Соединение = Новый HTTPСоединение("10.0.10.132", 50500);
    HTTP_Соединение = Новый HTTPСоединение("WS", 50500);
	//Фахретдинов #14392

	Запрос = Новый HTTPЗапрос("/data_api/new_executive_list?date=" + ДатаЗапроса); 
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + Токен);
	Ответ = HTTP_Соединение.ВызватьHTTPМетод("GET", Запрос);
	Если Ответ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	Если Ответ.КодСостояния = 200 Тогда
	    Данные = ПрочитатьСтрокуJSON(Ответ.ПолучитьТелоКакСтроку());  
		Для Каждого Стр Из Данные Цикл
			Если Стр.Ключ = "executive_list" Тогда   
				// Запрос отработал - запишем текущую дату в константу
				Константы.ЕРЦ_ДатаПоследнейЗагрузкиСудебныхДокументов.Установить(ТекущаяДата());
				Возврат Стр.Значение;
			КонецЕсли;	
		КонецЦикла;		
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Процедура ОбновитьТокенЗагрузкиСудебныхДокументов(Токен)
	// Надо ли обновлять токен из API
	Константы.ЕРЦ_ТокенДляЗагрузкиСудебныхДокументов.Установить("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6WyJVU0VSX0ZPUl9TSVRFIiwiVVNFUl9GT1JfU0lURSJdLCJqdGkiOiIyZjMwNGMwNTEzYWE0ODU4YmM5YzRhNWM3MDViNjI2OCIsIm5iZiI6MTY3MTA5ODg3NSwiZXhwIjoyMTQ0MTM4ODc1LCJpYXQiOjE2NzEwOTg4NzUsImlzcyI6IldvcmtmbG93VGVjaG5vbG9neSJ9.wevEHHAUmRq8Fr_-trUtrlN80C8YG1nHQ8lM6e8Sd_w");
	Токен = Константы.ЕРЦ_ТокенДляЗагрузкиСудебныхДокументов.Получить();
КонецПроцедуры

Функция ПрочитатьСтрокуJSON(СтрокаJSON) 
	Результат = Неопределено;
  
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
  
    Возврат Результат;
КонецФункции
#КонецОбласти

Процедура ОтменитьДокумент(ДокСсылка, ПометкаУдаления = Неопределено) Экспорт 
	ДокОбъект = ДокСсылка.ПолучитьОбъект();	
	Если ПометкаУдаления <> Неопределено Тогда
		ДокОбъект.ПометкаУдаления = ПометкаУдаления;
	КонецЕсли; 
	Если ДокОбъект.Проведен Тогда
		ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли; 
КонецПроцедуры

Функция ЭтоРабочаяБаза() Экспорт 
	
	Стр = ВРЕГ(СтрокаСоединенияИнформационнойБазы());
	
	Возврат (СтрНайти(Стр, """GKH_FGAU""") + СтрНайти(Стр, """GKH""")) > 0;

КонецФункции // ЭтоРабочаяБаза()

#Область ВременныеПроцедуры

Процедура ЗаполнитьЕРЦ_ПериодМногопоточно(ВФоне, КоличествоПотоков) Экспорт 

	ИмяФоновыхЗаданий = "ЕРЦ_МногопоточнаяОбработкаОбъектов_ЗаполнитьЕРЦ_Период";   
	МассивФоновыхЗаданий = Новый Массив; 
	ТипМногопоточнойОбработки = Перечисления.ЕРЦ_ТипыМногопоточнойОбработки.ЗаполнитьЕРЦ_Период;
	
	//сначала очистим
	НаборЗаписей = РегистрыСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Тип.Установить(ТипМногопоточнойОбработки);
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам";
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	КоличествоРегистраторовДляПотока = Цел(Выборка.Количество() / КоличествоПотоков) + 1;  
	
	МассивРегистраторов = Новый Массив;
	
	СчетчикРегистраторов = 0; 
	НомерПотока = 1;
	
	Пока Выборка.Следующий() Цикл
		
		Если СчетчикРегистраторов = КоличествоРегистраторовДляПотока Тогда
			
			НовЗапись = НаборЗаписей.Добавить();  
			
			НовЗапись.Тип = ТипМногопоточнойОбработки;
			НовЗапись.НомерПотока = НомерПотока;  
			НовЗапись.Данные = Новый ХранилищеЗначения(МассивРегистраторов, Новый СжатиеДанных(9));
			
			МассивРегистраторов = Новый Массив;
			СчетчикРегистраторов = 0; 
			НомерПотока = НомерПотока + 1;
			
		КонецЕсли; 	 
		
		МассивРегистраторов.Добавить(Выборка.Регистратор);
		
		СчетчикРегистраторов = СчетчикРегистраторов + 1;
		
	КонецЦикла;
	
	НовЗапись = НаборЗаписей.Добавить();  
	
	НовЗапись.Тип = ТипМногопоточнойОбработки;
	НовЗапись.НомерПотока = НомерПотока;  
	НовЗапись.Данные = Новый ХранилищеЗначения(МассивРегистраторов, Новый СжатиеДанных(9));
	
	НаборЗаписей.Записать(); 
	
	Для НомерПотока = 1 По КоличествоПотоков Цикл
		
		ПараметрыПроцедурыОбработки = Новый Структура;
		ПараметрыПроцедурыОбработки.Вставить("Тип", ТипМногопоточнойОбработки);
		ПараметрыПроцедурыОбработки.Вставить("НомерПотока", НомерПотока);	
		
		Если ВФоне Тогда
			
			ПараметрыВыполнения = Новый Массив;
			ПараметрыВыполнения.Добавить(ПараметрыПроцедурыОбработки);
			
			МассивФоновыхЗаданий.Добавить(ФоновыеЗадания.Выполнить("ЕРЦ_ОбщийМодуль.ЗаполнитьЕРЦ_ПериодМногопоточно_Продолжение", ПараметрыВыполнения,,ИмяФоновыхЗаданий));
			
		Иначе 
			ЕРЦ_ОбщийМодуль.ЗаполнитьЕРЦ_ПериодМногопоточно_Продолжение(ПараметрыПроцедурыОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВФоне Тогда
		РезультатМониторингаФоновыхЗаданий = ЕРЦ_ОбщийМодуль.МониторингФоновыхЗаданий(МассивФоновыхЗаданий); 
		
		Если Не РезультатМониторингаФоновыхЗаданий.Успешно Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатМониторингаФоновыхЗаданий.ОбщийРезультат);	
		КонецЕсли;  
		
	КонецЕсли;   
	
	НаборЗаписей = РегистрыСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Тип.Установить(ТипМногопоточнойОбработки);
	НаборЗаписей.Записать();

КонецПроцедуры
 
Процедура ЗаполнитьЕРЦ_ПериодМногопоточно_Продолжение(ПараметрыПроцедурыОбработки) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРЦ_МногопоточнаяОбработкаОбъектов.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ЕРЦ_МногопоточнаяОбработкаОбъектов КАК ЕРЦ_МногопоточнаяОбработкаОбъектов
	|ГДЕ
	|	ЕРЦ_МногопоточнаяОбработкаОбъектов.Тип = &Тип
	|	И ЕРЦ_МногопоточнаяОбработкаОбъектов.НомерПотока = &НомерПотока";
	
	Запрос.УстановитьПараметр("НомерПотока", ПараметрыПроцедурыОбработки.НомерПотока);
	Запрос.УстановитьПараметр("Тип", ПараметрыПроцедурыОбработки.Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда 
		Возврат;
	КонецЕсли;
	
	МассивРегистраторов = Выборка.Данные.Получить();

	Для каждого Регистратор Из МассивРегистраторов Цикл
		
		НаборЗаписей = РегистрыНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Период КАК Период,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор КАК Регистратор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.НомерСтроки КАК НомерСтроки,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Активность КАК Активность,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидДвижения КАК ВидДвижения,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Организация КАК Организация,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга КАК Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцНачисления КАК МесяцНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Договор КАК Договор,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления КАК ВидНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцРассрочки КАК МесяцРассрочки,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.УдалитьПоставщикУслуг КАК УдалитьПоставщикУслуг,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления КАК СуммаНачисления,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЕРЦ_Период КАК ЕРЦ_Период
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор = &Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, Выборка);
			
			Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.КВП_КорректировкаНачислений") и 
				(НовЗапись.ВидДвижения = ВидДвиженияНакопления.Приход И НовЗапись.СуммаНачисления < 0
				ИЛИ НовЗапись.ВидДвижения = ВидДвиженияНакопления.Расход И НовЗапись.СуммаНачисления > 0) Тогда 
				НовЗапись.ЕРЦ_Период = КонецМесяца(НовЗапись.МесяцНачисления);
			Иначе
				НовЗапись.ЕРЦ_Период = НовЗапись.Период;
			КонецЕсли; 
			
		КонецЦикла;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина; 
		НаборЗаписей.Записать();
						
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область АРМ_Автоначисления

Процедура АРМ_АвтоначислениеПоЗданиям(МесяцНачисления, Организация, ГруппировкаПоЗданиям) Экспорт
	Для каждого Эл Из ГруппировкаПоЗданиям Цикл
		АРМ_АвтоначислениеПоЗданию(МесяцНачисления, Эл.Здание, Организация, Эл.НазначенныеНаборыУслугПоВидамЛС);
	КонецЦикла;
КонецПроцедуры

Процедура АРМ_АвтоначислениеПоЗданию(Месяц, Здание, Организация, НазначенныеНаборыУслугПоВидамЛС) Экспорт 
	
	Попытка
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_АРМ_НачисленияПоЗданиям");
		ЭлементБлокировки.УстановитьЗначение("Месяц", Месяц);
		ЭлементБлокировки.УстановитьЗначение("Здание", Здание);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();	
		
		НачалоМесяца = НачалоМесяца(Месяц);
		КонецМесяца = КонецМесяца(Месяц);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_НачислениеУслуг.Ссылка КАК Ссылка,
		|	КВП_НачислениеУслуг.Услуга КАК Услуга,
		|	КВП_НачислениеУслуг.ВидОперации КАК ВидОперации,
		|	КВП_НачислениеУслуг.ЕРЦ_ВидЛицевогоСчета КАК ЕРЦ_ВидЛицевогоСчета,
		|	КВП_НачислениеУслуг.Проведен КАК Проведен
		|ИЗ
		|	Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
		|ГДЕ
		|	КВП_НачислениеУслуг.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И КВП_НачислениеУслуг.Объект = &Здание
		|	И КВП_НачислениеУслуг.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ))
		|	И КВП_НачислениеУслуг.Организация = &Организация
		|	И КВП_НачислениеУслуг.ЕРЦ_СформированИзАРМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	дбф_Абоненты.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.дбф_Абоненты КАК дбф_Абоненты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|			ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
		|		ПО дбф_Абоненты.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|ГДЕ
		|	дбф_Абоненты.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И УПЖКХ_Помещения.Владелец = &Здание";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Здание", Здание);
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца);
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца);
		
		Пакет = Запрос.ВыполнитьПакет();
		
		ТЗ_СуществующиеДокументы = Пакет[0].Выгрузить(); 
		
		Для каждого Стр Из ТЗ_СуществующиеДокументы Цикл 
			Если Не Стр.Проведен Тогда
				Продолжить;	
			КонецЕсли; 
			ДокОбъект = Стр.Ссылка.ПолучитьОбъект();	
			ДокОбъект.ДополнительныеСвойства.Вставить("ЕРЦ_ЗаполнениеИзАРМ", Истина);
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		
		ЛицевыеСчетаСЕПД = Новый Соответствие;
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЛицевыеСчетаСЕПД.Вставить(Выборка.ЛицевойСчет, Истина);	
		КонецЦикла;
				
		ИспользованныеСсылки = Новый Массив;
		АгрегатныеДанные = Новый Структура;
		АгрегатныеДанные.Вставить("ЛСНачислениеПУ", Новый Соответствие);
		АгрегатныеДанные.Вставить("ПустующихЛСНачислениеПУ", Новый Соответствие);
		АгрегатныеДанные.Вставить("СуммаНачислениеПУ", 0);
		АгрегатныеДанные.Вставить("ЛСНачислениеУслуг", Новый Соответствие);
		АгрегатныеДанные.Вставить("ПустующихЛСНачислениеУслуг", Новый Соответствие);
		АгрегатныеДанные.Вставить("СуммаНачислениеУслуг", 0);
		
		Данные = Новый Структура;
		Данные.Вставить("ЕстьДокументы", Ложь);
		Данные.Вставить("ВидОперации", 1);
		Данные.Вставить("ТЗ_СуществующиеДокументы", ТЗ_СуществующиеДокументы);
		Данные.Вставить("ИспользованныеСсылки", ИспользованныеСсылки);
		Данные.Вставить("Здание", Здание);
		Данные.Вставить("Организация", Организация);
		Данные.Вставить("Услуга", Неопределено);
		Данные.Вставить("АгрегатныеДанные", АгрегатныеДанные);
		Данные.Вставить("НазначенныеНаборыУслугПоВидамЛС", НазначенныеНаборыУслугПоВидамЛС);
		Данные.Вставить("ЛицевыеСчетаСЕПД", ЛицевыеСчетаСЕПД);
		Данные.Вставить("Услуга", Неопределено);
		Данные.Вставить("НачалоМесяца", НачалоМесяца);
		Данные.Вставить("КонецМесяца", КонецМесяца); 
		Данные.Вставить("Лог", Новый Массив);  
		
		УслугиПоПоказаниямПУ = Новый ТаблицаЗначений;
		УслугиПоПоказаниямПУ.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		УслугиПоПоказаниямПУ.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
		Для каждого КлЗн1 Из НазначенныеНаборыУслугПоВидамЛС Цикл
			Для каждого КлЗн2 Из КлЗн1.Значение Цикл  
				Если (КлЗн2.Значение.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
					или КлЗн2.Значение.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
					и УслугиПоПоказаниямПУ.НайтиСтроки(Новый Структура("Услуга", КлЗн2.Ключ)).Количество() = 0 Тогда
					НовСтрока = УслугиПоПоказаниямПУ.Добавить();
					НовСтрока.Услуга = КлЗн2.Ключ;
					НовСтрока.Приоритет = КлЗн2.Значение.Приоритет;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;   
		УслугиПоПоказаниямПУ.Сортировать("Приоритет");
		
		АРМ_АвтоначислениеПоЗданию_НачислениеУслуг(Данные);
		Для каждого Стр Из УслугиПоПоказаниямПУ Цикл
			Данные.ВидОперации = 2;
			Данные.Услуга = Стр.Услуга; 
			АРМ_АвтоначислениеПоЗданию_НачислениеУслуг(Данные);
		КонецЦикла;
		
		Для каждого Стр Из ТЗ_СуществующиеДокументы Цикл 
			Если ИспользованныеСсылки.Найти(Стр) = Неопределено Тогда
				ДокОбъект = Стр.Ссылка.ПолучитьОбъект();	
				ДокОбъект.ПометкаУдаления = Истина;
				ДокОбъект.ДополнительныеСвойства.Вставить("ЕРЦ_ЗаполнениеИзАРМ", Истина);
				Если ДокОбъект.Проведен Тогда
					ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		
		//свернем лог
		Свертка = Новый Массив;
		Для каждого Сообщ Из Данные.Лог Цикл
			Если Свертка.Найти(Сообщ) = Неопределено Тогда
				Свертка.Добавить(Сообщ);
			КонецЕсли; 
		КонецЦикла; 
		Данные.Лог.Очистить();
		Данные.Лог = Свертка;
		
		Если Данные.ЕстьДокументы и Данные.Лог.Количество() = 0 Тогда
			РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.ДобавитьЗапись(
			Месяц, Здание, 
			АгрегатныеДанные.ЛСНачислениеПУ.Количество(), АгрегатныеДанные.ЛСНачислениеУслуг.Количество(),
			АгрегатныеДанные.ПустующихЛСНачислениеПУ.Количество(), АгрегатныеДанные.ПустующихЛСНачислениеУслуг.Количество(),
			АгрегатныеДанные.СуммаНачислениеПУ, АгрегатныеДанные.СуммаНачислениеУслуг,
			0,0,
			Перечисления.ЕРЦ_АРМ_СтатусНачисления.НачисленияСформированы, СтрСоединить(Данные.Лог,Символы.ПС));
		Иначе
			РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.ОбновитьСтатус(
			Месяц, Здание, 
			Перечисления.ЕРЦ_АРМ_СтатусНачисления.ОшибкаНачислений,
			СтрСоединить(Данные.Лог,Символы.ПС));
		КонецЕсли; 
			
		ЗафиксироватьТранзакцию();   
		
	Исключение  
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		
		РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.ОбновитьСтатус(
		Месяц, Здание, 
		Перечисления.ЕРЦ_АРМ_СтатусНачисления.ОшибкаНачислений,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + СтрСоединить(Данные.Лог,Символы.ПС));
		
	КонецПопытки;
	
КонецПроцедуры

Процедура АРМ_АвтоначислениеПоЗданию_НачислениеУслуг(Данные)
	
	ЭтоОбщежитие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.Здание, "ЭтоОбщежитие");   
	
	//1.Заполнение Первого документа, его инициализация(Заполнить/Рассчитать)
	//2.Перераспределение данных в зависимости от реквизита ЕРЦ_ВидЛицевогоСчета 
	//по другим документам
	ДокументыОбъектыПоВидамЛС = Новый Соответствие;
	МассивУдаленияСтрок = Новый Массив; 
	ПервыйВидЛицевогоСчета = Неопределено;
	Для каждого КлЗн Из Данные.НазначенныеНаборыУслугПоВидамЛС Цикл  
		Если ЗначениеЗаполнено(Данные.Услуга) Тогда
			РеквизитыУслугиНабора = КлЗн.Значение.Получить(Данные.Услуга); 
			Если РеквизитыУслугиНабора = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если РеквизитыУслугиНабора.Поведение = Перечисления.ЕРЦ_ПоведениеУслуги.Зависимая или
				РеквизитыУслугиНабора.Поведение = Перечисления.ЕРЦ_ПоведениеУслуги.БазаРасчета Тогда 
				//такие услуги не могут быть в шапке документа
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		ПервыйВидЛицевогоСчета = КлЗн.Ключ;
		Прервать;
	КонецЦикла; 
	Если ПервыйВидЛицевогоСчета = Неопределено Тогда  
		//по услуге "Данные.Услуга" не могут создаваться документы
		Возврат;
	КонецЕсли; 
	
	Если Данные.ВидОперации = 1 Тогда
		НСтроки = Данные.ТЗ_СуществующиеДокументы.НайтиСтроки(Новый Структура(
		"ВидОперации,ЕРЦ_ВидЛицевогоСчета",
		Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета, ПервыйВидЛицевогоСчета));  
	ИначеЕсли Данные.ВидОперации = 2 Тогда
		НСтроки = Данные.ТЗ_СуществующиеДокументы.НайтиСтроки(Новый Структура(
		"ВидОперации,Услуга,ЕРЦ_ВидЛицевогоСчета",
		Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ, Данные.Услуга, ПервыйВидЛицевогоСчета));
	Иначе
		ВызватьИсключение "Не предусмотренный вид операции";
	КонецЕсли; 
	Если НСтроки.Количество() > 0 Тогда
		ПервыйДокументОбъект = НСтроки[0].Ссылка.ПолучитьОбъект(); 
		Данные.ИспользованныеСсылки.Добавить(НСтроки[0]);
	Иначе
		ПервыйДокументОбъект = Документы.КВП_НачислениеУслуг.СоздатьДокумент();	
	КонецЕсли;  
	
	ДокументыОбъектыПоВидамЛС.Вставить(ПервыйВидЛицевогоСчета, ПервыйДокументОбъект);
	
	ПервыйДокументОбъект.ЕРЦ_ВидЛицевогоСчета = ПервыйВидЛицевогоСчета;		
	ПервыйДокументОбъект.ЕРЦ_СформированИзАРМ = Истина;
	ПервыйДокументОбъект.СуммаДокумента = 0;
	ПервыйДокументОбъект.ПометкаУдаления = Ложь;  
	//Никита запросил на время тестов возможность создавать документы
	//относительно месяца начисления
	Если Данные.НачалоМесяца = НачалоМесяца(ТекущаяДата()) Тогда
		ПервыйДокументОбъект.Дата = ТекущаяДата();
	Иначе
		ПервыйДокументОбъект.Дата = Данные.КонецМесяца;
	КонецЕсли; 
	ПервыйДокументОбъект.Объект = Данные.Здание;    
	Если Данные.ВидОперации = 1 Тогда
		ПервыйДокументОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета;
	ИначеЕсли Данные.ВидОперации = 2 Тогда
		ПервыйДокументОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ;
	КонецЕсли; 
	ПервыйДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПервыйДокументОбъект.Организация = Данные.Организация;
	ПервыйДокументОбъект.КоличествоДнейНачисления = УПЖКХ_ОбщегоНазначенияКлиентСервер.ВсегоДнейВМесяце(ПервыйДокументОбъект.Дата);   
	ПервыйДокументОбъект.Услуга = Данные.Услуга;
	ПервыйДокументОбъект.ДополнительныеСвойства.Вставить("ЕРЦ_ЗаполнениеИзАРМ", Истина);
	ОчиститьТЧОбъектаНачисленияУслуг(ПервыйДокументОбъект);
	
	//подготовка документов реципиентов
	Для каждого КлЗн Из Данные.НазначенныеНаборыУслугПоВидамЛС Цикл
		Если КлЗн.Ключ = ПервыйВидЛицевогоСчета Тогда
			Продолжить;
		КонецЕсли;    
		
		Если ЗначениеЗаполнено(Данные.Услуга) Тогда
			РеквизитыУслугиНабора = КлЗн.Значение.Получить(Данные.Услуга); 
			Если РеквизитыУслугиНабора = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Если РеквизитыУслугиНабора.Поведение = Перечисления.ЕРЦ_ПоведениеУслуги.Зависимая или
				РеквизитыУслугиНабора.Поведение = Перечисления.ЕРЦ_ПоведениеУслуги.БазаРасчета Тогда 
				//такие услуги не могут быть в шапке документа
				Продолжить;
			КонецЕсли;
		КонецЕсли; 
		
		Если Данные.ВидОперации = 1 Тогда
			НСтроки = Данные.ТЗ_СуществующиеДокументы.НайтиСтроки(Новый Структура(
			"ВидОперации,ЕРЦ_ВидЛицевогоСчета",
			Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета, КлЗн.Ключ));  
		ИначеЕсли Данные.ВидОперации = 2 Тогда
			НСтроки = Данные.ТЗ_СуществующиеДокументы.НайтиСтроки(Новый Структура(
			"ВидОперации,Услуга,ЕРЦ_ВидЛицевогоСчета",
			Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ, Данные.Услуга, КлЗн.Ключ));
		КонецЕсли; 
		Если НСтроки.Количество() > 0 Тогда
			ТекущийДокументОбъект = НСтроки[0].Ссылка.ПолучитьОбъект(); 
			Данные.ИспользованныеСсылки.Добавить(НСтроки[0]);
		Иначе
			ТекущийДокументОбъект = Документы.КВП_НачислениеУслуг.СоздатьДокумент();	
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(ТекущийДокументОбъект, ПервыйДокументОбъект,,"Номер,Проведен"); 
		ТекущийДокументОбъект.ЕРЦ_ВидЛицевогоСчета = КлЗн.Ключ;		
		ТекущийДокументОбъект.ДополнительныеСвойства.Вставить("ЕРЦ_ЗаполнениеИзАРМ", Истина);
		ОчиститьТЧОбъектаНачисленияУслуг(ТекущийДокументОбъект);
		
		ДокументыОбъектыПоВидамЛС.Вставить(КлЗн.Ключ, ТекущийДокументОбъект);
	КонецЦикла;
	
	//Типовое заполнение ТЧ с услугами
	//заполняются либо Услуги, либо УслугиПоПриборамУчета
	ПервыйДокументОбъект.ЗаполнитьТабличнуюЧастьУслуги(ПервыйДокументОбъект.Объект); 
	
	//Для каждого ЛС получаем значение реквизита ЕРЦ_ВидЛицевогоСчета 
	//чтобы далее можно было перекидывать строки в другие документы по значению этого реквизита
	СоотЛицевыеСчета = Новый Соответствие;
	Для каждого Стр Из ПервыйДокументОбъект.Услуги Цикл
		СоотЛицевыеСчета.Вставить(Стр.ЛицевыеСчета, Неопределено);	
	КонецЦикла;
	Для каждого Стр Из ПервыйДокументОбъект.УслугиПоПоказаниямПУ Цикл
		СоотЛицевыеСчета.Вставить(Стр.ЛицевойСчет, Неопределено);	
	КонецЦикла; 
	МассивЛС = Новый Массив;
	Для каждого КлЗн Из СоотЛицевыеСчета Цикл
		МассивЛС.Добавить(КлЗн.Ключ);
	КонецЦикла;
	ВидыПоЛицевымСчетам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЛС, "ЕРЦ_ВидЛицевогоСчета");
	
	//Услуги
	//Удалим услуги не соответствующие набору
	//И ЛС которые есть в соответствии Данные.ЛицевыеСчетаСЕПД
	Для каждого Стр Из ПервыйДокументОбъект.Услуги Цикл 
		ТекущийВидЛицевогоСчета = ВидыПоЛицевымСчетам.Получить(Стр.ЛицевыеСчета);  
		ТекущиеУслугиНабора = Данные.НазначенныеНаборыУслугПоВидамЛС.Получить(ТекущийВидЛицевогоСчета);
		Если ТекущиеУслугиНабора = Неопределено Тогда 
			Данные.Лог.Добавить(СтрШаблон("Не задан набор услуг для вида ЛС ""%1""", ТекущийВидЛицевогоСчета));
			МассивУдаленияСтрок.Добавить(Стр);	
		ИначеЕсли Данные.ЛицевыеСчетаСЕПД.Получить(Стр.ЛицевыеСчета) <> Неопределено Тогда
			Данные.Лог.Добавить(СтрШаблон("ЛС ""%1"" есть в ЕПД текущего месяца", Стр.ЛицевыеСчета));
			МассивУдаленияСтрок.Добавить(Стр);	
		ИначеЕсли ТекущиеУслугиНабора.Получить(Стр.Услуга) = Неопределено Тогда
			Данные.Лог.Добавить(СтрШаблон("Услуга ""%1"" не соответствует набору для вида ЛС ""%2""", Стр.Услуга, ТекущийВидЛицевогоСчета));
			МассивУдаленияСтрок.Добавить(Стр);  
		ИначеЕсли ДокументыОбъектыПоВидамЛС.Получить(ТекущийВидЛицевогоСчета) = Неопределено Тогда
			Данные.Лог.Добавить(СтрШаблон("По услуге ""%1"" и виду ЛС ""%2"" не создавался документ(услуга является зависимой или базой расчета)", Данные.Услуга, ТекущийВидЛицевогоСчета));
			МассивУдаленияСтрок.Добавить(Стр);	
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрУд Из МассивУдаленияСтрок Цикл
		ПервыйДокументОбъект.Услуги.Удалить(СтрУд);
	КонецЦикла;	  
	МассивУдаленияСтрок.Очистить();
	// Проверим, не начислили ли уже услуги на объекты вручную(нет признака ЕРЦ_СформированИзАРМ)  
	Если ПервыйДокументОбъект.Услуги.Количество() > 0 Тогда
		ТЗ = ПервыйДокументОбъект.Услуги.Выгрузить(,"ЛицевыеСчета,Услуга,УслугаОснование");
		ТЗ.Свернуть("ЛицевыеСчета,Услуга,УслугаОснование");  
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("НачалоМесяца", Данные.НачалоМесяца);
		Запрос.УстановитьПараметр("КонецМесяца", Данные.КонецМесяца);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ЛицевыеСчета КАК ЛицевыеСчета,
		|	ТЗ.Услуга КАК Услуга,
		|	ТЗ.УслугаОснование КАК УслугаОснование
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_НачислениеУслугУслуги.ЛицевыеСчета КАК ЛицевыеСчета,
		|	КВП_НачислениеУслугУслуги.Услуга КАК Услуга,
		|	КВП_НачислениеУслугУслуги.УслугаОснование КАК УслугаОснование
		|ИЗ
		|	Документ.КВП_НачислениеУслуг.Услуги КАК КВП_НачислениеУслугУслуги
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
		|		ПО КВП_НачислениеУслугУслуги.ЛицевыеСчета = ТЗ.ЛицевыеСчета
		|			И КВП_НачислениеУслугУслуги.Услуга = ТЗ.Услуга
		|			И КВП_НачислениеУслугУслуги.УслугаОснование = ТЗ.УслугаОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
		|		ПО КВП_НачислениеУслугУслуги.Ссылка = КВП_НачислениеУслуг.Ссылка
		|ГДЕ
		|	НЕ КВП_НачислениеУслуг.ЕРЦ_СформированИзАРМ
		|	И КВП_НачислениеУслуг.Проведен
		|	И КВП_НачислениеУслуг.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И КВП_НачислениеУслугУслуги.Начислено <> 0";  
		ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
		Если ТаблицаНачислений.Количество() > 0 Тогда
			ТаблицаНачислений.Индексы.Добавить("ЛицевыеСчета,Услуга,УслугаОснование");
			Для каждого Стр Из ПервыйДокументОбъект.Услуги Цикл
				Если ТаблицаНачислений.НайтиСтроки(
					Новый Структура("ЛицевыеСчета, Услуга, УслугаОснование",
					Стр.ЛицевыеСчета, Стр.Услуга,Стр.УслугаОснование))
					.Количество() > 0 Тогда
					Данные.Лог.Добавить(СтрШаблон("ЛС ""%1"" и услуга ""%2"" есть в вручную сформированном документе в этом месяце", Стр.ЛицевыеСчета, Стр.Услуга));
					МассивУдаленияСтрок.Добавить(Стр);
				КонецЕсли; 	
			КонецЦикла;  
			Для каждого СтрУд Из МассивУдаленияСтрок Цикл
				ПервыйДокументОбъект.Услуги.Удалить(СтрУд);
			КонецЦикла;  
			МассивУдаленияСтрок.Очистить();			
		КонецЕсли; 
	КонецЕсли;  
	//Перекинем строки на подходящие документы
	Для каждого Стр Из ПервыйДокументОбъект.Услуги Цикл 
		ТекущийВидЛицевогоСчета = ВидыПоЛицевымСчетам.Получить(Стр.ЛицевыеСчета); 
		Если ТекущийВидЛицевогоСчета = Перечисления.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира Тогда 
			Данные.АгрегатныеДанные.ПустующихЛСНачислениеУслуг.Вставить(Стр.ЛицевыеСчета, Неопределено);
		Иначе
			Данные.АгрегатныеДанные.ЛСНачислениеУслуг.Вставить(Стр.ЛицевыеСчета, Неопределено);
		КонецЕсли; 
		Если ТекущийВидЛицевогоСчета = ПервыйВидЛицевогоСчета Тогда
			Продолжить;
		КонецЕсли; 
		ТекущийДокументОбъект = ДокументыОбъектыПоВидамЛС.Получить(ТекущийВидЛицевогоСчета);
		ЗаполнитьЗначенияСвойств(ТекущийДокументОбъект.Услуги.Добавить(), Стр);
		МассивУдаленияСтрок.Добавить(Стр); 
	КонецЦикла; 
	Для каждого СтрУд Из МассивУдаленияСтрок Цикл
		ПервыйДокументОбъект.Услуги.Удалить(СтрУд);
	КонецЦикла;   
	МассивУдаленияСтрок.Очистить();
	
	//УслугиПоПоказаниямПУ
	//Удалим услуги не соответствующие набору
	//И ЛС по которым есть ЕПД
	Для каждого Стр Из ПервыйДокументОбъект.УслугиПоПоказаниямПУ Цикл 
		ТекущийВидЛицевогоСчета = ВидыПоЛицевымСчетам.Получить(Стр.ЛицевойСчет);
		ТекущиеУслугиНабора = Данные.НазначенныеНаборыУслугПоВидамЛС.Получить(ТекущийВидЛицевогоСчета);
		Если ТекущиеУслугиНабора = Неопределено Тогда 
			Данные.Лог.Добавить(СтрШаблон("Не задан набор услуг для вида ЛС ""%1""", ТекущийВидЛицевогоСчета));
			МассивУдаленияСтрок.Добавить(Стр);	
		ИначеЕсли Данные.ЛицевыеСчетаСЕПД.Получить(Стр.ЛицевойСчет) <> Неопределено Тогда
			Данные.Лог.Добавить(СтрШаблон("ЛС ""%1"" есть в ЕПД текущего месяца", Стр.ЛицевойСчет));
			МассивУдаленияСтрок.Добавить(Стр);	
		ИначеЕсли ТекущиеУслугиНабора.Получить(Стр.Услуга) = Неопределено Тогда
			Данные.Лог.Добавить(СтрШаблон("Услуга ""%1"" не соответствует набору для вида ЛС ""%2""", Стр.Услуга, ТекущийВидЛицевогоСчета));
			МассивУдаленияСтрок.Добавить(Стр);  
		ИначеЕсли ДокументыОбъектыПоВидамЛС.Получить(ТекущийВидЛицевогоСчета) = Неопределено Тогда
			Данные.Лог.Добавить(СтрШаблон("По услуге ""%1"" и виду ЛС ""%2"" не создавался документ(услуга является зависимой или базой расчета)", Данные.Услуга, ТекущийВидЛицевогоСчета));
			МассивУдаленияСтрок.Добавить(Стр);	
		КонецЕсли; 
	КонецЦикла;
	Для каждого СтрУд Из МассивУдаленияСтрок Цикл
		ПервыйДокументОбъект.УслугиПоПоказаниямПУ.Удалить(СтрУд);
	КонецЦикла;	                                 
	МассивУдаленияСтрок.Очистить();
	// Проверим, не начислили ли уже услуги на объекты вручную(нет признака ЕРЦ_СформированИзАРМ)  
	Если ПервыйДокументОбъект.УслугиПоПоказаниямПУ.Количество() > 0 Тогда
		ТЗ = ПервыйДокументОбъект.УслугиПоПоказаниямПУ.Выгрузить(,"ЛицевойСчет,Услуга,УслугаОснование");
		ТЗ.Свернуть("ЛицевойСчет,Услуга,УслугаОснование");  
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("НачалоМесяца", Данные.НачалоМесяца);
		Запрос.УстановитьПараметр("КонецМесяца", Данные.КонецМесяца);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ЛицевойСчет КАК ЛицевойСчет,
		|	ТЗ.Услуга КАК Услуга,
		|	ТЗ.УслугаОснование КАК УслугаОснование
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Услуга КАК Услуга,
		|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.УслугаОснование КАК УслугаОснование
		|ИЗ
		|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугУслугиПоПоказаниямПУ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
		|		ПО КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет = ТЗ.ЛицевойСчет
		|			И КВП_НачислениеУслугУслугиПоПоказаниямПУ.Услуга = ТЗ.Услуга
		|			И КВП_НачислениеУслугУслугиПоПоказаниямПУ.УслугаОснование = ТЗ.УслугаОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
		|		ПО КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка = КВП_НачислениеУслуг.Ссылка
		|ГДЕ
		|	НЕ КВП_НачислениеУслуг.ЕРЦ_СформированИзАРМ
		|	И КВП_НачислениеУслуг.Проведен
		|	И КВП_НачислениеУслуг.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И КВП_НачислениеУслугУслугиПоПоказаниямПУ.Сумма <> 0";  
		ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
		Если ТаблицаНачислений.Количество() > 0 Тогда
			ТаблицаНачислений.Индексы.Добавить("ЛицевойСчет,Услуга,УслугаОснование");
			Для каждого Стр Из ПервыйДокументОбъект.УслугиПоПоказаниямПУ Цикл
				Если ТаблицаНачислений.НайтиСтроки(
					Новый Структура("ЛицевойСчет, Услуга, УслугаОснование",
					Стр.ЛицевойСчет, Стр.Услуга,Стр.УслугаОснование))
					.Количество() > 0 Тогда
					Данные.Лог.Добавить(СтрШаблон("ЛС ""%1"" и услуга ""%2"" есть в вручную сформированном документе в этом месяце", Стр.ЛицевойСчет, Стр.Услуга));
					МассивУдаленияСтрок.Добавить(Стр);
				КонецЕсли; 	
			КонецЦикла; 
			Для каждого СтрУд Из МассивУдаленияСтрок Цикл
				ПервыйДокументОбъект.УслугиПоПоказаниямПУ.Удалить(СтрУд);
			КонецЦикла;                                  
			МассивУдаленияСтрок.Очистить();
		КонецЕсли; 
	КонецЕсли; 
	//Перед расчетом нужно некоторые колонки почистить
	Если ЭтоОбщежитие Тогда
		//Нужно очищать количество если это общежитие для пустующей квартины
		Для каждого Стр Из ПервыйДокументОбъект.УслугиПоПоказаниямПУ Цикл
			Если ВидыПоЛицевымСчетам.Получить(Стр.ЛицевойСчет) = Перечисления.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира Тогда 
				Стр.ПоказаниеСчЛС = 0;
				//Стр.УчетныйИндивидуальныйОбъем = 0;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	//Делаем расчет ОДН, это кнопка на форме "Рассчитать ОДН"
	//для услуг с признаком "ЕРЦ_РассчитатьОДН"
	//Если Данные.ВидОперации = 2 и Данные.РассчитатьОДН Тогда 
	Если Данные.ВидОперации = 2 Тогда 
		ПервыйДокументОбъект.РассчитатьПоказания();   
	КонецЕсли;   
	//Подготовим таблицу с доступными данными для таблицы "Счетчики"
	ДоступныеЛСДляСчетчиков = Новый Соответствие;
	Для каждого Стр Из ПервыйДокументОбъект.УслугиПоПоказаниямПУ Цикл
		ДоступныеЛСДляСчетчиков.Вставить(Стр.ЛицевойСчет, Истина);
	КонецЦикла;
	//Перекинем строки на подходящие документы
	Для каждого Стр Из ПервыйДокументОбъект.УслугиПоПоказаниямПУ Цикл 
		ТекущийВидЛицевогоСчета = ВидыПоЛицевымСчетам.Получить(Стр.ЛицевойСчет);
		Если ТекущийВидЛицевогоСчета = Перечисления.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира Тогда 
			Данные.АгрегатныеДанные.ПустующихЛСНачислениеПУ.Вставить(Стр.ЛицевойСчет, Неопределено);
		Иначе
			Данные.АгрегатныеДанные.ЛСНачислениеПУ.Вставить(Стр.ЛицевойСчет, Неопределено);
		КонецЕсли; 
		Если ТекущийВидЛицевогоСчета = ПервыйВидЛицевогоСчета Тогда
			Продолжить;
		КонецЕсли; 
		ТекущийДокументОбъект = ДокументыОбъектыПоВидамЛС.Получить(ТекущийВидЛицевогоСчета); 
		ЗаполнитьЗначенияСвойств(ТекущийДокументОбъект.УслугиПоПоказаниямПУ.Добавить(), Стр); 
		МассивУдаленияСтрок.Добавить(Стр); 
	КонецЦикла; 
	Для каждого СтрУд Из МассивУдаленияСтрок Цикл
		ПервыйДокументОбъект.УслугиПоПоказаниямПУ.Удалить(СтрУд);
	КонецЦикла;   
	МассивУдаленияСтрок.Очистить();
	
	//Счетчики
	Для каждого Стр Из ПервыйДокументОбъект.Счетчики Цикл 
		Если ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
			//общедомовой счетчик перенесется в документ с заселенными ЛС,
			//где УслугиПоПоказаниямПУ.Количество() > 0
			Если ПервыйВидЛицевогоСчета <> Перечисления.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира и ПервыйДокументОбъект.УслугиПоПоказаниямПУ.Количество() > 0 Тогда
				//ПервыйДокументОбъект подходит, в нем и оставляем
				Продолжить;
			Иначе     
				//переносим в любой документ с показаниями по непустующему фонду
				//если ничего не подойдет, то данные остаются
				Для каждого КлЗн Из ДокументыОбъектыПоВидамЛС Цикл
					Если КлЗн.Ключ = ПервыйВидЛицевогоСчета или КлЗн.Ключ = Перечисления.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира Тогда
						Продолжить;
					КонецЕсли; 
					Если КлЗн.Значение.УслугиПоПоказаниямПУ.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли; 
					ЗаполнитьЗначенияСвойств(КлЗн.Значение.Счетчики.Добавить(), Стр);
					МассивУдаленияСтрок.Добавить(Стр);
					Прервать;
				КонецЦикла;
				Продолжить; //уходим на другую итерацию
			КонецЕсли; 
		КонецЕсли;
		Если ДоступныеЛСДляСчетчиков.Получить(Стр.ЛицевойСчет) = Неопределено Тогда
			МассивУдаленияСтрок.Добавить(Стр);  
			Продолжить;
		КонецЕсли;    
		ТекущийВидЛицевогоСчета = ВидыПоЛицевымСчетам.Получить(Стр.ЛицевойСчет); 
		Если ТекущийВидЛицевогоСчета = ПервыйВидЛицевогоСчета Тогда
			Продолжить;
		КонецЕсли; 		
		ТекущийДокументОбъект = ДокументыОбъектыПоВидамЛС.Получить(ТекущийВидЛицевогоСчета);
		ЗаполнитьЗначенияСвойств(ТекущийДокументОбъект.Счетчики.Добавить(), Стр);  
		МассивУдаленияСтрок.Добавить(Стр); 
	КонецЦикла; 
	Для каждого СтрУд Из МассивУдаленияСтрок Цикл
		ПервыйДокументОбъект.Счетчики.Удалить(СтрУд);
	КонецЦикла;   
	МассивУдаленияСтрок.Очистить();
	
	Для каждого КлЗн Из ДокументыОбъектыПоВидамЛС Цикл
		
		Если КлЗн.Ключ = ПервыйВидЛицевогоСчета Тогда
			Продолжить;
		КонецЕсли; 		
		ТекущийДокументОбъект = КлЗн.Значение;
		//ОбъектыСРаспределеннымРасходомОДН
		//это просто дублируем, т.к. там список зданий
		Для каждого Стр Из ПервыйДокументОбъект.ОбъектыСРаспределеннымРасходомОДН Цикл
			ЗаполнитьЗначенияСвойств(ТекущийДокументОбъект.ОбъектыСРаспределеннымРасходомОДН.Добавить(), Стр);
		КонецЦикла; 
		
		//УчтенныеОбъемыРасхожденийПУ не используется в ФГАУ, значит нигде 100%
		//НачисленияПоРассрочке не используется в ФГАУ, значит нигде 100%
		
	КонецЦикла;  
		
	Для каждого КлЗн Из ДокументыОбъектыПоВидамЛС Цикл
		
		ТекущийДокументОбъект = КлЗн.Значение;
		ТекущийДокументОбъект.Услуги.Сортировать("ЛицевыеСчета,Услуга,НачалоПериода");
		ТекущийДокументОбъект.УслугиПоПоказаниямПУ.Сортировать("ЛицевойСчет,Услуга,НачалоПериода"); 
		
		РасходПоОбщедомовымПУ = 0;         
		Для каждого Стр Из ТекущийДокументОбъект.Счетчики Цикл
			Если ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
				РасходПоОбщедомовымПУ = РасходПоОбщедомовымПУ + Стр.Расход;	
			КонецЕсли; 	
		КонецЦикла;
		ТекущийДокументОбъект.РасходПоОбщедомовымПУ = РасходПоОбщедомовымПУ;
		
		Если ТекущийДокументОбъект.Услуги.Количество() = 0 и ТекущийДокументОбъект.УслугиПоПоказаниямПУ.Количество() = 0 Тогда   
			Данные.Лог.Добавить(СтрШаблон("По услуге ""%1"" и виду ЛС ""%2"" создался пустой документ(возможно в наборе эта услуга не назначена для лицевых счетов)", Данные.Услуга, КлЗн.Ключ));
		Иначе 
			Данные.ЕстьДокументы = Истина;
			Если Данные.ВидОперации = 2 и ЭтоОбщежитие и
				КлЗн.Ключ = Перечисления.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира Тогда 
				//Для пустующего фонда в общежитии
				//Для типа помещения "Нежилое помещение" нужно очищать сумму в документе начислений услуг при расчете СОИ. 
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КВП_ЛицевыеСчета.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ЕРЦ_ВидПомещенияНежилоеПомещение КАК ЕРЦ_ВидПомещенияНежилоеПомещение
				|			ПО ЕРЦ_ВидПомещенияНежилоеПомещение.Значение = УПЖКХ_Помещения.ВидПомещения
				|		ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
				|ГДЕ
				|	КВП_ЛицевыеСчета.Ссылка В(&ЛицевыеСчета)";
				Запрос.УстановитьПараметр("ЛицевыеСчета", ТекущийДокументОбъект.УслугиПоПоказаниямПУ.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
				НежилыеЛС = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				Для каждого Стр Из ТекущийДокументОбъект.УслугиПоПоказаниямПУ Цикл
					Стр.Сумма = 0;   
					Если НежилыеЛС.Найти(Стр.ЛицевойСчет) <> Неопределено Тогда
						Стр.СуммаРаспределения = 0;  
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
		
		ТекущийДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); //само проведение 
		
		Если КлЗн.Ключ <> Перечисления.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира Тогда
			Если Данные.ВидОперации = 1 Тогда 
				Данные.АгрегатныеДанные.СуммаНачислениеУслуг = Данные.АгрегатныеДанные.СуммаНачислениеУслуг + ТекущийДокументОбъект.СуммаДокумента + ТекущийДокументОбъект.СуммаПоЗависимымУслугам;
			ИначеЕсли Данные.ВидОперации = 2 Тогда
				Данные.АгрегатныеДанные.СуммаНачислениеПУ = Данные.АгрегатныеДанные.СуммаНачислениеПУ + ТекущийДокументОбъект.СуммаДокумента + ТекущийДокументОбъект.СуммаПоЗависимымУслугам;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура АРМ_СформироватьЕПДПоЗданиям(Месяц, Организация, ГруппировкаПоЗданиям) Экспорт 
	Для каждого Эл Из ГруппировкаПоЗданиям Цикл
		АРМ_СформироватьЕПДПоЗданию(Месяц, Эл.Здание, Организация, Эл.НастройкаСбораДанных);
	КонецЦикла;
КонецПроцедуры

Процедура АРМ_СформироватьЕПДПоЗданию(Месяц, Здание, Организация, НастройкаСбораДанных) Экспорт 
	
	Попытка
		НачатьТранзакцию();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_АРМ_НачисленияПоЗданиям");
		ЭлементБлокировки.УстановитьЗначение("Месяц", Месяц);
		ЭлементБлокировки.УстановитьЗначение("Здание", Здание);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	епд_ЕдиныйПлатежныйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.епд_ЕдиныйПлатежныйДокумент КАК епд_ЕдиныйПлатежныйДокумент
		|ГДЕ
		|	епд_ЕдиныйПлатежныйДокумент.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И епд_ЕдиныйПлатежныйДокумент.Проведен
		|	И епд_ЕдиныйПлатежныйДокумент.Здание = &Здание
		|	И епд_ЕдиныйПлатежныйДокумент.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ерц_ВидОперацииЕПД.РасчетМесяцаНачисления)
		|	И епд_ЕдиныйПлатежныйДокумент.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НачислениеУслуг.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыНачисления
		|ИЗ
		|	Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
		|ГДЕ
		|	КВП_НачислениеУслуг.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И КВП_НачислениеУслуг.Объект = &Здание
		|	И КВП_НачислениеУслуг.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ))
		|	И КВП_НачислениеУслуг.Организация = &Организация
		|	И КВП_НачислениеУслуг.ЕРЦ_СформированИзАРМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВТ.ЛицевойСчет КАК ЛицевойСчет
		|		ИЗ
		|			(ВЫБРАТЬ
		|				КВП_НачислениеУслугУслуги.ЛицевыеСчета КАК ЛицевойСчет
		|			ИЗ
		|				Документ.КВП_НачислениеУслуг.Услуги КАК КВП_НачислениеУслугУслуги
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыНачисления КАК ДокументыНачисления
		|					ПО КВП_НачислениеУслугУслуги.Ссылка = ДокументыНачисления.Ссылка
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет
		|			ИЗ
		|				Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугУслугиПоПоказаниямПУ
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыНачисления КАК ДокументыНачисления
		|					ПО КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка = ДокументыНачисления.Ссылка) КАК ВТ
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|				ПО ВТ.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|		ГДЕ
		|			КВП_ЛицевыеСчета.ЕРЦ_ВидЛицевогоСчета <> ЗНАЧЕНИЕ(Перечисление.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира)) КАК ЛССНачислениямиБезПустующих
		|		ПО КВП_ЛицевыеСчета.ЛицевойСчет = ЛССНачислениямиБезПустующих.ЛицевойСчет
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период < &КонецМесяца
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЛицевыеСчета.ЛицевойСчет
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА КВП_ЛицевыеСчета.Регистратор ССЫЛКА Документ.КВП_ЗакрытиеЛицевогоСчета
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.Месяц КАК Месяц,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.Здание КАК Здание,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСНачислениеУслуг КАК КоличествоЛСНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоПустующихЛСНачислениеУслуг КАК КоличествоПустующихЛСНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСНачислениеПУ КАК КоличествоЛСНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоПустующихЛСНачислениеПУ КАК КоличествоПустующихЛСНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.СуммаНачислениеУслуг КАК СуммаНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.СуммаНачислениеПУ КАК СуммаНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСЕПД КАК КоличествоЛСЕПД,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.Статус КАК Статус,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ЕРЦ_АРМ_НачисленияПоЗданиям КАК ЕРЦ_АРМ_НачисленияПоЗданиям
		|ГДЕ
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.Месяц = &НачалоМесяца
		|	И ЕРЦ_АРМ_НачисленияПоЗданиям.Здание = &Здание";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Здание", Здание);
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Месяц));
		Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Месяц));
		Пакет = Запрос.ВыполнитьПакет();
		
		Выборка = Пакет[0].Выбрать();
		
		Если Выборка.Следующий() Тогда
			Док = Выборка.Ссылка.ПолучитьОбъект();
		Иначе		
			Док = Документы.епд_ЕдиныйПлатежныйДокумент.СоздатьДокумент();		
		КонецЕсли;     
		
		//Никита запросил на время тестов возможность создавать документы
		//относительно месяца начисления 
		Если Месяц = НачалоМесяца(ТекущаяДата()) Тогда
			Док.Дата = ТекущаяДата();      
		Иначе
			Док.Дата = КонецМесяца(Месяц);      
		КонецЕсли; 
		Док.МесяцПериод = Док.Дата;
		Док.Организация = Организация;   
		Док.НастройкаСбораДанных = НастройкаСбораДанных;
		Док.Статус = Перечисления.епд_СтатусыЕПД.Рассчитан;
		Док.Здание = Здание;
		Док.ВидОперации = Перечисления.ерц_ВидОперацииЕПД.РасчетМесяцаНачисления;
		
		Док.ЛицевыеСчета.Очистить();
		//Добавляем ЛС:
		//1. По которым были начисления в этом месяце
		//2. Сделаны были через АРМ
		//3. Кроме пустующего фонда
		//4. Исключая закрытые ЛС
		Выборка = Пакет[2].Выбрать();
		
		Пока Выборка.Следующий() Цикл 
			НовСтрока = Док.ЛицевыеСчета.Добавить();  
			НовСтрока.ЛицевойСчет = Выборка.ЛицевойСчет;
		КонецЦикла;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);   	
		
		Выборка = Пакет[3].Выбрать();
		Если Выборка.Следующий() Тогда
			РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.ДобавитьЗапись(
			Месяц, Здание, 
			Выборка.КоличествоЛСНачислениеПУ, Выборка.КоличествоЛСНачислениеУслуг,
			Выборка.КоличествоПустующихЛСНачислениеПУ, Выборка.КоличествоПустующихЛСНачислениеУслуг,
			Выборка.СуммаНачислениеПУ, Выборка.СуммаНачислениеУслуг,
			Док.ЛицевыеСчета.Количество(),0,
			Перечисления.ЕРЦ_АРМ_СтатусНачисления.СформированЕПД, "");
		Иначе
			РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.ДобавитьЗапись(
			Месяц, Здание, 
			0, 0,
			0, 0,
			0, 0,
			Док.ЛицевыеСчета.Количество(),0,
			Перечисления.ЕРЦ_АРМ_СтатусНачисления.СформированЕПД,"");
		КонецЕсли; 
				
		ЗафиксироватьТранзакцию();   
		
	Исключение  
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		
		РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.ОбновитьСтатус(
		Месяц, Здание, 
		Перечисления.ЕРЦ_АРМ_СтатусНачисления.ОшибкаЕПД,
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры 

Процедура ЗаполнениеАРМ_НачисленияПоЗданиям(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.КВП_НачислениеУслуг") и
		(Источник.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета или
		Источник.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ) Тогда
		
		МесяцДокумента = НачалоМесяца(Источник.Дата);
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
		Если Источник.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета Тогда
			Для каждого Стр Из Источник.Услуги Цикл
				НовСтрока = ТЗ.Добавить();	
				НовСтрока.ЛицевойСчет = Стр.ЛицевыеСчета;
				НовСтрока.Сумма = Стр.Начислено;
			КонецЦикла;
		ИначеЕсли Источник.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда 
			Для каждого Стр Из Источник.УслугиПоПоказаниямПУ Цикл
				НовСтрока = ТЗ.Добавить();	
				НовСтрока.ЛицевойСчет = Стр.ЛицевойСчет;
				НовСтрока.Сумма = Стр.Сумма;
			КонецЦикла;
		КонецЕсли;       
		ТЗ.Свернуть("ЛицевойСчет", "Сумма");
		
		Запрос = Новый Запрос;              
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("ВидОперации", Источник.ВидОперации);
		Запрос.УстановитьПараметр("НачалоМесяца", МесяцДокумента);
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(МесяцДокумента));
		Запрос.УстановитьПараметр("Проведение", РежимЗаписи = РежимЗаписиДокумента.Проведение);
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ЛицевойСчет КАК ЛицевойСчет,
		|	ТЗ.Сумма КАК СуммаНачисления
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_Здания.Ссылка КАК Здание,
		|	ТЗ.ЛицевойСчет КАК ЛицевойСчет,
		|	ТЗ.СуммаНачисления КАК СуммаНачисления
		|ПОМЕСТИТЬ ТЗ_Дополненная
		|ИЗ
		|	ТЗ КАК ТЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
		|				ПО УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка
		|			ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
		|		ПО ТЗ.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЗ_Дополненная.Здание КАК Здание
		|ПОМЕСТИТЬ Здания
		|ИЗ
		|	ТЗ_Дополненная КАК ТЗ_Дополненная";
		
		Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_АРМ_НачисленияПоЗданиям");
		ЭлементБлокировки.УстановитьЗначение("Месяц", МесяцДокумента);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Пакет[2];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Здание", "Здание");
		Блокировка.Заблокировать();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ3.Здание КАК Здание,
		|	&НачалоМесяца КАК Месяц,
		|	ВТ3.СуммаНачисления КАК СуммаНачисления,
		|	ВТ3.КоличествоЛС КАК КоличествоЛС,
		|	ВТ3.КоличествоПустующих КАК КоличествоПустующих,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСНачислениеУслуг КАК КоличествоЛСНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоПустующихЛСНачислениеУслуг КАК КоличествоПустующихЛСНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСНачислениеПУ КАК КоличествоЛСНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоПустующихЛСНачислениеПУ КАК КоличествоПустующихЛСНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.СуммаНачислениеУслуг КАК СуммаНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.СуммаНачислениеПУ КАК СуммаНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСЕПД КАК КоличествоЛСЕПД,
		|	ДействующиеЛС.ОбщееКоличествоЛС КАК ОбщееКоличествоЛС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ2.Здание КАК Здание,
		|		СУММА(ВТ2.СуммаНачисления) КАК СуммаНачисления,
		|		СУММА(ВЫБОР
		|				КОГДА ВТ2.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ) КАК КоличествоЛС,
		|		СУММА(ВЫБОР
		|				КОГДА ЕСТЬNULL(КВП_ЛицевыеСчета.ЕРЦ_ВидЛицевогоСчета, ЗНАЧЕНИЕ(Перечисление.ЕРЦ_ВидыЛицевыхСчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ЕРЦ_ВидыЛицевыхСчетов.ПустующаяКвартира)
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК КоличествоПустующих
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ВТ.Здание КАК Здание,
		|			ВТ.ЛицевойСчет КАК ЛицевойСчет,
		|			СУММА(ВТ.СуммаНачисления) КАК СуммаНачисления
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Здания.Здание КАК Здание,
		|				КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|				КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисления КАК СуммаНачисления
		|			ИЗ
		|				РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
		|					ПО КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор = КВП_НачислениеУслуг.Ссылка
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
		|								ВНУТРЕННЕЕ СОЕДИНЕНИЕ Здания КАК Здания
		|								ПО КВП_Здания.Ссылка = Здания.Здание
		|							ПО УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка
		|						ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
		|					ПО КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|			ГДЕ
		|				КВП_ВзаиморасчетыПоЛицевымСчетам.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|				И КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор <> &Ссылка
		|				И КВП_НачислениеУслуг.ВидОперации = &ВидОперации
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ТЗ_Дополненная.Здание,
		|				ВЫБОР
		|					КОГДА &Проведение
		|						ТОГДА ТЗ_Дополненная.ЛицевойСчет
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
		|				КОНЕЦ,
		|				ВЫБОР
		|					КОГДА &Проведение
		|						ТОГДА ТЗ_Дополненная.СуммаНачисления
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|			ИЗ
		|				ТЗ_Дополненная КАК ТЗ_Дополненная) КАК ВТ
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ.Здание,
		|			ВТ.ЛицевойСчет) КАК ВТ2
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|			ПО ВТ2.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ2.Здание) КАК ВТ3
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕРЦ_АРМ_НачисленияПоЗданиям КАК ЕРЦ_АРМ_НачисленияПоЗданиям
		|		ПО ВТ3.Здание = ЕРЦ_АРМ_НачисленияПоЗданиям.Здание
		|			И (ЕРЦ_АРМ_НачисленияПоЗданиям.Месяц = &НачалоМесяца)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(ВТ.ЛицевойСчет) КАК ОбщееКоличествоЛС,
		|			ВТ.Здание КАК Здание
		|		ИЗ
		|			(ВЫБРАТЬ
		|				КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|				Здания.Здание КАК Здание
		|			ИЗ
		|				РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Здания КАК Здания
		|						ПО УПЖКХ_Помещения.Владелец = Здания.Здание
		|					ПО КВП_ЛицевыеСчета.Объект = УПЖКХ_Помещения.Ссылка
		|			ГДЕ
		|				КВП_ЛицевыеСчета.Период < &КонецМесяца
		|			
		|			СГРУППИРОВАТЬ ПО
		|				КВП_ЛицевыеСчета.ЛицевойСчет,
		|				Здания.Здание
		|			
		|			ИМЕЮЩИЕ
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА КВП_ЛицевыеСчета.Регистратор ССЫЛКА Документ.КВП_ЗакрытиеЛицевогоСчета
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ) = ЛОЖЬ) КАК ВТ
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ.Здание) КАК ДействующиеЛС
		|		ПО ВТ3.Здание = ДействующиеЛС.Здание";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗначений = РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.СоздатьНаборЗаписей();
			НаборЗначений.Отбор.Месяц.Установить(Выборка.Месяц);
			НаборЗначений.Отбор.Здание.Установить(Выборка.Здание);
			
			НовЗапись = НаборЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, Выборка);
			
			Если Источник.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета Тогда
				НовЗапись.КоличествоЛСНачислениеУслуг = Выборка.КоличествоЛС;
				НовЗапись.КоличествоПустующихЛСНачислениеУслуг = Выборка.КоличествоПустующих;
				НовЗапись.СуммаНачислениеУслуг = Выборка.СуммаНачисления;
			ИначеЕсли Источник.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ Тогда
				НовЗапись.КоличествоЛСНачислениеПУ = Выборка.КоличествоЛС;
				НовЗапись.КоличествоПустующихЛСНачислениеПУ = Выборка.КоличествоПустующих; 
				НовЗапись.СуммаНачислениеПУ = Выборка.СуммаНачисления;
			КонецЕсли;
			
			НовЗапись.Статус = Перечисления.ЕРЦ_АРМ_СтатусНачисления.НачисленияСформированы; 
			НовЗапись.Комментарий = "";
			
			НаборЗначений.Записать();
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.епд_ЕдиныйПлатежныйДокумент") Тогда 
		
		Если Источник.ВыгрузкаЗаАктуальныйПериод = 1 Тогда
			МесяцДокумента = НачалоМесяца(Источник.МесяцПериод);
		Иначе
			МесяцДокумента = НачалоМесяца(Источник.Дата);
		КонецЕсли;  
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		
		Для каждого Стр Из Источник.ЛицевыеСчета Цикл
			НовСтрока = ТЗ.Добавить();	
			НовСтрока.ЛицевойСчет = Стр.ЛицевойСчет;
		КонецЦикла;
		
		ТЗ.Свернуть("ЛицевойСчет");
		
		Запрос = Новый Запрос;              
		Запрос.УстановитьПараметр("ТЗ", ТЗ);
		Запрос.УстановитьПараметр("НачалоМесяца", МесяцДокумента);
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(МесяцДокумента));
		Запрос.УстановитьПараметр("Проведение", РежимЗаписи = РежимЗаписиДокумента.Проведение);
		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ ТЗ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_Здания.Ссылка КАК Здание,
		|	ТЗ.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ ТЗ_Дополненная
		|ИЗ
		|	ТЗ КАК ТЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
		|				ПО УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка
		|			ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
		|		ПО ТЗ.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЗ_Дополненная.Здание КАК Здание
		|ПОМЕСТИТЬ Здания
		|ИЗ
		|	ТЗ_Дополненная КАК ТЗ_Дополненная";
		
		Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_АРМ_НачисленияПоЗданиям");
		ЭлементБлокировки.УстановитьЗначение("Месяц", МесяцДокумента);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Пакет[2];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Здание", "Здание");
		Блокировка.Заблокировать();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ2.Здание КАК Здание,
		|	&НачалоМесяца КАК Месяц,
		|	ВТ2.КоличествоЛС КАК КоличествоЛС,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСНачислениеУслуг КАК КоличествоЛСНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоПустующихЛСНачислениеУслуг КАК КоличествоПустующихЛСНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСНачислениеПУ КАК КоличествоЛСНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоПустующихЛСНачислениеПУ КАК КоличествоПустующихЛСНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.СуммаНачислениеУслуг КАК СуммаНачислениеУслуг,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.СуммаНачислениеПУ КАК СуммаНачислениеПУ,
		|	ЕРЦ_АРМ_НачисленияПоЗданиям.КоличествоЛСЕПД КАК КоличествоЛСЕПД,
		|	ДействующиеЛС.ОбщееКоличествоЛС КАК ОбщееКоличествоЛС
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ.Здание КАК Здание,
		|		СУММА(ВЫБОР
		|				КОГДА ВТ.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ) КАК КоличествоЛС
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Здания.Здание КАК Здание,
		|			епд_ЕдиныйПлатежныйДокументЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|		ИЗ
		|			Документ.епд_ЕдиныйПлатежныйДокумент КАК епд_ЕдиныйПлатежныйДокумент
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.епд_ЕдиныйПлатежныйДокумент.ЛицевыеСчета КАК епд_ЕдиныйПлатежныйДокументЛицевыеСчета
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
		|								ВНУТРЕННЕЕ СОЕДИНЕНИЕ Здания КАК Здания
		|								ПО КВП_Здания.Ссылка = Здания.Здание
		|							ПО УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка
		|						ПО КВП_ЛицевыеСчета.Адрес = УПЖКХ_Помещения.Ссылка
		|					ПО епд_ЕдиныйПлатежныйДокументЛицевыеСчета.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|				ПО епд_ЕдиныйПлатежныйДокумент.Ссылка = епд_ЕдиныйПлатежныйДокументЛицевыеСчета.Ссылка
		|		ГДЕ
		|			ВЫБОР
		|					КОГДА епд_ЕдиныйПлатежныйДокумент.ВыгрузкаЗаАктуальныйПериод = 1
		|						ТОГДА епд_ЕдиныйПлатежныйДокумент.МесяцПериод
		|					ИНАЧЕ епд_ЕдиныйПлатежныйДокумент.Дата
		|				КОНЕЦ МЕЖДУ &НачалоМесяца И &КонецМесяца
		|			И епд_ЕдиныйПлатежныйДокумент.Ссылка <> &Ссылка
		|			И епд_ЕдиныйПлатежныйДокумент.Проведен
		|		
		|		ОБЪЕДИНИТЬ
		|		
		|		ВЫБРАТЬ
		|			ТЗ_Дополненная.Здание,
		|			ВЫБОР
		|				КОГДА &Проведение
		|					ТОГДА ТЗ_Дополненная.ЛицевойСчет
		|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
		|			КОНЕЦ
		|		ИЗ
		|			ТЗ_Дополненная КАК ТЗ_Дополненная
		|		ГДЕ
		|			&Проведение) КАК ВТ
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ.Здание) КАК ВТ2
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЕРЦ_АРМ_НачисленияПоЗданиям КАК ЕРЦ_АРМ_НачисленияПоЗданиям
		|		ПО ВТ2.Здание = ЕРЦ_АРМ_НачисленияПоЗданиям.Здание
		|			И (ЕРЦ_АРМ_НачисленияПоЗданиям.Месяц = &НачалоМесяца)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КОЛИЧЕСТВО(ВТ.ЛицевойСчет) КАК ОбщееКоличествоЛС,
		|			ВТ.Здание КАК Здание
		|		ИЗ
		|			(ВЫБРАТЬ
		|				КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|				Здания.Здание КАК Здание
		|			ИЗ
		|				РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Здания КАК Здания
		|						ПО УПЖКХ_Помещения.Владелец = Здания.Здание
		|					ПО КВП_ЛицевыеСчета.Объект = УПЖКХ_Помещения.Ссылка
		|			ГДЕ
		|				КВП_ЛицевыеСчета.Период < &КонецМесяца
		|			
		|			СГРУППИРОВАТЬ ПО
		|				КВП_ЛицевыеСчета.ЛицевойСчет,
		|				Здания.Здание
		|			
		|			ИМЕЮЩИЕ
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА КВП_ЛицевыеСчета.Регистратор ССЫЛКА Документ.КВП_ЗакрытиеЛицевогоСчета
		|							ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ
		|					КОНЕЦ) = ЛОЖЬ) КАК ВТ
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВТ.Здание) КАК ДействующиеЛС
		|		ПО ВТ2.Здание = ДействующиеЛС.Здание";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НаборЗначений = РегистрыСведений.ЕРЦ_АРМ_НачисленияПоЗданиям.СоздатьНаборЗаписей();
			НаборЗначений.Отбор.Месяц.Установить(Выборка.Месяц);
			НаборЗначений.Отбор.Здание.Установить(Выборка.Здание);
			
			НовЗапись = НаборЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, Выборка);    
			
			НовЗапись.КоличествоЛСЕПД = Выборка.КоличествоЛС;
			
			НовЗапись.Статус = Перечисления.ЕРЦ_АРМ_СтатусНачисления.СформированЕПД; 
			НовЗапись.Комментарий = "";
			
			НаборЗначений.Записать();
		КонецЦикла;
	Иначе 
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОчиститьТЧОбъектаНачисленияУслуг(ДокОбъект) Экспорт 

	ДокОбъект.Услуги.Очистить();
	ДокОбъект.УслугиПоПоказаниямПУ.Очистить();
	ДокОбъект.Счетчики.Очистить();
	ДокОбъект.УчтенныеОбъемыРасхожденийПУ.Очистить();
	ДокОбъект.ОбъектыСРаспределеннымРасходомОДН.Очистить();
	ДокОбъект.НачисленияПоРассрочке.Очистить();   

КонецПроцедуры
 


 

#КонецОбласти 

#Область КвитанцииВхранилище 

Процедура ВыгрузкаКвитанцийВХранилище(МассивЛС, ДатаНачалаМесяца, ИмяПакпкиДляВыгрузкиФайловКвитанций) Экспорт
    ОбработкаКвитанции = Обработки.ЕРЦ_РаботаСКвитанциями.Создать();
	Для Каждого эл Из МассивЛС Цикл 
		Попытка
			
			НачатьТранзакцию();   
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЕРЦ_ИмяВыгруженныхФайловКвитанций");
			ЭлементБлокировки.УстановитьЗначение("Период", ДатаНачалаМесяца);
			ЭлементБлокировки.УстановитьЗначение("ЛицевойСчет", эл.ЛицСчет);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			РегМенеджерЗаписи = РегистрыСведений.ЕРЦ_ИмяВыгруженныхФайловКвитанций.СоздатьМенеджерЗаписи();
			РегМенеджерЗаписи.ЛицевойСчет = эл.ЛицСчет;
			РегМенеджерЗаписи.Период= ДатаНачалаМесяца;
			РегМенеджерЗаписи.Прочитать();
			
			Если РегМенеджерЗаписи.ФайлСформирован = Истина Тогда
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли; 
			КонецЕсли;
			
			ТабДок = ОбработкаКвитанции.ВывестиКвитанциюНаПечать(Неопределено, ДатаНачалаМесяца, эл.ЛицСчет, , , , , , , Ложь);
			
			Если ТабДок = Неопределено Тогда
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли; 
			КонецЕсли;
			
			ТабДок.Записать(ИмяПакпкиДляВыгрузкиФайловКвитанций + "/" + эл.ИмяФайлаКвитанции, ТипФайлаТабличногоДокумента.PDF);   
			
			//Записываем флаг в регистр
			РегМенеджерЗаписи.ФайлСформирован = Истина;
			РегМенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();

		Исключение
			ЗаписьЖурналаРегистрации("Не создан файл квитанции для " + эл.ЛицСчет,
										УровеньЖурналаРегистрации.Ошибка, , ,
										НСтр("ru = 'Загрузка квитанций в хранилище'"));
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;  
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

# Область РаботаСВыводомКвитанцииЕПДВ

Процедура СформироватьКвитанцииЕПДВФоне(ТабДок, ПериодФормирования, МассивЛицСчетов, Очищать, Адрес) Экспорт
	ОбработкаКвитанции = Обработки.ЕРЦ_РаботаСКвитанциями.Создать();
	ОбработкаКвитанции.ВывестиКвитанцииНаПечать(ТабДок, ПериодФормирования, МассивЛицСчетов, Очищать);
	ПоместитьВоВременноеХранилище(ТабДок, Адрес);
КонецПроцедуры

#КонецОбласти 

Функция ПолучатьТабДокЕРЦ_ОтчетПоВыгрузкеЕПДНаСайт(ПараметрыОтчета) Экспорт 
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Отчеты.ЕРЦ_ОтчетПоВыгрузкеЕПДНаСайт.ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.Здание КАК Здание,
	|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_Здания.ФедеральныйОкруг КАК ФедеральныйОкруг,
	|	КВП_Здания.Регион КАК Регион,
	|	ВЫБОР
	|		КОГДА КВП_Здания.ЭтоОбщежитие
	|			ТОГДА ""Общежитие""
	|		ИНАЧЕ ""МКД""
	|	КОНЕЦ КАК ТипЗдания,
	|	ВЫБОР
	|		КОГДА ЕРЦ_РегистрацияЛСдляОбменаССайтом.Выгружен
	|			ТОГДА ""Передано""
	|		ИНАЧЕ ""Не передано""
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.ЕРЦ_РегистрацияЛСдляОбменаССайтом КАК ЕРЦ_РегистрацияЛСдляОбменаССайтом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
	|		ПО ЕРЦ_РегистрацияЛСдляОбменаССайтом.Здание = КВП_Здания.Ссылка
	|ГДЕ
	|	ЕРЦ_РегистрацияЛСдляОбменаССайтом.МесяцОбмена МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЕРЦ_РегистрацияЛСдляОбменаССайтом.Организация = &Организация
	|	И ЕРЦ_РегистрацияЛСдляОбменаССайтом.СформированЕПД
	|	И &УсловиеОтборЛицевойСчет
	|	И &УсловиеОтборЗдание
	|	И &УсловиеОтборРегион
	|	И &УсловиеОтборСубрегион
	|	И &УсловиеОтборПризнакОтправки
	|ИТОГИ ПО
	|	ФедеральныйОкруг,
	|	Регион,
	|	ТипЗдания,
	|	Здание";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ОтборРегион) Тогда
		Запрос.УстановитьПараметр("ОтборРегион", ПараметрыОтчета.ОтборРегион);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборРегион", "ЕРЦ_РегистрацияЛСдляОбменаССайтом.Здание.Регион = &ОтборРегион");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборРегион", "ИСТИНА");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ОтборСубрегион) Тогда
		Запрос.УстановитьПараметр("ОтборСубрегион", ПараметрыОтчета.ОтборСубрегион);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборСубрегион", "ЕРЦ_РегистрацияЛСдляОбменаССайтом.Здание.ЕРЦ_Субрегион = &ОтборСубрегион");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборСубрегион", "ИСТИНА");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ОтборЗдание) Тогда
		Запрос.УстановитьПараметр("ОтборЗдание", ПараметрыОтчета.ОтборЗдание);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборЗдание", "ЕРЦ_РегистрацияЛСдляОбменаССайтом.Здание = &ОтборЗдание");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборЗдание", "ИСТИНА");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ОтборЛицевойСчет) Тогда
		Запрос.УстановитьПараметр("ОтборЛицевойСчет", ПараметрыОтчета.ОтборЛицевойСчет);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборЛицевойСчет", "ЕРЦ_РегистрацияЛСдляОбменаССайтом.ЛицевойСчет = &ОтборЛицевойСчет");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборЛицевойСчет", "ИСТИНА");
	КонецЕсли; 
	
	Если ПараметрыОтчета.ОтборПризнакОтправки = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборПризнакОтправки", "ИСТИНА");
	ИначеЕсли ПараметрыОтчета.ОтборПризнакОтправки = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборПризнакОтправки", "ЕРЦ_РегистрацияЛСдляОбменаССайтом.Выгружен");
	ИначеЕсли ПараметрыОтчета.ОтборПризнакОтправки = 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтборПризнакОтправки", "Не ЕРЦ_РегистрацияЛСдляОбменаССайтом.Выгружен");
	Иначе
		ВызватьИсключение "Не предусмотренное значение";
	КонецЕсли; 
	
	ТабДок.Вывести(Макет.ПолучитьОбласть("Шапка"));
		
	ВыборкаФО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	КоличествоЕПД = 0;
	ТабДок.НачатьАвтогруппировкуСтрок();
	Пока ВыборкаФО.Следующий() Цикл
		ОбластьФО = Макет.ПолучитьОбласть("Строка"); 
		ОбластьФО.Параметры.ФедеральныйОкруг = ВыборкаФО.ФедеральныйОкруг;
		ТабДок.Вывести(ОбластьФО,0);  
		ВыборкаРегион = ВыборкаФО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРегион.Следующий() Цикл
			ОбластьРегион = Макет.ПолучитьОбласть("Строка"); 
			ОбластьРегион.Параметры.Регион = ВыборкаРегион.Регион;
			ТабДок.Вывести(ОбластьРегион,1);
			ВыборкаТипЗдания = ВыборкаРегион.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТипЗдания.Следующий() Цикл
				ОбластьТипЗдания = Макет.ПолучитьОбласть("Строка"); 
				ОбластьТипЗдания.Параметры.ТипЗдания = ВыборкаТипЗдания.ТипЗдания;
				ТабДок.Вывести(ОбластьТипЗдания,2);
				ВыборкаЗдание = ВыборкаТипЗдания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЗдание.Следующий() Цикл
					ОбластьЗдание = Макет.ПолучитьОбласть("Строка"); 
					ОбластьЗдание.Параметры.Здание = ВыборкаЗдание.Здание;
					ТабДок.Вывести(ОбластьЗдание,3);
					Выборка = ВыборкаЗдание.Выбрать();
					Пока Выборка.Следующий() Цикл
						ОбластьВыборка = Макет.ПолучитьОбласть("Строка"); 
						ОбластьВыборка.Параметры.ЛицевойСчет = Выборка.ЛицевойСчет;
						ОбластьВыборка.Параметры.Статус = Выборка.Статус;
						ТабДок.Вывести(ОбластьВыборка,4); 
						КоличествоЕПД = КоличествоЕПД + 1;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла; 
	КонецЦикла; 
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	ОбластьИтогЕПД = Макет.ПолучитьОбласть("ИтогЕПД");
	ОбластьИтогЕПД.Параметры.КоличествоЕПД = КоличествоЕПД;
	ТабДок.Вывести(ОбластьИтогЕПД);
	
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.АвтоМасштаб = Истина;
	Возврат ТабДок;
	
КонецФункции

